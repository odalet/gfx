// This file is auto generated, do not edit.
using System;

#pragma warning disable IDE1006 // Naming Styles
namespace ScanPlayer.OpenGL;

unsafe partial class GL
{
    unsafe partial class GLApi
    {
        public void glAccum(uint op, float value) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glAccum)(op, value);
        public void glAccumxOES(uint op, int value) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glAccumxOES)(op, value);
        public void glActiveProgramEXT(uint program) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glActiveProgramEXT)(program);
        public void glActiveShaderProgram(uint pipeline, uint program) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glActiveShaderProgram)(pipeline, program);
        public void glActiveShaderProgramEXT(uint pipeline, uint program) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glActiveShaderProgramEXT)(pipeline, program);
        public void glActiveStencilFaceEXT(uint face) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glActiveStencilFaceEXT)(face);
        public void glActiveTexture(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glActiveTexture)(texture);
        public void glActiveTextureARB(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glActiveTextureARB)(texture);
        public void glActiveVaryingNV(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glActiveVaryingNV)(program, name);
        public void glAlphaFragmentOp1ATI(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glAlphaFragmentOp1ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        public void glAlphaFragmentOp2ATI(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glAlphaFragmentOp2ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        public void glAlphaFragmentOp3ATI(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glAlphaFragmentOp3ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        public void glAlphaFunc(uint func, float reference) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glAlphaFunc)(func, reference);
        public void glAlphaFuncQCOM(uint func, float reference) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glAlphaFuncQCOM)(func, reference);
        public void glAlphaFuncx(uint func, int reference) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glAlphaFuncx)(func, reference);
        public void glAlphaFuncxOES(uint func, int reference) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glAlphaFuncxOES)(func, reference);
        public void glAlphaToCoverageDitherControlNV(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glAlphaToCoverageDitherControlNV)(mode);
        public void glApplyFramebufferAttachmentCMAAINTEL() => ((delegate* unmanaged[Cdecl]<void>)vtable.glApplyFramebufferAttachmentCMAAINTEL)();
        public void glApplyTextureEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glApplyTextureEXT)(mode);
        public byte glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout) => ((delegate* unmanaged[Cdecl]<uint, ulong, uint, byte>)vtable.glAcquireKeyedMutexWin32EXT)(memory, key, timeout);
        public byte glAreProgramsResidentNV(int n, uint* programs, byte* residences) => ((delegate* unmanaged[Cdecl]<int, uint*, byte*, byte>)vtable.glAreProgramsResidentNV)(n, programs, residences);
        public byte glAreTexturesResident(int n, uint* textures, byte* residences) => ((delegate* unmanaged[Cdecl]<int, uint*, byte*, byte>)vtable.glAreTexturesResident)(n, textures, residences);
        public byte glAreTexturesResidentEXT(int n, uint* textures, byte* residences) => ((delegate* unmanaged[Cdecl]<int, uint*, byte*, byte>)vtable.glAreTexturesResidentEXT)(n, textures, residences);
        public void glArrayElement(int i) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glArrayElement)(i);
        public void glArrayElementEXT(int i) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glArrayElementEXT)(i);
        public void glArrayObjectATI(uint array, int size, uint type, int stride, uint buffer, uint offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, uint, uint, void>)vtable.glArrayObjectATI)(array, size, type, stride, buffer, offset);
        public uint glAsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray) => ((delegate* unmanaged[Cdecl]<int, uint*, ulong*, uint, uint, uint, uint, nint, nint, nint, int, uint*, ulong*, uint>)vtable.glAsyncCopyBufferSubDataNVX)(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        public uint glAsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray) => ((delegate* unmanaged[Cdecl]<int, uint*, ulong*, uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, int, uint*, ulong*, uint>)vtable.glAsyncCopyImageSubDataNVX)(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        public void glAsyncMarkerSGIX(uint marker) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glAsyncMarkerSGIX)(marker);
        public void glAttachObjectARB(nint containerObj, nint obj) => ((delegate* unmanaged[Cdecl]<nint, nint, void>)vtable.glAttachObjectARB)(containerObj, obj);
        public void glAttachShader(uint program, uint shader) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glAttachShader)(program, shader);
        public void glBegin(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBegin)(mode);
        public void glBeginConditionalRender(uint id, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBeginConditionalRender)(id, mode);
        public void glBeginConditionalRenderNV(uint id, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBeginConditionalRenderNV)(id, mode);
        public void glBeginConditionalRenderNVX(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginConditionalRenderNVX)(id);
        public void glBeginFragmentShaderATI() => ((delegate* unmanaged[Cdecl]<void>)vtable.glBeginFragmentShaderATI)();
        public void glBeginOcclusionQueryNV(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginOcclusionQueryNV)(id);
        public void glBeginPerfMonitorAMD(uint monitor) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginPerfMonitorAMD)(monitor);
        public void glBeginPerfQueryINTEL(uint queryHandle) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginPerfQueryINTEL)(queryHandle);
        public void glBeginQuery(uint target, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBeginQuery)(target, id);
        public void glBeginQueryARB(uint target, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBeginQueryARB)(target, id);
        public void glBeginQueryEXT(uint target, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBeginQueryEXT)(target, id);
        public void glBeginQueryIndexed(uint target, uint index, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBeginQueryIndexed)(target, index, id);
        public void glBeginTransformFeedback(uint primitiveMode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginTransformFeedback)(primitiveMode);
        public void glBeginTransformFeedbackEXT(uint primitiveMode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginTransformFeedbackEXT)(primitiveMode);
        public void glBeginTransformFeedbackNV(uint primitiveMode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginTransformFeedbackNV)(primitiveMode);
        public void glBeginVertexShaderEXT() => ((delegate* unmanaged[Cdecl]<void>)vtable.glBeginVertexShaderEXT)();
        public void glBeginVideoCaptureNV(uint video_capture_slot) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBeginVideoCaptureNV)(video_capture_slot);
        public void glBindAttribLocation(uint program, uint index, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glBindAttribLocation)(program, index, name);
        public void glBindAttribLocationARB(nint programObj, uint index, byte* name) => ((delegate* unmanaged[Cdecl]<nint, uint, byte*, void>)vtable.glBindAttribLocationARB)(programObj, index, name);
        public void glBindBuffer(uint target, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindBuffer)(target, buffer);
        public void glBindBufferARB(uint target, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindBufferARB)(target, buffer);
        public void glBindBufferBase(uint target, uint index, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBindBufferBase)(target, index, buffer);
        public void glBindBufferBaseEXT(uint target, uint index, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBindBufferBaseEXT)(target, index, buffer);
        public void glBindBufferBaseNV(uint target, uint index, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBindBufferBaseNV)(target, index, buffer);
        public void glBindBufferOffsetEXT(uint target, uint index, uint buffer, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glBindBufferOffsetEXT)(target, index, buffer, offset);
        public void glBindBufferOffsetNV(uint target, uint index, uint buffer, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glBindBufferOffsetNV)(target, index, buffer, offset);
        public void glBindBufferRange(uint target, uint index, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glBindBufferRange)(target, index, buffer, offset, size);
        public void glBindBufferRangeEXT(uint target, uint index, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glBindBufferRangeEXT)(target, index, buffer, offset, size);
        public void glBindBufferRangeNV(uint target, uint index, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glBindBufferRangeNV)(target, index, buffer, offset, size);
        public void glBindBuffersBase(uint target, uint first, int count, uint* buffers) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, void>)vtable.glBindBuffersBase)(target, first, count, buffers);
        public void glBindBuffersRange(uint target, uint first, int count, uint* buffers, nint* offsets, nint* sizes) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, nint*, nint*, void>)vtable.glBindBuffersRange)(target, first, count, buffers, offsets, sizes);
        public void glBindFragDataLocation(uint program, uint color, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glBindFragDataLocation)(program, color, name);
        public void glBindFragDataLocationEXT(uint program, uint color, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glBindFragDataLocationEXT)(program, color, name);
        public void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, byte*, void>)vtable.glBindFragDataLocationIndexed)(program, colorNumber, index, name);
        public void glBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, byte*, void>)vtable.glBindFragDataLocationIndexedEXT)(program, colorNumber, index, name);
        public void glBindFragmentShaderATI(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindFragmentShaderATI)(id);
        public void glBindFramebuffer(uint target, uint framebuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindFramebuffer)(target, framebuffer);
        public void glBindFramebufferEXT(uint target, uint framebuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindFramebufferEXT)(target, framebuffer);
        public void glBindFramebufferOES(uint target, uint framebuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindFramebufferOES)(target, framebuffer);
        public void glBindImageTexture(uint unit, uint texture, int level, byte layered, int layer, uint access, uint format) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte, int, uint, uint, void>)vtable.glBindImageTexture)(unit, texture, level, layered, layer, access, format);
        public void glBindImageTextureEXT(uint index, uint texture, int level, byte layered, int layer, uint access, int format) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte, int, uint, int, void>)vtable.glBindImageTextureEXT)(index, texture, level, layered, layer, access, format);
        public void glBindImageTextures(uint first, int count, uint* textures) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glBindImageTextures)(first, count, textures);
        public uint glBindLightParameterEXT(uint light, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vtable.glBindLightParameterEXT)(light, value);
        public uint glBindMaterialParameterEXT(uint face, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vtable.glBindMaterialParameterEXT)(face, value);
        public void glBindMultiTextureEXT(uint texunit, uint target, uint texture) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBindMultiTextureEXT)(texunit, target, texture);
        public uint glBindParameterEXT(uint value) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glBindParameterEXT)(value);
        public void glBindProgramARB(uint target, uint program) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindProgramARB)(target, program);
        public void glBindProgramNV(uint target, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindProgramNV)(target, id);
        public void glBindProgramPipeline(uint pipeline) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindProgramPipeline)(pipeline);
        public void glBindProgramPipelineEXT(uint pipeline) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindProgramPipelineEXT)(pipeline);
        public void glBindRenderbuffer(uint target, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindRenderbuffer)(target, renderbuffer);
        public void glBindRenderbufferEXT(uint target, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindRenderbufferEXT)(target, renderbuffer);
        public void glBindRenderbufferOES(uint target, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindRenderbufferOES)(target, renderbuffer);
        public void glBindSampler(uint unit, uint sampler) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindSampler)(unit, sampler);
        public void glBindSamplers(uint first, int count, uint* samplers) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glBindSamplers)(first, count, samplers);
        public void glBindShadingRateImageNV(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindShadingRateImageNV)(texture);
        public uint glBindTexGenParameterEXT(uint unit, uint coord, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint>)vtable.glBindTexGenParameterEXT)(unit, coord, value);
        public void glBindTexture(uint target, uint texture) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindTexture)(target, texture);
        public void glBindTextureEXT(uint target, uint texture) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindTextureEXT)(target, texture);
        public void glBindTextureUnit(uint unit, uint texture) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindTextureUnit)(unit, texture);
        public uint glBindTextureUnitParameterEXT(uint unit, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vtable.glBindTextureUnitParameterEXT)(unit, value);
        public void glBindTextures(uint first, int count, uint* textures) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glBindTextures)(first, count, textures);
        public void glBindTransformFeedback(uint target, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindTransformFeedback)(target, id);
        public void glBindTransformFeedbackNV(uint target, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBindTransformFeedbackNV)(target, id);
        public void glBindVertexArray(uint array) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindVertexArray)(array);
        public void glBindVertexArrayAPPLE(uint array) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindVertexArrayAPPLE)(array);
        public void glBindVertexArrayOES(uint array) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindVertexArrayOES)(array);
        public void glBindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, int, void>)vtable.glBindVertexBuffer)(bindingindex, buffer, offset, stride);
        public void glBindVertexBuffers(uint first, int count, uint* buffers, nint* offsets, int* strides) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, nint*, int*, void>)vtable.glBindVertexBuffers)(first, count, buffers, offsets, strides);
        public void glBindVertexShaderEXT(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBindVertexShaderEXT)(id);
        public void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, uint frame_region, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glBindVideoCaptureStreamBufferNV)(video_capture_slot, stream, frame_region, offset);
        public void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, uint frame_region, uint target, uint texture) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glBindVideoCaptureStreamTextureNV)(video_capture_slot, stream, frame_region, target, texture);
        public void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glBinormal3bEXT)(bx, by, bz);
        public void glBinormal3bvEXT(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glBinormal3bvEXT)(v);
        public void glBinormal3dEXT(double bx, double by, double bz) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glBinormal3dEXT)(bx, by, bz);
        public void glBinormal3dvEXT(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glBinormal3dvEXT)(v);
        public void glBinormal3fEXT(float bx, float by, float bz) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glBinormal3fEXT)(bx, by, bz);
        public void glBinormal3fvEXT(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glBinormal3fvEXT)(v);
        public void glBinormal3iEXT(int bx, int by, int bz) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glBinormal3iEXT)(bx, by, bz);
        public void glBinormal3ivEXT(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glBinormal3ivEXT)(v);
        public void glBinormal3sEXT(short bx, short by, short bz) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glBinormal3sEXT)(bx, by, bz);
        public void glBinormal3svEXT(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glBinormal3svEXT)(v);
        public void glBinormalPointerEXT(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glBinormalPointerEXT)(type, stride, pointer);
        public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap) => ((delegate* unmanaged[Cdecl]<int, int, float, float, float, float, byte*, void>)vtable.glBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap);
        public void glBitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, byte*, void>)vtable.glBitmapxOES)(width, height, xorig, yorig, xmove, ymove, bitmap);
        public void glBlendBarrier() => ((delegate* unmanaged[Cdecl]<void>)vtable.glBlendBarrier)();
        public void glBlendBarrierKHR() => ((delegate* unmanaged[Cdecl]<void>)vtable.glBlendBarrierKHR)();
        public void glBlendBarrierNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glBlendBarrierNV)();
        public void glBlendColor(float red, float green, float blue, float alpha) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glBlendColor)(red, green, blue, alpha);
        public void glBlendColorEXT(float red, float green, float blue, float alpha) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glBlendColorEXT)(red, green, blue, alpha);
        public void glBlendColorxOES(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glBlendColorxOES)(red, green, blue, alpha);
        public void glBlendEquation(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBlendEquation)(mode);
        public void glBlendEquationEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBlendEquationEXT)(mode);
        public void glBlendEquationIndexedAMD(uint buf, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationIndexedAMD)(buf, mode);
        public void glBlendEquationOES(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glBlendEquationOES)(mode);
        public void glBlendEquationSeparate(uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationSeparate)(modeRGB, modeAlpha);
        public void glBlendEquationSeparateEXT(uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationSeparateEXT)(modeRGB, modeAlpha);
        public void glBlendEquationSeparateIndexedAMD(uint buf, uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendEquationSeparateIndexedAMD)(buf, modeRGB, modeAlpha);
        public void glBlendEquationSeparateOES(uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationSeparateOES)(modeRGB, modeAlpha);
        public void glBlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendEquationSeparatei)(buf, modeRGB, modeAlpha);
        public void glBlendEquationSeparateiARB(uint buf, uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendEquationSeparateiARB)(buf, modeRGB, modeAlpha);
        public void glBlendEquationSeparateiEXT(uint buf, uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendEquationSeparateiEXT)(buf, modeRGB, modeAlpha);
        public void glBlendEquationSeparateiOES(uint buf, uint modeRGB, uint modeAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendEquationSeparateiOES)(buf, modeRGB, modeAlpha);
        public void glBlendEquationi(uint buf, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationi)(buf, mode);
        public void glBlendEquationiARB(uint buf, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationiARB)(buf, mode);
        public void glBlendEquationiEXT(uint buf, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationiEXT)(buf, mode);
        public void glBlendEquationiOES(uint buf, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendEquationiOES)(buf, mode);
        public void glBlendFunc(uint sfactor, uint dfactor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glBlendFunc)(sfactor, dfactor);
        public void glBlendFuncIndexedAMD(uint buf, uint src, uint dst) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendFuncIndexedAMD)(buf, src, dst);
        public void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        public void glBlendFuncSeparateEXT(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateEXT)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        public void glBlendFuncSeparateINGR(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateINGR)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        public void glBlendFuncSeparateIndexedAMD(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateIndexedAMD)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public void glBlendFuncSeparateOES(uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateOES)(srcRGB, dstRGB, srcAlpha, dstAlpha);
        public void glBlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public void glBlendFuncSeparateiARB(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateiARB)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public void glBlendFuncSeparateiEXT(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateiEXT)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public void glBlendFuncSeparateiOES(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glBlendFuncSeparateiOES)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public void glBlendFunci(uint buf, uint src, uint dst) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendFunci)(buf, src, dst);
        public void glBlendFunciARB(uint buf, uint src, uint dst) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendFunciARB)(buf, src, dst);
        public void glBlendFunciEXT(uint buf, uint src, uint dst) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendFunciEXT)(buf, src, dst);
        public void glBlendFunciOES(uint buf, uint src, uint dst) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glBlendFunciOES)(buf, src, dst);
        public void glBlendParameteriNV(uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glBlendParameteriNV)(pname, value);
        public void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, uint, uint, void>)vtable.glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, uint, uint, void>)vtable.glBlitFramebufferANGLE)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, uint, uint, void>)vtable.glBlitFramebufferEXT)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, uint, uint, void>)vtable.glBlitFramebufferNV)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void>)vtable.glBlitNamedFramebuffer)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void glBufferAddressRangeNV(uint pname, uint index, ulong address, nint length) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong, nint, void>)vtable.glBufferAddressRangeNV)(pname, index, address, length);
        public void glBufferAttachMemoryNV(uint target, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong, void>)vtable.glBufferAttachMemoryNV)(target, memory, offset);
        public void glBufferData(uint target, nint size, void* data, uint usage) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glBufferData)(target, size, data, usage);
        public void glBufferDataARB(uint target, nint size, void* data, uint usage) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glBufferDataARB)(target, size, data, usage);
        public void glBufferPageCommitmentARB(uint target, nint offset, nint size, byte commit) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, byte, void>)vtable.glBufferPageCommitmentARB)(target, offset, size, commit);
        public void glBufferPageCommitmentMemNV(uint target, nint offset, nint size, uint memory, ulong memOffset, byte commit) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, uint, ulong, byte, void>)vtable.glBufferPageCommitmentMemNV)(target, offset, size, memory, memOffset, commit);
        public void glBufferParameteriAPPLE(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glBufferParameteriAPPLE)(target, pname, param);
        public void glBufferStorage(uint target, nint size, void* data, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glBufferStorage)(target, size, data, flags);
        public void glBufferStorageEXT(uint target, nint size, void* data, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glBufferStorageEXT)(target, size, data, flags);
        public void glBufferStorageExternalEXT(uint target, nint offset, nint size, void* clientBuffer, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, uint, void>)vtable.glBufferStorageExternalEXT)(target, offset, size, clientBuffer, flags);
        public void glBufferStorageMemEXT(uint target, nint size, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, nint, uint, ulong, void>)vtable.glBufferStorageMemEXT)(target, size, memory, offset);
        public void glBufferSubData(uint target, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glBufferSubData)(target, offset, size, data);
        public void glBufferSubDataARB(uint target, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glBufferSubDataARB)(target, offset, size, data);
        public void glCallCommandListNV(uint list) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCallCommandListNV)(list);
        public void glCallList(uint list) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCallList)(list);
        public void glCallLists(int n, uint type, void* lists) => ((delegate* unmanaged[Cdecl]<int, uint, void*, void>)vtable.glCallLists)(n, type, lists);
        public uint glCheckFramebufferStatus(uint target) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glCheckFramebufferStatus)(target);
        public uint glCheckFramebufferStatusEXT(uint target) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glCheckFramebufferStatusEXT)(target);
        public uint glCheckFramebufferStatusOES(uint target) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glCheckFramebufferStatusOES)(target);
        public uint glCheckNamedFramebufferStatus(uint framebuffer, uint target) => ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vtable.glCheckNamedFramebufferStatus)(framebuffer, target);
        public uint glCheckNamedFramebufferStatusEXT(uint framebuffer, uint target) => ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vtable.glCheckNamedFramebufferStatusEXT)(framebuffer, target);
        public void glClampColor(uint target, uint clamp) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glClampColor)(target, clamp);
        public void glClampColorARB(uint target, uint clamp) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glClampColorARB)(target, clamp);
        public void glClear(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glClear)(mask);
        public void glClearAccum(float red, float green, float blue, float alpha) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glClearAccum)(red, green, blue, alpha);
        public void glClearAccumxOES(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glClearAccumxOES)(red, green, blue, alpha);
        public void glClearBufferData(uint target, uint internalformat, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void*, void>)vtable.glClearBufferData)(target, internalformat, format, type, data);
        public void glClearBufferSubData(uint target, uint internalformat, nint offset, nint size, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, uint, uint, void*, void>)vtable.glClearBufferSubData)(target, internalformat, offset, size, format, type, data);
        public void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil) => ((delegate* unmanaged[Cdecl]<uint, int, float, int, void>)vtable.glClearBufferfi)(buffer, drawbuffer, depth, stencil);
        public void glClearBufferfv(uint buffer, int drawbuffer, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glClearBufferfv)(buffer, drawbuffer, value);
        public void glClearBufferiv(uint buffer, int drawbuffer, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glClearBufferiv)(buffer, drawbuffer, value);
        public void glClearBufferuiv(uint buffer, int drawbuffer, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glClearBufferuiv)(buffer, drawbuffer, value);
        public void glClearColor(float red, float green, float blue, float alpha) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glClearColor)(red, green, blue, alpha);
        public void glClearColorIiEXT(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glClearColorIiEXT)(red, green, blue, alpha);
        public void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glClearColorIuiEXT)(red, green, blue, alpha);
        public void glClearColorx(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glClearColorx)(red, green, blue, alpha);
        public void glClearColorxOES(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glClearColorxOES)(red, green, blue, alpha);
        public void glClearDepth(double depth) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glClearDepth)(depth);
        public void glClearDepthdNV(double depth) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glClearDepthdNV)(depth);
        public void glClearDepthf(float d) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glClearDepthf)(d);
        public void glClearDepthfOES(float depth) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glClearDepthfOES)(depth);
        public void glClearDepthx(int depth) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glClearDepthx)(depth);
        public void glClearDepthxOES(int depth) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glClearDepthxOES)(depth);
        public void glClearIndex(float c) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glClearIndex)(c);
        public void glClearNamedBufferData(uint buffer, uint internalformat, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void*, void>)vtable.glClearNamedBufferData)(buffer, internalformat, format, type, data);
        public void glClearNamedBufferDataEXT(uint buffer, uint internalformat, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void*, void>)vtable.glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data);
        public void glClearNamedBufferSubData(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, uint, uint, void*, void>)vtable.glClearNamedBufferSubData)(buffer, internalformat, offset, size, format, type, data);
        public void glClearNamedBufferSubDataEXT(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, uint, uint, void*, void>)vtable.glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data);
        public void glClearNamedFramebufferfi(uint framebuffer, uint buffer, int drawbuffer, float depth, int stencil) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float, int, void>)vtable.glClearNamedFramebufferfi)(framebuffer, buffer, drawbuffer, depth, stencil);
        public void glClearNamedFramebufferfv(uint framebuffer, uint buffer, int drawbuffer, float* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glClearNamedFramebufferfv)(framebuffer, buffer, drawbuffer, value);
        public void glClearNamedFramebufferiv(uint framebuffer, uint buffer, int drawbuffer, int* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, void>)vtable.glClearNamedFramebufferiv)(framebuffer, buffer, drawbuffer, value);
        public void glClearNamedFramebufferuiv(uint framebuffer, uint buffer, int drawbuffer, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, void>)vtable.glClearNamedFramebufferuiv)(framebuffer, buffer, drawbuffer, value);
        public void glClearPixelLocalStorageuiEXT(int offset, int n, uint* values) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glClearPixelLocalStorageuiEXT)(offset, n, values);
        public void glClearStencil(int s) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glClearStencil)(s);
        public void glClearTexImage(uint texture, int level, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void*, void>)vtable.glClearTexImage)(texture, level, format, type, data);
        public void glClearTexImageEXT(uint texture, int level, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void*, void>)vtable.glClearTexImageEXT)(texture, level, format, type, data);
        public void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        public void glClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glClearTexSubImageEXT)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        public void glClientActiveTexture(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glClientActiveTexture)(texture);
        public void glClientActiveTextureARB(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glClientActiveTextureARB)(texture);
        public void glClientActiveVertexStreamATI(uint stream) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glClientActiveVertexStreamATI)(stream);
        public void glClientAttribDefaultEXT(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glClientAttribDefaultEXT)(mask);
        public void glClientWaitSemaphoreui64NVX(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray) => ((delegate* unmanaged[Cdecl]<int, uint*, ulong*, void>)vtable.glClientWaitSemaphoreui64NVX)(fenceObjectCount, semaphoreArray, fenceValueArray);
        public uint glClientWaitSync(nint sync, uint flags, ulong timeout) => ((delegate* unmanaged[Cdecl]<nint, uint, ulong, uint>)vtable.glClientWaitSync)(sync, flags, timeout);
        public uint glClientWaitSyncAPPLE(nint sync, uint flags, ulong timeout) => ((delegate* unmanaged[Cdecl]<nint, uint, ulong, uint>)vtable.glClientWaitSyncAPPLE)(sync, flags, timeout);
        public void glClipControl(uint origin, uint depth) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glClipControl)(origin, depth);
        public void glClipControlEXT(uint origin, uint depth) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glClipControlEXT)(origin, depth);
        public void glClipPlane(uint plane, double* equation) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glClipPlane)(plane, equation);
        public void glClipPlanef(uint p, float* eqn) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glClipPlanef)(p, eqn);
        public void glClipPlanefIMG(uint p, float* eqn) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glClipPlanefIMG)(p, eqn);
        public void glClipPlanefOES(uint plane, float* equation) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glClipPlanefOES)(plane, equation);
        public void glClipPlanex(uint plane, int* equation) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glClipPlanex)(plane, equation);
        public void glClipPlanexIMG(uint p, int* eqn) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glClipPlanexIMG)(p, eqn);
        public void glClipPlanexOES(uint plane, int* equation) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glClipPlanexOES)(plane, equation);
        public void glColor3b(sbyte red, sbyte green, sbyte blue) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glColor3b)(red, green, blue);
        public void glColor3bv(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glColor3bv)(v);
        public void glColor3d(double red, double green, double blue) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glColor3d)(red, green, blue);
        public void glColor3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glColor3dv)(v);
        public void glColor3f(float red, float green, float blue) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glColor3f)(red, green, blue);
        public void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)vtable.glColor3fVertex3fSUN)(r, g, b, x, y, z);
        public void glColor3fVertex3fvSUN(float* c, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, void>)vtable.glColor3fVertex3fvSUN)(c, v);
        public void glColor3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glColor3fv)(v);
        public void glColor3hNV(Half red, Half green, Half blue) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)vtable.glColor3hNV)(red, green, blue);
        public void glColor3hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glColor3hvNV)(v);
        public void glColor3i(int red, int green, int blue) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glColor3i)(red, green, blue);
        public void glColor3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glColor3iv)(v);
        public void glColor3s(short red, short green, short blue) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glColor3s)(red, green, blue);
        public void glColor3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glColor3sv)(v);
        public void glColor3ub(byte red, byte green, byte blue) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, void>)vtable.glColor3ub)(red, green, blue);
        public void glColor3ubv(byte* v) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glColor3ubv)(v);
        public void glColor3ui(uint red, uint green, uint blue) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glColor3ui)(red, green, blue);
        public void glColor3uiv(uint* v) => ((delegate* unmanaged[Cdecl]<uint*, void>)vtable.glColor3uiv)(v);
        public void glColor3us(ushort red, ushort green, ushort blue) => ((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, void>)vtable.glColor3us)(red, green, blue);
        public void glColor3usv(ushort* v) => ((delegate* unmanaged[Cdecl]<ushort*, void>)vtable.glColor3usv)(v);
        public void glColor3xOES(int red, int green, int blue) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glColor3xOES)(red, green, blue);
        public void glColor3xvOES(int* components) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glColor3xvOES)(components);
        public void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)vtable.glColor4b)(red, green, blue, alpha);
        public void glColor4bv(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glColor4bv)(v);
        public void glColor4d(double red, double green, double blue, double alpha) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glColor4d)(red, green, blue, alpha);
        public void glColor4dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glColor4dv)(v);
        public void glColor4f(float red, float green, float blue, float alpha) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glColor4f)(red, green, blue, alpha);
        public void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, float, float, void>)vtable.glColor4fNormal3fVertex3fSUN)(r, g, b, a, nx, ny, nz, x, y, z);
        public void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, float*, void>)vtable.glColor4fNormal3fVertex3fvSUN)(c, n, v);
        public void glColor4fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glColor4fv)(v);
        public void glColor4hNV(Half red, Half green, Half blue, Half alpha) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, Half, void>)vtable.glColor4hNV)(red, green, blue, alpha);
        public void glColor4hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glColor4hvNV)(v);
        public void glColor4i(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glColor4i)(red, green, blue, alpha);
        public void glColor4iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glColor4iv)(v);
        public void glColor4s(short red, short green, short blue, short alpha) => ((delegate* unmanaged[Cdecl]<short, short, short, short, void>)vtable.glColor4s)(red, green, blue, alpha);
        public void glColor4sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glColor4sv)(v);
        public void glColor4ub(byte red, byte green, byte blue, byte alpha) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vtable.glColor4ub)(red, green, blue, alpha);
        public void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, float, float, void>)vtable.glColor4ubVertex2fSUN)(r, g, b, a, x, y);
        public void glColor4ubVertex2fvSUN(byte* c, float* v) => ((delegate* unmanaged[Cdecl]<byte*, float*, void>)vtable.glColor4ubVertex2fvSUN)(c, v);
        public void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, float, float, float, void>)vtable.glColor4ubVertex3fSUN)(r, g, b, a, x, y, z);
        public void glColor4ubVertex3fvSUN(byte* c, float* v) => ((delegate* unmanaged[Cdecl]<byte*, float*, void>)vtable.glColor4ubVertex3fvSUN)(c, v);
        public void glColor4ubv(byte* v) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glColor4ubv)(v);
        public void glColor4ui(uint red, uint green, uint blue, uint alpha) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glColor4ui)(red, green, blue, alpha);
        public void glColor4uiv(uint* v) => ((delegate* unmanaged[Cdecl]<uint*, void>)vtable.glColor4uiv)(v);
        public void glColor4us(ushort red, ushort green, ushort blue, ushort alpha) => ((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, void>)vtable.glColor4us)(red, green, blue, alpha);
        public void glColor4usv(ushort* v) => ((delegate* unmanaged[Cdecl]<ushort*, void>)vtable.glColor4usv)(v);
        public void glColor4x(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glColor4x)(red, green, blue, alpha);
        public void glColor4xOES(int red, int green, int blue, int alpha) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glColor4xOES)(red, green, blue, alpha);
        public void glColor4xvOES(int* components) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glColor4xvOES)(components);
        public void glColorFormatNV(int size, uint type, int stride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void>)vtable.glColorFormatNV)(size, type, stride);
        public void glColorFragmentOp1ATI(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, void>)vtable.glColorFragmentOp1ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        public void glColorFragmentOp2ATI(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glColorFragmentOp2ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        public void glColorFragmentOp3ATI(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glColorFragmentOp3ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        public void glColorMask(byte red, byte green, byte blue, byte alpha) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vtable.glColorMask)(red, green, blue, alpha);
        public void glColorMaskIndexedEXT(uint index, byte r, byte g, byte b, byte a) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glColorMaskIndexedEXT)(index, r, g, b, a);
        public void glColorMaski(uint index, byte r, byte g, byte b, byte a) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glColorMaski)(index, r, g, b, a);
        public void glColorMaskiEXT(uint index, byte r, byte g, byte b, byte a) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glColorMaskiEXT)(index, r, g, b, a);
        public void glColorMaskiOES(uint index, byte r, byte g, byte b, byte a) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glColorMaskiOES)(index, r, g, b, a);
        public void glColorMaterial(uint face, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glColorMaterial)(face, mode);
        public void glColorP3ui(uint type, uint color) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glColorP3ui)(type, color);
        public void glColorP3uiv(uint type, uint* color) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glColorP3uiv)(type, color);
        public void glColorP4ui(uint type, uint color) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glColorP4ui)(type, color);
        public void glColorP4uiv(uint type, uint* color) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glColorP4uiv)(type, color);
        public void glColorPointer(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glColorPointer)(size, type, stride, pointer);
        public void glColorPointerEXT(int size, uint type, int stride, int count, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, int, void*, void>)vtable.glColorPointerEXT)(size, type, stride, count, pointer);
        public void glColorPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void**, int, void>)vtable.glColorPointerListIBM)(size, type, stride, pointer, ptrstride);
        public void glColorPointervINTEL(int size, uint type, void** pointer) => ((delegate* unmanaged[Cdecl]<int, uint, void**, void>)vtable.glColorPointervINTEL)(size, type, pointer);
        public void glColorSubTable(uint target, int start, int count, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, uint, void*, void>)vtable.glColorSubTable)(target, start, count, format, type, data);
        public void glColorSubTableEXT(uint target, int start, int count, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, uint, void*, void>)vtable.glColorSubTableEXT)(target, start, count, format, type, data);
        public void glColorTable(uint target, uint internalformat, int width, uint format, uint type, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glColorTable)(target, internalformat, width, format, type, table);
        public void glColorTableEXT(uint target, uint internalFormat, int width, uint format, uint type, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glColorTableEXT)(target, internalFormat, width, format, type, table);
        public void glColorTableParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glColorTableParameterfv)(target, pname, parameters);
        public void glColorTableParameterfvSGI(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glColorTableParameterfvSGI)(target, pname, parameters);
        public void glColorTableParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glColorTableParameteriv)(target, pname, parameters);
        public void glColorTableParameterivSGI(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glColorTableParameterivSGI)(target, pname, parameters);
        public void glColorTableSGI(uint target, uint internalformat, int width, uint format, uint type, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glColorTableSGI)(target, internalformat, width, format, type, table);
        public void glCombinerInputNV(uint stage, uint portion, uint variable, uint input, uint mapping, uint componentUsage) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glCombinerInputNV)(stage, portion, variable, input, mapping, componentUsage);
        public void glCombinerOutputNV(uint stage, uint portion, uint abOutput, uint cdOutput, uint sumOutput, uint scale, uint bias, byte abDotProduct, byte cdDotProduct, byte muxSum) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, byte, byte, byte, void>)vtable.glCombinerOutputNV)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        public void glCombinerParameterfNV(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glCombinerParameterfNV)(pname, param);
        public void glCombinerParameterfvNV(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glCombinerParameterfvNV)(pname, parameters);
        public void glCombinerParameteriNV(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glCombinerParameteriNV)(pname, param);
        public void glCombinerParameterivNV(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glCombinerParameterivNV)(pname, parameters);
        public void glCombinerStageParameterfvNV(uint stage, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glCombinerStageParameterfvNV)(stage, pname, parameters);
        public void glCommandListSegmentsNV(uint list, uint segments) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glCommandListSegmentsNV)(list, segments);
        public void glCompileCommandListNV(uint list) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCompileCommandListNV)(list);
        public void glCompileShader(uint shader) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCompileShader)(shader);
        public void glCompileShaderARB(nint shaderObj) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glCompileShaderARB)(shaderObj);
        public void glCompileShaderIncludeARB(uint shader, int count, byte** path, int* length) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, int*, void>)vtable.glCompileShaderIncludeARB)(shader, count, path, length);
        public void glCompressedMultiTexImage1DEXT(uint texunit, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, void*, void>)vtable.glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, bits);
        public void glCompressedMultiTexImage2DEXT(uint texunit, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, void*, void>)vtable.glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        public void glCompressedMultiTexImage3DEXT(uint texunit, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, int, void*, void>)vtable.glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        public void glCompressedMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, uint, int, void*, void>)vtable.glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, bits);
        public void glCompressedMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        public void glCompressedMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        public void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, void*, void>)vtable.glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);
        public void glCompressedTexImage1DARB(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, void*, void>)vtable.glCompressedTexImage1DARB)(target, level, internalformat, width, border, imageSize, data);
        public void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void*, void>)vtable.glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);
        public void glCompressedTexImage2DARB(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void*, void>)vtable.glCompressedTexImage2DARB)(target, level, internalformat, width, height, border, imageSize, data);
        public void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void*, void>)vtable.glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);
        public void glCompressedTexImage3DARB(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void*, void>)vtable.glCompressedTexImage3DARB)(target, level, internalformat, width, height, depth, border, imageSize, data);
        public void glCompressedTexImage3DOES(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void*, void>)vtable.glCompressedTexImage3DOES)(target, level, internalformat, width, height, depth, border, imageSize, data);
        public void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);
        public void glCompressedTexSubImage1DARB(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage1DARB)(target, level, xoffset, width, format, imageSize, data);
        public void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        public void glCompressedTexSubImage2DARB(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage2DARB)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        public void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public void glCompressedTexSubImage3DARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage3DARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public void glCompressedTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public void glCompressedTextureImage1DEXT(uint texture, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, void*, void>)vtable.glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);
        public void glCompressedTextureImage2DEXT(uint texture, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, void*, void>)vtable.glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);
        public void glCompressedTextureImage3DEXT(uint texture, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, int, void*, void>)vtable.glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        public void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, int, void*, void>)vtable.glCompressedTextureSubImage1D)(texture, level, xoffset, width, format, imageSize, data);
        public void glCompressedTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, uint, int, void*, void>)vtable.glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);
        public void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        public void glCompressedTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        public void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public void glCompressedTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, uint, int, void*, void>)vtable.glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        public void glConservativeRasterParameterfNV(uint pname, float value) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glConservativeRasterParameterfNV)(pname, value);
        public void glConservativeRasterParameteriNV(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glConservativeRasterParameteriNV)(pname, param);
        public void glConvolutionFilter1D(uint target, uint internalformat, int width, uint format, uint type, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glConvolutionFilter1D)(target, internalformat, width, format, type, image);
        public void glConvolutionFilter1DEXT(uint target, uint internalformat, int width, uint format, uint type, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glConvolutionFilter1DEXT)(target, internalformat, width, format, type, image);
        public void glConvolutionFilter2D(uint target, uint internalformat, int width, int height, uint format, uint type, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, void*, void>)vtable.glConvolutionFilter2D)(target, internalformat, width, height, format, type, image);
        public void glConvolutionFilter2DEXT(uint target, uint internalformat, int width, int height, uint format, uint type, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, void*, void>)vtable.glConvolutionFilter2DEXT)(target, internalformat, width, height, format, type, image);
        public void glConvolutionParameterf(uint target, uint pname, float parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glConvolutionParameterf)(target, pname, parameters);
        public void glConvolutionParameterfEXT(uint target, uint pname, float parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glConvolutionParameterfEXT)(target, pname, parameters);
        public void glConvolutionParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glConvolutionParameterfv)(target, pname, parameters);
        public void glConvolutionParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glConvolutionParameterfvEXT)(target, pname, parameters);
        public void glConvolutionParameteri(uint target, uint pname, int parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glConvolutionParameteri)(target, pname, parameters);
        public void glConvolutionParameteriEXT(uint target, uint pname, int parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glConvolutionParameteriEXT)(target, pname, parameters);
        public void glConvolutionParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glConvolutionParameteriv)(target, pname, parameters);
        public void glConvolutionParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glConvolutionParameterivEXT)(target, pname, parameters);
        public void glConvolutionParameterxOES(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glConvolutionParameterxOES)(target, pname, param);
        public void glConvolutionParameterxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glConvolutionParameterxvOES)(target, pname, parameters);
        public void glCopyBufferSubData(uint readTarget, uint writeTarget, nint readOffset, nint writeOffset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, void>)vtable.glCopyBufferSubData)(readTarget, writeTarget, readOffset, writeOffset, size);
        public void glCopyBufferSubDataNV(uint readTarget, uint writeTarget, nint readOffset, nint writeOffset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, void>)vtable.glCopyBufferSubDataNV)(readTarget, writeTarget, readOffset, writeOffset, size);
        public void glCopyColorSubTable(uint target, int start, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glCopyColorSubTable)(target, start, x, y, width);
        public void glCopyColorSubTableEXT(uint target, int start, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glCopyColorSubTableEXT)(target, start, x, y, width);
        public void glCopyColorTable(uint target, uint internalformat, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vtable.glCopyColorTable)(target, internalformat, x, y, width);
        public void glCopyColorTableSGI(uint target, uint internalformat, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vtable.glCopyColorTableSGI)(target, internalformat, x, y, width);
        public void glCopyConvolutionFilter1D(uint target, uint internalformat, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vtable.glCopyConvolutionFilter1D)(target, internalformat, x, y, width);
        public void glCopyConvolutionFilter1DEXT(uint target, uint internalformat, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)vtable.glCopyConvolutionFilter1DEXT)(target, internalformat, x, y, width);
        public void glCopyConvolutionFilter2D(uint target, uint internalformat, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, void>)vtable.glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);
        public void glCopyConvolutionFilter2DEXT(uint target, uint internalformat, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, void>)vtable.glCopyConvolutionFilter2DEXT)(target, internalformat, x, y, width, height);
        public void glCopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)vtable.glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public void glCopyImageSubDataEXT(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)vtable.glCopyImageSubDataEXT)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public void glCopyImageSubDataNV(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)vtable.glCopyImageSubDataNV)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        public void glCopyImageSubDataOES(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)vtable.glCopyImageSubDataOES)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public void glCopyMultiTexImage1DEXT(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int border) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, void>)vtable.glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);
        public void glCopyMultiTexImage2DEXT(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int height, int border) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, int, void>)vtable.glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);
        public void glCopyMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, void>)vtable.glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);
        public void glCopyMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, void>)vtable.glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);
        public void glCopyMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, int, void>)vtable.glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, void>)vtable.glCopyNamedBufferSubData)(readBuffer, writeBuffer, readOffset, writeOffset, size);
        public void glCopyPathNV(uint resultPath, uint srcPath) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glCopyPathNV)(resultPath, srcPath);
        public void glCopyPixels(int x, int y, int width, int height, uint type) => ((delegate* unmanaged[Cdecl]<int, int, int, int, uint, void>)vtable.glCopyPixels)(x, y, width, height, type);
        public void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void>)vtable.glCopyTexImage1D)(target, level, internalformat, x, y, width, border);
        public void glCopyTexImage1DEXT(uint target, int level, uint internalformat, int x, int y, int width, int border) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void>)vtable.glCopyTexImage1DEXT)(target, level, internalformat, x, y, width, border);
        public void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void>)vtable.glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border);
        public void glCopyTexImage2DEXT(uint target, int level, uint internalformat, int x, int y, int width, int height, int border) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void>)vtable.glCopyTexImage2DEXT)(target, level, internalformat, x, y, width, height, border);
        public void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)vtable.glCopyTexSubImage1D)(target, level, xoffset, x, y, width);
        public void glCopyTexSubImage1DEXT(uint target, int level, int xoffset, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)vtable.glCopyTexSubImage1DEXT)(target, level, xoffset, x, y, width);
        public void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)vtable.glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height);
        public void glCopyTexSubImage2DEXT(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)vtable.glCopyTexSubImage2DEXT)(target, level, xoffset, yoffset, x, y, width, height);
        public void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void>)vtable.glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public void glCopyTexSubImage3DEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void>)vtable.glCopyTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public void glCopyTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void>)vtable.glCopyTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public void glCopyTextureImage1DEXT(uint texture, uint target, int level, uint internalformat, int x, int y, int width, int border) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, void>)vtable.glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);
        public void glCopyTextureImage2DEXT(uint texture, uint target, int level, uint internalformat, int x, int y, int width, int height, int border) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, int, int, void>)vtable.glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);
        public void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, void>)vtable.glCopyTextureLevelsAPPLE)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        public void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)vtable.glCopyTextureSubImage1D)(texture, level, xoffset, x, y, width);
        public void glCopyTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int x, int y, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, void>)vtable.glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);
        public void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)vtable.glCopyTextureSubImage2D)(texture, level, xoffset, yoffset, x, y, width, height);
        public void glCopyTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, void>)vtable.glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);
        public void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void>)vtable.glCopyTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        public void glCopyTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, int, void>)vtable.glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public void glCoverFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, uint, void*, uint, uint, uint, float*, void>)vtable.glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        public void glCoverFillPathNV(uint path, uint coverMode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glCoverFillPathNV)(path, coverMode);
        public void glCoverStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, uint, void*, uint, uint, uint, float*, void>)vtable.glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        public void glCoverStrokePathNV(uint path, uint coverMode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glCoverStrokePathNV)(path, coverMode);
        public void glCoverageMaskNV(byte mask) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glCoverageMaskNV)(mask);
        public void glCoverageModulationNV(uint components) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCoverageModulationNV)(components);
        public void glCoverageModulationTableNV(int n, float* v) => ((delegate* unmanaged[Cdecl]<int, float*, void>)vtable.glCoverageModulationTableNV)(n, v);
        public void glCoverageOperationNV(uint operation) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCoverageOperationNV)(operation);
        public void glCreateBuffers(int n, uint* buffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateBuffers)(n, buffers);
        public void glCreateCommandListsNV(int n, uint* lists) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateCommandListsNV)(n, lists);
        public void glCreateFramebuffers(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateFramebuffers)(n, framebuffers);
        public void glCreateMemoryObjectsEXT(int n, uint* memoryObjects) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateMemoryObjectsEXT)(n, memoryObjects);
        public void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glCreatePerfQueryINTEL)(queryId, queryHandle);
        public uint glCreateProgram() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glCreateProgram)();
        public nint glCreateProgramObjectARB() => ((delegate* unmanaged[Cdecl]<nint>)vtable.glCreateProgramObjectARB)();
        public void glCreateProgramPipelines(int n, uint* pipelines) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateProgramPipelines)(n, pipelines);
        public uint glCreateProgressFenceNVX() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glCreateProgressFenceNVX)();
        public void glCreateQueries(uint target, int n, uint* ids) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glCreateQueries)(target, n, ids);
        public void glCreateRenderbuffers(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateRenderbuffers)(n, renderbuffers);
        public void glCreateSamplers(int n, uint* samplers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateSamplers)(n, samplers);
        public void glCreateSemaphoresNV(int n, uint* semaphores) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateSemaphoresNV)(n, semaphores);
        public uint glCreateShader(uint type) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glCreateShader)(type);
        public nint glCreateShaderObjectARB(uint shaderType) => ((delegate* unmanaged[Cdecl]<uint, nint>)vtable.glCreateShaderObjectARB)(shaderType);
        public uint glCreateShaderProgramEXT(uint type, byte* str) => ((delegate* unmanaged[Cdecl]<uint, byte*, uint>)vtable.glCreateShaderProgramEXT)(type, str);
        public uint glCreateShaderProgramv(uint type, int count, byte** strings) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, uint>)vtable.glCreateShaderProgramv)(type, count, strings);
        public uint glCreateShaderProgramvEXT(uint type, int count, byte** strings) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, uint>)vtable.glCreateShaderProgramvEXT)(type, count, strings);
        public void glCreateStatesNV(int n, uint* states) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateStatesNV)(n, states);
        public nint glCreateSyncFromCLeventARB(nint* context, nint* @event, uint flags) => ((delegate* unmanaged[Cdecl]<nint*, nint*, uint, nint>)vtable.glCreateSyncFromCLeventARB)(context, @event, flags);
        public void glCreateTextures(uint target, int n, uint* textures) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glCreateTextures)(target, n, textures);
        public void glCreateTransformFeedbacks(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateTransformFeedbacks)(n, ids);
        public void glCreateVertexArrays(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateVertexArrays)(n, arrays);
        public void glCullFace(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCullFace)(mode);
        public void glCullParameterdvEXT(uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glCullParameterdvEXT)(pname, parameters);
        public void glCullParameterfvEXT(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glCullParameterfvEXT)(pname, parameters);
        public void glCurrentPaletteMatrixARB(int index) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glCurrentPaletteMatrixARB)(index);
        public void glCurrentPaletteMatrixOES(uint matrixpaletteindex) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glCurrentPaletteMatrixOES)(matrixpaletteindex);
        public void glDebugMessageCallback(nint callback, void* userParam) => ((delegate* unmanaged[Cdecl]<nint, void*, void>)vtable.glDebugMessageCallback)(callback, userParam);
        public void glDebugMessageCallbackAMD(nint callback, void* userParam) => ((delegate* unmanaged[Cdecl]<nint, void*, void>)vtable.glDebugMessageCallbackAMD)(callback, userParam);
        public void glDebugMessageCallbackARB(nint callback, void* userParam) => ((delegate* unmanaged[Cdecl]<nint, void*, void>)vtable.glDebugMessageCallbackARB)(callback, userParam);
        public void glDebugMessageCallbackKHR(nint callback, void* userParam) => ((delegate* unmanaged[Cdecl]<nint, void*, void>)vtable.glDebugMessageCallbackKHR)(callback, userParam);
        public void glDebugMessageControl(uint source, uint type, uint severity, int count, uint* ids, byte enabled) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, byte, void>)vtable.glDebugMessageControl)(source, type, severity, count, ids, enabled);
        public void glDebugMessageControlARB(uint source, uint type, uint severity, int count, uint* ids, byte enabled) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, byte, void>)vtable.glDebugMessageControlARB)(source, type, severity, count, ids, enabled);
        public void glDebugMessageControlKHR(uint source, uint type, uint severity, int count, uint* ids, byte enabled) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, byte, void>)vtable.glDebugMessageControlKHR)(source, type, severity, count, ids, enabled);
        public void glDebugMessageEnableAMD(uint category, uint severity, int count, uint* ids, byte enabled) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, byte, void>)vtable.glDebugMessageEnableAMD)(category, severity, count, ids, enabled);
        public void glDebugMessageInsert(uint source, uint type, uint id, uint severity, int length, byte* buf) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, byte*, void>)vtable.glDebugMessageInsert)(source, type, id, severity, length, buf);
        public void glDebugMessageInsertAMD(uint category, uint severity, uint id, int length, byte* buf) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, byte*, void>)vtable.glDebugMessageInsertAMD)(category, severity, id, length, buf);
        public void glDebugMessageInsertARB(uint source, uint type, uint id, uint severity, int length, byte* buf) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, byte*, void>)vtable.glDebugMessageInsertARB)(source, type, id, severity, length, buf);
        public void glDebugMessageInsertKHR(uint source, uint type, uint id, uint severity, int length, byte* buf) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, byte*, void>)vtable.glDebugMessageInsertKHR)(source, type, id, severity, length, buf);
        public void glDeformSGIX(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDeformSGIX)(mask);
        public void glDeformationMap3dSGIX(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points) => ((delegate* unmanaged[Cdecl]<uint, double, double, int, int, double, double, int, int, double, double, int, int, double*, void>)vtable.glDeformationMap3dSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        public void glDeformationMap3fSGIX(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points) => ((delegate* unmanaged[Cdecl]<uint, float, float, int, int, float, float, int, int, float, float, int, int, float*, void>)vtable.glDeformationMap3fSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        public void glDeleteAsyncMarkersSGIX(uint marker, int range) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glDeleteAsyncMarkersSGIX)(marker, range);
        public void glDeleteBuffers(int n, uint* buffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteBuffers)(n, buffers);
        public void glDeleteBuffersARB(int n, uint* buffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteBuffersARB)(n, buffers);
        public void glDeleteCommandListsNV(int n, uint* lists) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteCommandListsNV)(n, lists);
        public void glDeleteFencesAPPLE(int n, uint* fences) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteFencesAPPLE)(n, fences);
        public void glDeleteFencesNV(int n, uint* fences) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteFencesNV)(n, fences);
        public void glDeleteFragmentShaderATI(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDeleteFragmentShaderATI)(id);
        public void glDeleteFramebuffers(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteFramebuffers)(n, framebuffers);
        public void glDeleteFramebuffersEXT(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteFramebuffersEXT)(n, framebuffers);
        public void glDeleteFramebuffersOES(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteFramebuffersOES)(n, framebuffers);
        public void glDeleteLists(uint list, int range) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glDeleteLists)(list, range);
        public void glDeleteMemoryObjectsEXT(int n, uint* memoryObjects) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteMemoryObjectsEXT)(n, memoryObjects);
        public void glDeleteNamedStringARB(int namelen, byte* name) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glDeleteNamedStringARB)(namelen, name);
        public void glDeleteNamesAMD(uint identifier, uint num, uint* names) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glDeleteNamesAMD)(identifier, num, names);
        public void glDeleteObjectARB(nint obj) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glDeleteObjectARB)(obj);
        public void glDeleteOcclusionQueriesNV(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteOcclusionQueriesNV)(n, ids);
        public void glDeletePathsNV(uint path, int range) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glDeletePathsNV)(path, range);
        public void glDeletePerfMonitorsAMD(int n, uint* monitors) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeletePerfMonitorsAMD)(n, monitors);
        public void glDeletePerfQueryINTEL(uint queryHandle) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDeletePerfQueryINTEL)(queryHandle);
        public void glDeleteProgram(uint program) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDeleteProgram)(program);
        public void glDeleteProgramPipelines(int n, uint* pipelines) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteProgramPipelines)(n, pipelines);
        public void glDeleteProgramPipelinesEXT(int n, uint* pipelines) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteProgramPipelinesEXT)(n, pipelines);
        public void glDeleteProgramsARB(int n, uint* programs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteProgramsARB)(n, programs);
        public void glDeleteProgramsNV(int n, uint* programs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteProgramsNV)(n, programs);
        public void glDeleteQueries(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteQueries)(n, ids);
        public void glDeleteQueriesARB(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteQueriesARB)(n, ids);
        public void glDeleteQueriesEXT(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteQueriesEXT)(n, ids);
        public void glDeleteQueryResourceTagNV(int n, int* tagIds) => ((delegate* unmanaged[Cdecl]<int, int*, void>)vtable.glDeleteQueryResourceTagNV)(n, tagIds);
        public void glDeleteRenderbuffers(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteRenderbuffers)(n, renderbuffers);
        public void glDeleteRenderbuffersEXT(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteRenderbuffersEXT)(n, renderbuffers);
        public void glDeleteRenderbuffersOES(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteRenderbuffersOES)(n, renderbuffers);
        public void glDeleteSamplers(int count, uint* samplers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteSamplers)(count, samplers);
        public void glDeleteSemaphoresEXT(int n, uint* semaphores) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteSemaphoresEXT)(n, semaphores);
        public void glDeleteShader(uint shader) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDeleteShader)(shader);
        public void glDeleteStatesNV(int n, uint* states) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteStatesNV)(n, states);
        public void glDeleteSync(nint sync) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glDeleteSync)(sync);
        public void glDeleteSyncAPPLE(nint sync) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glDeleteSyncAPPLE)(sync);
        public void glDeleteTextures(int n, uint* textures) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteTextures)(n, textures);
        public void glDeleteTexturesEXT(int n, uint* textures) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteTexturesEXT)(n, textures);
        public void glDeleteTransformFeedbacks(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteTransformFeedbacks)(n, ids);
        public void glDeleteTransformFeedbacksNV(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteTransformFeedbacksNV)(n, ids);
        public void glDeleteVertexArrays(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteVertexArrays)(n, arrays);
        public void glDeleteVertexArraysAPPLE(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteVertexArraysAPPLE)(n, arrays);
        public void glDeleteVertexArraysOES(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteVertexArraysOES)(n, arrays);
        public void glDeleteVertexShaderEXT(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDeleteVertexShaderEXT)(id);
        public void glDepthBoundsEXT(double zmin, double zmax) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glDepthBoundsEXT)(zmin, zmax);
        public void glDepthBoundsdNV(double zmin, double zmax) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glDepthBoundsdNV)(zmin, zmax);
        public void glDepthFunc(uint func) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDepthFunc)(func);
        public void glDepthMask(byte flag) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glDepthMask)(flag);
        public void glDepthRange(double n, double f) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glDepthRange)(n, f);
        public void glDepthRangeArraydvNV(uint first, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glDepthRangeArraydvNV)(first, count, v);
        public void glDepthRangeArrayfvNV(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glDepthRangeArrayfvNV)(first, count, v);
        public void glDepthRangeArrayfvOES(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glDepthRangeArrayfvOES)(first, count, v);
        public void glDepthRangeArrayv(uint first, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glDepthRangeArrayv)(first, count, v);
        public void glDepthRangeIndexed(uint index, double n, double f) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glDepthRangeIndexed)(index, n, f);
        public void glDepthRangeIndexeddNV(uint index, double n, double f) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glDepthRangeIndexeddNV)(index, n, f);
        public void glDepthRangeIndexedfNV(uint index, float n, float f) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glDepthRangeIndexedfNV)(index, n, f);
        public void glDepthRangeIndexedfOES(uint index, float n, float f) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glDepthRangeIndexedfOES)(index, n, f);
        public void glDepthRangedNV(double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glDepthRangedNV)(zNear, zFar);
        public void glDepthRangef(float n, float f) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glDepthRangef)(n, f);
        public void glDepthRangefOES(float n, float f) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glDepthRangefOES)(n, f);
        public void glDepthRangex(int n, int f) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glDepthRangex)(n, f);
        public void glDepthRangexOES(int n, int f) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glDepthRangexOES)(n, f);
        public void glDetachObjectARB(nint containerObj, nint attachedObj) => ((delegate* unmanaged[Cdecl]<nint, nint, void>)vtable.glDetachObjectARB)(containerObj, attachedObj);
        public void glDetachShader(uint program, uint shader) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDetachShader)(program, shader);
        public void glDetailTexFuncSGIS(uint target, int n, float* points) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glDetailTexFuncSGIS)(target, n, points);
        public void glDisable(uint cap) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDisable)(cap);
        public void glDisableClientState(uint array) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDisableClientState)(array);
        public void glDisableClientStateIndexedEXT(uint array, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableClientStateIndexedEXT)(array, index);
        public void glDisableClientStateiEXT(uint array, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableClientStateiEXT)(array, index);
        public void glDisableDriverControlQCOM(uint driverControl) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDisableDriverControlQCOM)(driverControl);
        public void glDisableIndexedEXT(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableIndexedEXT)(target, index);
        public void glDisableVariantClientStateEXT(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDisableVariantClientStateEXT)(id);
        public void glDisableVertexArrayAttrib(uint vaobj, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableVertexArrayAttrib)(vaobj, index);
        public void glDisableVertexArrayAttribEXT(uint vaobj, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableVertexArrayAttribEXT)(vaobj, index);
        public void glDisableVertexArrayEXT(uint vaobj, uint array) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableVertexArrayEXT)(vaobj, array);
        public void glDisableVertexAttribAPPLE(uint index, uint pname) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableVertexAttribAPPLE)(index, pname);
        public void glDisableVertexAttribArray(uint index) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDisableVertexAttribArray)(index);
        public void glDisableVertexAttribArrayARB(uint index) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDisableVertexAttribArrayARB)(index);
        public void glDisablei(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisablei)(target, index);
        public void glDisableiEXT(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableiEXT)(target, index);
        public void glDisableiNV(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableiNV)(target, index);
        public void glDisableiOES(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDisableiOES)(target, index);
        public void glDiscardFramebufferEXT(uint target, int numAttachments, uint* attachments) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glDiscardFramebufferEXT)(target, numAttachments, attachments);
        public void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);
        public void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glDispatchComputeGroupSizeARB)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        public void glDispatchComputeIndirect(nint indirect) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glDispatchComputeIndirect)(indirect);
        public void glDrawArrays(uint mode, int first, int count) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glDrawArrays)(mode, first, count);
        public void glDrawArraysEXT(uint mode, int first, int count) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glDrawArraysEXT)(mode, first, count);
        public void glDrawArraysIndirect(uint mode, void* indirect) => ((delegate* unmanaged[Cdecl]<uint, void*, void>)vtable.glDrawArraysIndirect)(mode, indirect);
        public void glDrawArraysInstanced(uint mode, int first, int count, int instancecount) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glDrawArraysInstanced)(mode, first, count, instancecount);
        public void glDrawArraysInstancedANGLE(uint mode, int first, int count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glDrawArraysInstancedANGLE)(mode, first, count, primcount);
        public void glDrawArraysInstancedARB(uint mode, int first, int count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glDrawArraysInstancedARB)(mode, first, count, primcount);
        public void glDrawArraysInstancedBaseInstance(uint mode, int first, int count, int instancecount, uint baseinstance) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, void>)vtable.glDrawArraysInstancedBaseInstance)(mode, first, count, instancecount, baseinstance);
        public void glDrawArraysInstancedBaseInstanceEXT(uint mode, int first, int count, int instancecount, uint baseinstance) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, void>)vtable.glDrawArraysInstancedBaseInstanceEXT)(mode, first, count, instancecount, baseinstance);
        public void glDrawArraysInstancedEXT(uint mode, int start, int count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glDrawArraysInstancedEXT)(mode, start, count, primcount);
        public void glDrawArraysInstancedNV(uint mode, int first, int count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glDrawArraysInstancedNV)(mode, first, count, primcount);
        public void glDrawBuffer(uint buf) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glDrawBuffer)(buf);
        public void glDrawBuffers(int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDrawBuffers)(n, bufs);
        public void glDrawBuffersARB(int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDrawBuffersARB)(n, bufs);
        public void glDrawBuffersATI(int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDrawBuffersATI)(n, bufs);
        public void glDrawBuffersEXT(int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDrawBuffersEXT)(n, bufs);
        public void glDrawBuffersIndexedEXT(int n, uint* location, int* indices) => ((delegate* unmanaged[Cdecl]<int, uint*, int*, void>)vtable.glDrawBuffersIndexedEXT)(n, location, indices);
        public void glDrawBuffersNV(int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDrawBuffersNV)(n, bufs);
        public void glDrawCommandsAddressNV(uint primitiveMode, ulong* indirects, int* sizes, uint count) => ((delegate* unmanaged[Cdecl]<uint, ulong*, int*, uint, void>)vtable.glDrawCommandsAddressNV)(primitiveMode, indirects, sizes, count);
        public void glDrawCommandsNV(uint primitiveMode, uint buffer, nint* indirects, int* sizes, uint count) => ((delegate* unmanaged[Cdecl]<uint, uint, nint*, int*, uint, void>)vtable.glDrawCommandsNV)(primitiveMode, buffer, indirects, sizes, count);
        public void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count) => ((delegate* unmanaged[Cdecl]<ulong*, int*, uint*, uint*, uint, void>)vtable.glDrawCommandsStatesAddressNV)(indirects, sizes, states, fbos, count);
        public void glDrawCommandsStatesNV(uint buffer, nint* indirects, int* sizes, uint* states, uint* fbos, uint count) => ((delegate* unmanaged[Cdecl]<uint, nint*, int*, uint*, uint*, uint, void>)vtable.glDrawCommandsStatesNV)(buffer, indirects, sizes, states, fbos, count);
        public void glDrawElementArrayAPPLE(uint mode, int first, int count) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glDrawElementArrayAPPLE)(mode, first, count);
        public void glDrawElementArrayATI(uint mode, int count) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glDrawElementArrayATI)(mode, count);
        public void glDrawElements(uint mode, int count, uint type, void* indices) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, void>)vtable.glDrawElements)(mode, count, type, indices);
        public void glDrawElementsBaseVertex(uint mode, int count, uint type, void* indices, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);
        public void glDrawElementsBaseVertexEXT(uint mode, int count, uint type, void* indices, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsBaseVertexEXT)(mode, count, type, indices, basevertex);
        public void glDrawElementsBaseVertexOES(uint mode, int count, uint type, void* indices, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsBaseVertexOES)(mode, count, type, indices, basevertex);
        public void glDrawElementsIndirect(uint mode, uint type, void* indirect) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, void>)vtable.glDrawElementsIndirect)(mode, type, indirect);
        public void glDrawElementsInstanced(uint mode, int count, uint type, void* indices, int instancecount) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsInstanced)(mode, count, type, indices, instancecount);
        public void glDrawElementsInstancedANGLE(uint mode, int count, uint type, void* indices, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsInstancedANGLE)(mode, count, type, indices, primcount);
        public void glDrawElementsInstancedARB(uint mode, int count, uint type, void* indices, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsInstancedARB)(mode, count, type, indices, primcount);
        public void glDrawElementsInstancedBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, uint, void>)vtable.glDrawElementsInstancedBaseInstance)(mode, count, type, indices, instancecount, baseinstance);
        public void glDrawElementsInstancedBaseInstanceEXT(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, uint, void>)vtable.glDrawElementsInstancedBaseInstanceEXT)(mode, count, type, indices, instancecount, baseinstance);
        public void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, void* indices, int instancecount, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, int, void>)vtable.glDrawElementsInstancedBaseVertex)(mode, count, type, indices, instancecount, basevertex);
        public void glDrawElementsInstancedBaseVertexBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, int, uint, void>)vtable.glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, instancecount, basevertex, baseinstance);
        public void glDrawElementsInstancedBaseVertexBaseInstanceEXT(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, int, uint, void>)vtable.glDrawElementsInstancedBaseVertexBaseInstanceEXT)(mode, count, type, indices, instancecount, basevertex, baseinstance);
        public void glDrawElementsInstancedBaseVertexEXT(uint mode, int count, uint type, void* indices, int instancecount, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, int, void>)vtable.glDrawElementsInstancedBaseVertexEXT)(mode, count, type, indices, instancecount, basevertex);
        public void glDrawElementsInstancedBaseVertexOES(uint mode, int count, uint type, void* indices, int instancecount, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, int, void>)vtable.glDrawElementsInstancedBaseVertexOES)(mode, count, type, indices, instancecount, basevertex);
        public void glDrawElementsInstancedEXT(uint mode, int count, uint type, void* indices, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);
        public void glDrawElementsInstancedNV(uint mode, int count, uint type, void* indices, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, int, void>)vtable.glDrawElementsInstancedNV)(mode, count, type, indices, primcount);
        public void glDrawMeshArraysSUN(uint mode, int first, int count, int width) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glDrawMeshArraysSUN)(mode, first, count, width);
        public void glDrawMeshTasksNV(uint first, uint count) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDrawMeshTasksNV)(first, count);
        public void glDrawMeshTasksIndirectNV(nint indirect) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glDrawMeshTasksIndirectNV)(indirect);
        public void glDrawPixels(int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<int, int, uint, uint, void*, void>)vtable.glDrawPixels)(width, height, format, type, pixels);
        public void glDrawRangeElementArrayAPPLE(uint mode, uint start, uint end, int first, int count) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, void>)vtable.glDrawRangeElementArrayAPPLE)(mode, start, end, first, count);
        public void glDrawRangeElementArrayATI(uint mode, uint start, uint end, int count) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glDrawRangeElementArrayATI)(mode, start, end, count);
        public void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, void* indices) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void*, void>)vtable.glDrawRangeElements)(mode, start, end, count, type, indices);
        public void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void*, int, void>)vtable.glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);
        public void glDrawRangeElementsBaseVertexEXT(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void*, int, void>)vtable.glDrawRangeElementsBaseVertexEXT)(mode, start, end, count, type, indices, basevertex);
        public void glDrawRangeElementsBaseVertexOES(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void*, int, void>)vtable.glDrawRangeElementsBaseVertexOES)(mode, start, end, count, type, indices, basevertex);
        public void glDrawRangeElementsEXT(uint mode, uint start, uint end, int count, uint type, void* indices) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void*, void>)vtable.glDrawRangeElementsEXT)(mode, start, end, count, type, indices);
        public void glDrawTexfOES(float x, float y, float z, float width, float height) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, void>)vtable.glDrawTexfOES)(x, y, z, width, height);
        public void glDrawTexfvOES(float* coords) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glDrawTexfvOES)(coords);
        public void glDrawTexiOES(int x, int y, int z, int width, int height) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)vtable.glDrawTexiOES)(x, y, z, width, height);
        public void glDrawTexivOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glDrawTexivOES)(coords);
        public void glDrawTexsOES(short x, short y, short z, short width, short height) => ((delegate* unmanaged[Cdecl]<short, short, short, short, short, void>)vtable.glDrawTexsOES)(x, y, z, width, height);
        public void glDrawTexsvOES(short* coords) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glDrawTexsvOES)(coords);
        public void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, float, float, float, float, float, float, float, void>)vtable.glDrawTextureNV)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        public void glDrawTexxOES(int x, int y, int z, int width, int height) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)vtable.glDrawTexxOES)(x, y, z, width, height);
        public void glDrawTexxvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glDrawTexxvOES)(coords);
        public void glDrawTransformFeedback(uint mode, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDrawTransformFeedback)(mode, id);
        public void glDrawTransformFeedbackEXT(uint mode, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDrawTransformFeedbackEXT)(mode, id);
        public void glDrawTransformFeedbackInstanced(uint mode, uint id, int instancecount) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glDrawTransformFeedbackInstanced)(mode, id, instancecount);
        public void glDrawTransformFeedbackInstancedEXT(uint mode, uint id, int instancecount) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glDrawTransformFeedbackInstancedEXT)(mode, id, instancecount);
        public void glDrawTransformFeedbackNV(uint mode, uint id) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDrawTransformFeedbackNV)(mode, id);
        public void glDrawTransformFeedbackStream(uint mode, uint id, uint stream) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glDrawTransformFeedbackStream)(mode, id, stream);
        public void glDrawTransformFeedbackStreamInstanced(uint mode, uint id, uint stream, int instancecount) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glDrawTransformFeedbackStreamInstanced)(mode, id, stream, instancecount);
        public void glEGLImageTargetRenderbufferStorageOES(uint target, void* image) => ((delegate* unmanaged[Cdecl]<uint, void*, void>)vtable.glEGLImageTargetRenderbufferStorageOES)(target, image);
        public void glEGLImageTargetTexStorageEXT(uint target, void* image, int* attrib_list) => ((delegate* unmanaged[Cdecl]<uint, void*, int*, void>)vtable.glEGLImageTargetTexStorageEXT)(target, image, attrib_list);
        public void glEGLImageTargetTexture2DOES(uint target, void* image) => ((delegate* unmanaged[Cdecl]<uint, void*, void>)vtable.glEGLImageTargetTexture2DOES)(target, image);
        public void glEGLImageTargetTextureStorageEXT(uint texture, void* image, int* attrib_list) => ((delegate* unmanaged[Cdecl]<uint, void*, int*, void>)vtable.glEGLImageTargetTextureStorageEXT)(texture, image, attrib_list);
        public void glEdgeFlag(byte flag) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glEdgeFlag)(flag);
        public void glEdgeFlagFormatNV(int stride) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glEdgeFlagFormatNV)(stride);
        public void glEdgeFlagPointer(int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, void*, void>)vtable.glEdgeFlagPointer)(stride, pointer);
        public void glEdgeFlagPointerEXT(int stride, int count, byte* pointer) => ((delegate* unmanaged[Cdecl]<int, int, byte*, void>)vtable.glEdgeFlagPointerEXT)(stride, count, pointer);
        public void glEdgeFlagPointerListIBM(int stride, byte** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<int, byte**, int, void>)vtable.glEdgeFlagPointerListIBM)(stride, pointer, ptrstride);
        public void glEdgeFlagv(byte* flag) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glEdgeFlagv)(flag);
        public void glElementPointerAPPLE(uint type, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, void*, void>)vtable.glElementPointerAPPLE)(type, pointer);
        public void glElementPointerATI(uint type, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, void*, void>)vtable.glElementPointerATI)(type, pointer);
        public void glEnable(uint cap) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEnable)(cap);
        public void glEnableClientState(uint array) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEnableClientState)(array);
        public void glEnableClientStateIndexedEXT(uint array, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableClientStateIndexedEXT)(array, index);
        public void glEnableClientStateiEXT(uint array, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableClientStateiEXT)(array, index);
        public void glEnableDriverControlQCOM(uint driverControl) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEnableDriverControlQCOM)(driverControl);
        public void glEnableIndexedEXT(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableIndexedEXT)(target, index);
        public void glEnableVariantClientStateEXT(uint id) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEnableVariantClientStateEXT)(id);
        public void glEnableVertexArrayAttrib(uint vaobj, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableVertexArrayAttrib)(vaobj, index);
        public void glEnableVertexArrayAttribEXT(uint vaobj, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableVertexArrayAttribEXT)(vaobj, index);
        public void glEnableVertexArrayEXT(uint vaobj, uint array) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableVertexArrayEXT)(vaobj, array);
        public void glEnableVertexAttribAPPLE(uint index, uint pname) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableVertexAttribAPPLE)(index, pname);
        public void glEnableVertexAttribArray(uint index) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEnableVertexAttribArray)(index);
        public void glEnableVertexAttribArrayARB(uint index) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEnableVertexAttribArrayARB)(index);
        public void glEnablei(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnablei)(target, index);
        public void glEnableiEXT(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableiEXT)(target, index);
        public void glEnableiNV(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableiNV)(target, index);
        public void glEnableiOES(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEnableiOES)(target, index);
        public void glEnd() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEnd)();
        public void glEndConditionalRender() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndConditionalRender)();
        public void glEndConditionalRenderNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndConditionalRenderNV)();
        public void glEndConditionalRenderNVX() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndConditionalRenderNVX)();
        public void glEndFragmentShaderATI() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndFragmentShaderATI)();
        public void glEndList() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndList)();
        public void glEndOcclusionQueryNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndOcclusionQueryNV)();
        public void glEndPerfMonitorAMD(uint monitor) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndPerfMonitorAMD)(monitor);
        public void glEndPerfQueryINTEL(uint queryHandle) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndPerfQueryINTEL)(queryHandle);
        public void glEndQuery(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndQuery)(target);
        public void glEndQueryARB(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndQueryARB)(target);
        public void glEndQueryEXT(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndQueryEXT)(target);
        public void glEndQueryIndexed(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEndQueryIndexed)(target, index);
        public void glEndTilingQCOM(uint preserveMask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndTilingQCOM)(preserveMask);
        public void glEndTransformFeedback() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndTransformFeedback)();
        public void glEndTransformFeedbackEXT() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndTransformFeedbackEXT)();
        public void glEndTransformFeedbackNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndTransformFeedbackNV)();
        public void glEndVertexShaderEXT() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndVertexShaderEXT)();
        public void glEndVideoCaptureNV(uint video_capture_slot) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glEndVideoCaptureNV)(video_capture_slot);
        public void glEvalCoord1d(double u) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glEvalCoord1d)(u);
        public void glEvalCoord1dv(double* u) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glEvalCoord1dv)(u);
        public void glEvalCoord1f(float u) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glEvalCoord1f)(u);
        public void glEvalCoord1fv(float* u) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glEvalCoord1fv)(u);
        public void glEvalCoord1xOES(int u) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glEvalCoord1xOES)(u);
        public void glEvalCoord1xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glEvalCoord1xvOES)(coords);
        public void glEvalCoord2d(double u, double v) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glEvalCoord2d)(u, v);
        public void glEvalCoord2dv(double* u) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glEvalCoord2dv)(u);
        public void glEvalCoord2f(float u, float v) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glEvalCoord2f)(u, v);
        public void glEvalCoord2fv(float* u) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glEvalCoord2fv)(u);
        public void glEvalCoord2xOES(int u, int v) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glEvalCoord2xOES)(u, v);
        public void glEvalCoord2xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glEvalCoord2xvOES)(coords);
        public void glEvalMapsNV(uint target, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glEvalMapsNV)(target, mode);
        public void glEvalMesh1(uint mode, int i1, int i2) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glEvalMesh1)(mode, i1, i2);
        public void glEvalMesh2(uint mode, int i1, int i2, int j1, int j2) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glEvalMesh2)(mode, i1, i2, j1, j2);
        public void glEvalPoint1(int i) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glEvalPoint1)(i);
        public void glEvalPoint2(int i, int j) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glEvalPoint2)(i, j);
        public void glEvaluateDepthValuesARB() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEvaluateDepthValuesARB)();
        public void glExecuteProgramNV(uint target, uint id, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glExecuteProgramNV)(target, id, parameters);
        public void glExtGetBufferPointervQCOM(uint target, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, void**, void>)vtable.glExtGetBufferPointervQCOM)(target, parameters);
        public void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers) => ((delegate* unmanaged[Cdecl]<uint*, int, int*, void>)vtable.glExtGetBuffersQCOM)(buffers, maxBuffers, numBuffers);
        public void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers) => ((delegate* unmanaged[Cdecl]<uint*, int, int*, void>)vtable.glExtGetFramebuffersQCOM)(framebuffers, maxFramebuffers, numFramebuffers);
        public void glExtGetProgramBinarySourceQCOM(uint program, uint shadertype, byte* source, int* length) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, int*, void>)vtable.glExtGetProgramBinarySourceQCOM)(program, shadertype, source, length);
        public void glExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms) => ((delegate* unmanaged[Cdecl]<uint*, int, int*, void>)vtable.glExtGetProgramsQCOM)(programs, maxPrograms, numPrograms);
        public void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers) => ((delegate* unmanaged[Cdecl]<uint*, int, int*, void>)vtable.glExtGetRenderbuffersQCOM)(renderbuffers, maxRenderbuffers, numRenderbuffers);
        public void glExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders) => ((delegate* unmanaged[Cdecl]<uint*, int, int*, void>)vtable.glExtGetShadersQCOM)(shaders, maxShaders, numShaders);
        public void glExtGetTexLevelParameterivQCOM(uint texture, uint face, int level, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int*, void>)vtable.glExtGetTexLevelParameterivQCOM)(texture, face, level, pname, parameters);
        public void glExtGetTexSubImageQCOM(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* texels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glExtGetTexSubImageQCOM)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
        public void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures) => ((delegate* unmanaged[Cdecl]<uint*, int, int*, void>)vtable.glExtGetTexturesQCOM)(textures, maxTextures, numTextures);
        public byte glExtIsProgramBinaryQCOM(uint program) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glExtIsProgramBinaryQCOM)(program);
        public void glExtTexObjectStateOverrideiQCOM(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glExtTexObjectStateOverrideiQCOM)(target, pname, param);
        public void glExtractComponentEXT(uint res, uint src, uint num) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glExtractComponentEXT)(res, src, num);
        public void glFeedbackBuffer(int size, uint type, float* buffer) => ((delegate* unmanaged[Cdecl]<int, uint, float*, void>)vtable.glFeedbackBuffer)(size, type, buffer);
        public void glFeedbackBufferxOES(int n, uint type, int* buffer) => ((delegate* unmanaged[Cdecl]<int, uint, int*, void>)vtable.glFeedbackBufferxOES)(n, type, buffer);
        public nint glFenceSync(uint condition, uint flags) => ((delegate* unmanaged[Cdecl]<uint, uint, nint>)vtable.glFenceSync)(condition, flags);
        public nint glFenceSyncAPPLE(uint condition, uint flags) => ((delegate* unmanaged[Cdecl]<uint, uint, nint>)vtable.glFenceSyncAPPLE)(condition, flags);
        public void glFinalCombinerInputNV(uint variable, uint input, uint mapping, uint componentUsage) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glFinalCombinerInputNV)(variable, input, mapping, componentUsage);
        public void glFinish() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFinish)();
        public int glFinishAsyncSGIX(uint* markerp) => ((delegate* unmanaged[Cdecl]<uint*, int>)vtable.glFinishAsyncSGIX)(markerp);
        public void glFinishFenceAPPLE(uint fence) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFinishFenceAPPLE)(fence);
        public void glFinishFenceNV(uint fence) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFinishFenceNV)(fence);
        public void glFinishObjectAPPLE(uint obj, int name) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFinishObjectAPPLE)(obj, name);
        public void glFinishTextureSUNX() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFinishTextureSUNX)();
        public void glFlush() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFlush)();
        public void glFlushMappedBufferRange(uint target, nint offset, nint length) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vtable.glFlushMappedBufferRange)(target, offset, length);
        public void glFlushMappedBufferRangeAPPLE(uint target, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vtable.glFlushMappedBufferRangeAPPLE)(target, offset, size);
        public void glFlushMappedBufferRangeEXT(uint target, nint offset, nint length) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vtable.glFlushMappedBufferRangeEXT)(target, offset, length);
        public void glFlushMappedNamedBufferRange(uint buffer, nint offset, nint length) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vtable.glFlushMappedNamedBufferRange)(buffer, offset, length);
        public void glFlushMappedNamedBufferRangeEXT(uint buffer, nint offset, nint length) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vtable.glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);
        public void glFlushPixelDataRangeNV(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFlushPixelDataRangeNV)(target);
        public void glFlushRasterSGIX() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFlushRasterSGIX)();
        public void glFlushStaticDataIBM(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFlushStaticDataIBM)(target);
        public void glFlushVertexArrayRangeAPPLE(int length, void* pointer) => ((delegate* unmanaged[Cdecl]<int, void*, void>)vtable.glFlushVertexArrayRangeAPPLE)(length, pointer);
        public void glFlushVertexArrayRangeNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFlushVertexArrayRangeNV)();
        public void glFogCoordFormatNV(uint type, int stride) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFogCoordFormatNV)(type, stride);
        public void glFogCoordPointer(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glFogCoordPointer)(type, stride, pointer);
        public void glFogCoordPointerEXT(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glFogCoordPointerEXT)(type, stride, pointer);
        public void glFogCoordPointerListIBM(uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<uint, int, void**, int, void>)vtable.glFogCoordPointerListIBM)(type, stride, pointer, ptrstride);
        public void glFogCoordd(double coord) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glFogCoordd)(coord);
        public void glFogCoorddEXT(double coord) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glFogCoorddEXT)(coord);
        public void glFogCoorddv(double* coord) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glFogCoorddv)(coord);
        public void glFogCoorddvEXT(double* coord) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glFogCoorddvEXT)(coord);
        public void glFogCoordf(float coord) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glFogCoordf)(coord);
        public void glFogCoordfEXT(float coord) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glFogCoordfEXT)(coord);
        public void glFogCoordfv(float* coord) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glFogCoordfv)(coord);
        public void glFogCoordfvEXT(float* coord) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glFogCoordfvEXT)(coord);
        public void glFogCoordhNV(Half fog) => ((delegate* unmanaged[Cdecl]<Half, void>)vtable.glFogCoordhNV)(fog);
        public void glFogCoordhvNV(Half* fog) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glFogCoordhvNV)(fog);
        public void glFogFuncSGIS(int n, float* points) => ((delegate* unmanaged[Cdecl]<int, float*, void>)vtable.glFogFuncSGIS)(n, points);
        public void glFogf(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glFogf)(pname, param);
        public void glFogfv(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glFogfv)(pname, parameters);
        public void glFogi(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFogi)(pname, param);
        public void glFogiv(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glFogiv)(pname, parameters);
        public void glFogx(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFogx)(pname, param);
        public void glFogxOES(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFogxOES)(pname, param);
        public void glFogxv(uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glFogxv)(pname, param);
        public void glFogxvOES(uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glFogxvOES)(pname, param);
        public void glFragmentColorMaterialSGIX(uint face, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glFragmentColorMaterialSGIX)(face, mode);
        public void glFragmentCoverageColorNV(uint color) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFragmentCoverageColorNV)(color);
        public void glFragmentLightModelfSGIX(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glFragmentLightModelfSGIX)(pname, param);
        public void glFragmentLightModelfvSGIX(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glFragmentLightModelfvSGIX)(pname, parameters);
        public void glFragmentLightModeliSGIX(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFragmentLightModeliSGIX)(pname, param);
        public void glFragmentLightModelivSGIX(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glFragmentLightModelivSGIX)(pname, parameters);
        public void glFragmentLightfSGIX(uint light, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glFragmentLightfSGIX)(light, pname, param);
        public void glFragmentLightfvSGIX(uint light, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glFragmentLightfvSGIX)(light, pname, parameters);
        public void glFragmentLightiSGIX(uint light, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glFragmentLightiSGIX)(light, pname, param);
        public void glFragmentLightivSGIX(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glFragmentLightivSGIX)(light, pname, parameters);
        public void glFragmentMaterialfSGIX(uint face, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glFragmentMaterialfSGIX)(face, pname, param);
        public void glFragmentMaterialfvSGIX(uint face, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glFragmentMaterialfvSGIX)(face, pname, parameters);
        public void glFragmentMaterialiSGIX(uint face, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glFragmentMaterialiSGIX)(face, pname, param);
        public void glFragmentMaterialivSGIX(uint face, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glFragmentMaterialivSGIX)(face, pname, parameters);
        public void glFrameTerminatorGREMEDY() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFrameTerminatorGREMEDY)();
        public void glFrameZoomSGIX(int factor) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glFrameZoomSGIX)(factor);
        public void glFramebufferDrawBufferEXT(uint framebuffer, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glFramebufferDrawBufferEXT)(framebuffer, mode);
        public void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);
        public void glFramebufferFetchBarrierEXT() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFramebufferFetchBarrierEXT)();
        public void glFramebufferFetchBarrierQCOM() => ((delegate* unmanaged[Cdecl]<void>)vtable.glFramebufferFetchBarrierQCOM)();
        public void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint*, void>)vtable.glFramebufferFoveationConfigQCOM)(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
        public void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, float, float, float, float, void>)vtable.glFramebufferFoveationParametersQCOM)(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        public void glFramebufferParameteri(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glFramebufferParameteri)(target, pname, param);
        public void glFramebufferPixelLocalStorageSizeEXT(uint target, int size) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glFramebufferPixelLocalStorageSizeEXT)(target, size);
        public void glFramebufferReadBufferEXT(uint framebuffer, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glFramebufferReadBufferEXT)(framebuffer, mode);
        public void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);
        public void glFramebufferRenderbufferEXT(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);
        public void glFramebufferRenderbufferOES(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glFramebufferRenderbufferOES)(target, attachment, renderbuffertarget, renderbuffer);
        public void glFramebufferSampleLocationsfvARB(uint target, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glFramebufferSampleLocationsfvARB)(target, start, count, v);
        public void glFramebufferSampleLocationsfvNV(uint target, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glFramebufferSampleLocationsfvNV)(target, start, count, v);
        public void glFramebufferSamplePositionsfvAMD(uint target, uint numsamples, uint pixelindex, float* values) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glFramebufferSamplePositionsfvAMD)(target, numsamples, pixelindex, values);
        public void glFramebufferTexture(uint target, uint attachment, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glFramebufferTexture)(target, attachment, texture, level);
        public void glFramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glFramebufferTexture1D)(target, attachment, textarget, texture, level);
        public void glFramebufferTexture1DEXT(uint target, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);
        public void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glFramebufferTexture2D)(target, attachment, textarget, texture, level);
        public void glFramebufferTexture2DEXT(uint target, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);
        public void glFramebufferTexture2DDownsampleIMG(uint target, uint attachment, uint textarget, uint texture, int level, int xscale, int yscale) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, int, void>)vtable.glFramebufferTexture2DDownsampleIMG)(target, attachment, textarget, texture, level, xscale, yscale);
        public void glFramebufferTexture2DMultisampleEXT(uint target, uint attachment, uint textarget, uint texture, int level, int samples) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, void>)vtable.glFramebufferTexture2DMultisampleEXT)(target, attachment, textarget, texture, level, samples);
        public void glFramebufferTexture2DMultisampleIMG(uint target, uint attachment, uint textarget, uint texture, int level, int samples) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, void>)vtable.glFramebufferTexture2DMultisampleIMG)(target, attachment, textarget, texture, level, samples);
        public void glFramebufferTexture2DOES(uint target, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glFramebufferTexture2DOES)(target, attachment, textarget, texture, level);
        public void glFramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, void>)vtable.glFramebufferTexture3D)(target, attachment, textarget, texture, level, zoffset);
        public void glFramebufferTexture3DEXT(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, void>)vtable.glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);
        public void glFramebufferTexture3DOES(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, void>)vtable.glFramebufferTexture3DOES)(target, attachment, textarget, texture, level, zoffset);
        public void glFramebufferTextureARB(uint target, uint attachment, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glFramebufferTextureARB)(target, attachment, texture, level);
        public void glFramebufferTextureEXT(uint target, uint attachment, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glFramebufferTextureEXT)(target, attachment, texture, level);
        public void glFramebufferTextureFaceARB(uint target, uint attachment, uint texture, int level, uint face) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void>)vtable.glFramebufferTextureFaceARB)(target, attachment, texture, level, face);
        public void glFramebufferTextureFaceEXT(uint target, uint attachment, uint texture, int level, uint face) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void>)vtable.glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);
        public void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, void>)vtable.glFramebufferTextureLayer)(target, attachment, texture, level, layer);
        public void glFramebufferTextureLayerARB(uint target, uint attachment, uint texture, int level, int layer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, void>)vtable.glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);
        public void glFramebufferTextureLayerEXT(uint target, uint attachment, uint texture, int level, int layer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, void>)vtable.glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);
        public void glFramebufferTextureLayerDownsampleIMG(uint target, uint attachment, uint texture, int level, int layer, int xscale, int yscale) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, int, int, void>)vtable.glFramebufferTextureLayerDownsampleIMG)(target, attachment, texture, level, layer, xscale, yscale);
        public void glFramebufferTextureMultisampleMultiviewOVR(uint target, uint attachment, uint texture, int level, int samples, int baseViewIndex, int numViews) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, int, int, void>)vtable.glFramebufferTextureMultisampleMultiviewOVR)(target, attachment, texture, level, samples, baseViewIndex, numViews);
        public void glFramebufferTextureMultiviewOVR(uint target, uint attachment, uint texture, int level, int baseViewIndex, int numViews) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, int, void>)vtable.glFramebufferTextureMultiviewOVR)(target, attachment, texture, level, baseViewIndex, numViews);
        public void glFramebufferTextureOES(uint target, uint attachment, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glFramebufferTextureOES)(target, attachment, texture, level);
        public void glFreeObjectBufferATI(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFreeObjectBufferATI)(buffer);
        public void glFrontFace(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFrontFace)(mode);
        public void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vtable.glFrustum)(left, right, bottom, top, zNear, zFar);
        public void glFrustumf(float l, float r, float b, float t, float n, float f) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)vtable.glFrustumf)(l, r, b, t, n, f);
        public void glFrustumfOES(float l, float r, float b, float t, float n, float f) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)vtable.glFrustumfOES)(l, r, b, t, n, f);
        public void glFrustumx(int l, int r, int b, int t, int n, int f) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vtable.glFrustumx)(l, r, b, t, n, f);
        public void glFrustumxOES(int l, int r, int b, int t, int n, int f) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vtable.glFrustumxOES)(l, r, b, t, n, f);
        public uint glGenAsyncMarkersSGIX(int range) => ((delegate* unmanaged[Cdecl]<int, uint>)vtable.glGenAsyncMarkersSGIX)(range);
        public void glGenBuffers(int n, uint* buffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenBuffers)(n, buffers);
        public void glGenBuffersARB(int n, uint* buffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenBuffersARB)(n, buffers);
        public void glGenFencesAPPLE(int n, uint* fences) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenFencesAPPLE)(n, fences);
        public void glGenFencesNV(int n, uint* fences) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenFencesNV)(n, fences);
        public uint glGenFragmentShadersATI(uint range) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glGenFragmentShadersATI)(range);
        public void glGenFramebuffers(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenFramebuffers)(n, framebuffers);
        public void glGenFramebuffersEXT(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenFramebuffersEXT)(n, framebuffers);
        public void glGenFramebuffersOES(int n, uint* framebuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenFramebuffersOES)(n, framebuffers);
        public uint glGenLists(int range) => ((delegate* unmanaged[Cdecl]<int, uint>)vtable.glGenLists)(range);
        public void glGenNamesAMD(uint identifier, uint num, uint* names) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGenNamesAMD)(identifier, num, names);
        public void glGenOcclusionQueriesNV(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenOcclusionQueriesNV)(n, ids);
        public uint glGenPathsNV(int range) => ((delegate* unmanaged[Cdecl]<int, uint>)vtable.glGenPathsNV)(range);
        public void glGenPerfMonitorsAMD(int n, uint* monitors) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenPerfMonitorsAMD)(n, monitors);
        public void glGenProgramPipelines(int n, uint* pipelines) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenProgramPipelines)(n, pipelines);
        public void glGenProgramPipelinesEXT(int n, uint* pipelines) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenProgramPipelinesEXT)(n, pipelines);
        public void glGenProgramsARB(int n, uint* programs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenProgramsARB)(n, programs);
        public void glGenProgramsNV(int n, uint* programs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenProgramsNV)(n, programs);
        public void glGenQueries(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenQueries)(n, ids);
        public void glGenQueriesARB(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenQueriesARB)(n, ids);
        public void glGenQueriesEXT(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenQueriesEXT)(n, ids);
        public void glGenQueryResourceTagNV(int n, int* tagIds) => ((delegate* unmanaged[Cdecl]<int, int*, void>)vtable.glGenQueryResourceTagNV)(n, tagIds);
        public void glGenRenderbuffers(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenRenderbuffers)(n, renderbuffers);
        public void glGenRenderbuffersEXT(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenRenderbuffersEXT)(n, renderbuffers);
        public void glGenRenderbuffersOES(int n, uint* renderbuffers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenRenderbuffersOES)(n, renderbuffers);
        public void glGenSamplers(int count, uint* samplers) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenSamplers)(count, samplers);
        public void glGenSemaphoresEXT(int n, uint* semaphores) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenSemaphoresEXT)(n, semaphores);
        public uint glGenSymbolsEXT(uint datatype, uint storagetype, uint range, uint components) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint>)vtable.glGenSymbolsEXT)(datatype, storagetype, range, components);
        public void glGenTextures(int n, uint* textures) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenTextures)(n, textures);
        public void glGenTexturesEXT(int n, uint* textures) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenTexturesEXT)(n, textures);
        public void glGenTransformFeedbacks(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenTransformFeedbacks)(n, ids);
        public void glGenTransformFeedbacksNV(int n, uint* ids) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenTransformFeedbacksNV)(n, ids);
        public void glGenVertexArrays(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenVertexArrays)(n, arrays);
        public void glGenVertexArraysAPPLE(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenVertexArraysAPPLE)(n, arrays);
        public void glGenVertexArraysOES(int n, uint* arrays) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenVertexArraysOES)(n, arrays);
        public uint glGenVertexShadersEXT(uint range) => ((delegate* unmanaged[Cdecl]<uint, uint>)vtable.glGenVertexShadersEXT)(range);
        public void glGenerateMipmap(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glGenerateMipmap)(target);
        public void glGenerateMipmapEXT(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glGenerateMipmapEXT)(target);
        public void glGenerateMipmapOES(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glGenerateMipmapOES)(target);
        public void glGenerateMultiTexMipmapEXT(uint texunit, uint target) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glGenerateMultiTexMipmapEXT)(texunit, target);
        public void glGenerateTextureMipmap(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glGenerateTextureMipmap)(texture);
        public void glGenerateTextureMipmapEXT(uint texture, uint target) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glGenerateTextureMipmapEXT)(texture, target);
        public void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, parameters);
        public void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetActiveAttrib)(program, index, bufSize, length, size, type, name);
        public void glGetActiveAttribARB(nint programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<nint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetActiveAttribARB)(programObj, index, maxLength, length, size, type, name);
        public void glGetActiveSubroutineName(uint program, uint shadertype, uint index, int bufSize, int* length, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int*, byte*, void>)vtable.glGetActiveSubroutineName)(program, shadertype, index, bufSize, length, name);
        public void glGetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufSize, int* length, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int*, byte*, void>)vtable.glGetActiveSubroutineUniformName)(program, shadertype, index, bufSize, length, name);
        public void glGetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, int* values) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int*, void>)vtable.glGetActiveSubroutineUniformiv)(program, shadertype, index, pname, values);
        public void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetActiveUniform)(program, index, bufSize, length, size, type, name);
        public void glGetActiveUniformARB(nint programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<nint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetActiveUniformARB)(programObj, index, maxLength, length, size, type, name);
        public void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)vtable.glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        public void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, parameters);
        public void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, byte* uniformName) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)vtable.glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);
        public void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, uint, int*, void>)vtable.glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, parameters);
        public void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetActiveVaryingNV)(program, index, bufSize, length, size, type, name);
        public void glGetArrayObjectfvATI(uint array, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetArrayObjectfvATI)(array, pname, parameters);
        public void glGetArrayObjectivATI(uint array, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetArrayObjectivATI)(array, pname, parameters);
        public void glGetAttachedObjectsARB(nint containerObj, int maxCount, int* count, nint* obj) => ((delegate* unmanaged[Cdecl]<nint, int, int*, nint*, void>)vtable.glGetAttachedObjectsARB)(containerObj, maxCount, count, obj);
        public void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders) => ((delegate* unmanaged[Cdecl]<uint, int, int*, uint*, void>)vtable.glGetAttachedShaders)(program, maxCount, count, shaders);
        public int glGetAttribLocation(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetAttribLocation)(program, name);
        public int glGetAttribLocationARB(nint programObj, byte* name) => ((delegate* unmanaged[Cdecl]<nint, byte*, int>)vtable.glGetAttribLocationARB)(programObj, name);
        public void glGetBooleanIndexedvEXT(uint target, uint index, byte* data) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetBooleanIndexedvEXT)(target, index, data);
        public void glGetBooleani_v(uint target, uint index, byte* data) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetBooleani_v)(target, index, data);
        public void glGetBooleanv(uint pname, byte* data) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glGetBooleanv)(pname, data);
        public void glGetBufferParameteri64v(uint target, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetBufferParameteri64v)(target, pname, parameters);
        public void glGetBufferParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetBufferParameteriv)(target, pname, parameters);
        public void glGetBufferParameterivARB(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetBufferParameterivARB)(target, pname, parameters);
        public void glGetBufferParameterui64vNV(uint target, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetBufferParameterui64vNV)(target, pname, parameters);
        public void glGetBufferPointerv(uint target, uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetBufferPointerv)(target, pname, parameters);
        public void glGetBufferPointervARB(uint target, uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetBufferPointervARB)(target, pname, parameters);
        public void glGetBufferPointervOES(uint target, uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetBufferPointervOES)(target, pname, parameters);
        public void glGetBufferSubData(uint target, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glGetBufferSubData)(target, offset, size, data);
        public void glGetBufferSubDataARB(uint target, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glGetBufferSubDataARB)(target, offset, size, data);
        public void glGetClipPlane(uint plane, double* equation) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glGetClipPlane)(plane, equation);
        public void glGetClipPlanef(uint plane, float* equation) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetClipPlanef)(plane, equation);
        public void glGetClipPlanefOES(uint plane, float* equation) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetClipPlanefOES)(plane, equation);
        public void glGetClipPlanex(uint plane, int* equation) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetClipPlanex)(plane, equation);
        public void glGetClipPlanexOES(uint plane, int* equation) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetClipPlanexOES)(plane, equation);
        public void glGetColorTable(uint target, uint format, uint type, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetColorTable)(target, format, type, table);
        public void glGetColorTableEXT(uint target, uint format, uint type, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetColorTableEXT)(target, format, type, data);
        public void glGetColorTableParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetColorTableParameterfv)(target, pname, parameters);
        public void glGetColorTableParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetColorTableParameterfvEXT)(target, pname, parameters);
        public void glGetColorTableParameterfvSGI(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetColorTableParameterfvSGI)(target, pname, parameters);
        public void glGetColorTableParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetColorTableParameteriv)(target, pname, parameters);
        public void glGetColorTableParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetColorTableParameterivEXT)(target, pname, parameters);
        public void glGetColorTableParameterivSGI(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetColorTableParameterivSGI)(target, pname, parameters);
        public void glGetColorTableSGI(uint target, uint format, uint type, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetColorTableSGI)(target, format, type, table);
        public void glGetCombinerInputParameterfvNV(uint stage, uint portion, uint variable, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, float*, void>)vtable.glGetCombinerInputParameterfvNV)(stage, portion, variable, pname, parameters);
        public void glGetCombinerInputParameterivNV(uint stage, uint portion, uint variable, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int*, void>)vtable.glGetCombinerInputParameterivNV)(stage, portion, variable, pname, parameters);
        public void glGetCombinerOutputParameterfvNV(uint stage, uint portion, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetCombinerOutputParameterfvNV)(stage, portion, pname, parameters);
        public void glGetCombinerOutputParameterivNV(uint stage, uint portion, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetCombinerOutputParameterivNV)(stage, portion, pname, parameters);
        public void glGetCombinerStageParameterfvNV(uint stage, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetCombinerStageParameterfvNV)(stage, pname, parameters);
        public uint glGetCommandHeaderNV(uint tokenID, uint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint>)vtable.glGetCommandHeaderNV)(tokenID, size);
        public void glGetCompressedMultiTexImageEXT(uint texunit, uint target, int lod, void* img) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void*, void>)vtable.glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);
        public void glGetCompressedTexImage(uint target, int level, void* img) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glGetCompressedTexImage)(target, level, img);
        public void glGetCompressedTexImageARB(uint target, int level, void* img) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glGetCompressedTexImageARB)(target, level, img);
        public void glGetCompressedTextureImage(uint texture, int level, int bufSize, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, void*, void>)vtable.glGetCompressedTextureImage)(texture, level, bufSize, pixels);
        public void glGetCompressedTextureImageEXT(uint texture, uint target, int lod, void* img) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void*, void>)vtable.glGetCompressedTextureImageEXT)(texture, target, lod, img);
        public void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void*, void>)vtable.glGetCompressedTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        public void glGetConvolutionFilter(uint target, uint format, uint type, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetConvolutionFilter)(target, format, type, image);
        public void glGetConvolutionFilterEXT(uint target, uint format, uint type, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetConvolutionFilterEXT)(target, format, type, image);
        public void glGetConvolutionParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetConvolutionParameterfv)(target, pname, parameters);
        public void glGetConvolutionParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetConvolutionParameterfvEXT)(target, pname, parameters);
        public void glGetConvolutionParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetConvolutionParameteriv)(target, pname, parameters);
        public void glGetConvolutionParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetConvolutionParameterivEXT)(target, pname, parameters);
        public void glGetConvolutionParameterxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetConvolutionParameterxvOES)(target, pname, parameters);
        public void glGetCoverageModulationTableNV(int bufSize, float* v) => ((delegate* unmanaged[Cdecl]<int, float*, void>)vtable.glGetCoverageModulationTableNV)(bufSize, v);
        public uint glGetDebugMessageLog(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)vtable.glGetDebugMessageLog)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        public uint glGetDebugMessageLogAMD(uint count, int bufSize, uint* categories, uint* severities, uint* ids, int* lengths, byte* message) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, uint*, uint*, int*, byte*, uint>)vtable.glGetDebugMessageLogAMD)(count, bufSize, categories, severities, ids, lengths, message);
        public uint glGetDebugMessageLogARB(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)vtable.glGetDebugMessageLogARB)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        public uint glGetDebugMessageLogKHR(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)vtable.glGetDebugMessageLogKHR)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        public void glGetDetailTexFuncSGIS(uint target, float* points) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetDetailTexFuncSGIS)(target, points);
        public void glGetDoubleIndexedvEXT(uint target, uint index, double* data) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetDoubleIndexedvEXT)(target, index, data);
        public void glGetDoublei_v(uint target, uint index, double* data) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetDoublei_v)(target, index, data);
        public void glGetDoublei_vEXT(uint pname, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetDoublei_vEXT)(pname, index, parameters);
        public void glGetDoublev(uint pname, double* data) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glGetDoublev)(pname, data);
        public void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, byte* driverControlString) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetDriverControlStringQCOM)(driverControl, bufSize, length, driverControlString);
        public void glGetDriverControlsQCOM(int* num, int size, uint* driverControls) => ((delegate* unmanaged[Cdecl]<int*, int, uint*, void>)vtable.glGetDriverControlsQCOM)(num, size, driverControls);
        public uint glGetError() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glGetError)();
        public void glGetFenceivNV(uint fence, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFenceivNV)(fence, pname, parameters);
        public void glGetFinalCombinerInputParameterfvNV(uint variable, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFinalCombinerInputParameterfvNV)(variable, pname, parameters);
        public void glGetFinalCombinerInputParameterivNV(uint variable, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFinalCombinerInputParameterivNV)(variable, pname, parameters);
        public void glGetFirstPerfQueryIdINTEL(uint* queryId) => ((delegate* unmanaged[Cdecl]<uint*, void>)vtable.glGetFirstPerfQueryIdINTEL)(queryId);
        public void glGetFixedv(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetFixedv)(pname, parameters);
        public void glGetFixedvOES(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetFixedvOES)(pname, parameters);
        public void glGetFloatIndexedvEXT(uint target, uint index, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFloatIndexedvEXT)(target, index, data);
        public void glGetFloati_v(uint target, uint index, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFloati_v)(target, index, data);
        public void glGetFloati_vEXT(uint pname, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFloati_vEXT)(pname, index, parameters);
        public void glGetFloati_vNV(uint target, uint index, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFloati_vNV)(target, index, data);
        public void glGetFloati_vOES(uint target, uint index, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFloati_vOES)(target, index, data);
        public void glGetFloatv(uint pname, float* data) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetFloatv)(pname, data);
        public void glGetFogFuncSGIS(float* points) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glGetFogFuncSGIS)(points);
        public int glGetFragDataIndex(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetFragDataIndex)(program, name);
        public int glGetFragDataIndexEXT(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetFragDataIndexEXT)(program, name);
        public int glGetFragDataLocation(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetFragDataLocation)(program, name);
        public int glGetFragDataLocationEXT(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetFragDataLocationEXT)(program, name);
        public void glGetFragmentLightfvSGIX(uint light, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFragmentLightfvSGIX)(light, pname, parameters);
        public void glGetFragmentLightivSGIX(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFragmentLightivSGIX)(light, pname, parameters);
        public void glGetFragmentMaterialfvSGIX(uint face, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetFragmentMaterialfvSGIX)(face, pname, parameters);
        public void glGetFragmentMaterialivSGIX(uint face, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFragmentMaterialivSGIX)(face, pname, parameters);
        public void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetFramebufferAttachmentParameteriv)(target, attachment, pname, parameters);
        public void glGetFramebufferAttachmentParameterivEXT(uint target, uint attachment, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetFramebufferAttachmentParameterivEXT)(target, attachment, pname, parameters);
        public void glGetFramebufferAttachmentParameterivOES(uint target, uint attachment, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetFramebufferAttachmentParameterivOES)(target, attachment, pname, parameters);
        public void glGetFramebufferParameterfvAMD(uint target, uint pname, uint numsamples, uint pixelindex, int size, float* values) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, float*, void>)vtable.glGetFramebufferParameterfvAMD)(target, pname, numsamples, pixelindex, size, values);
        public void glGetFramebufferParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFramebufferParameteriv)(target, pname, parameters);
        public void glGetFramebufferParameterivEXT(uint framebuffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFramebufferParameterivEXT)(framebuffer, pname, parameters);
        public int glGetFramebufferPixelLocalStorageSizeEXT(uint target) => ((delegate* unmanaged[Cdecl]<uint, int>)vtable.glGetFramebufferPixelLocalStorageSizeEXT)(target);
        public uint glGetGraphicsResetStatus() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glGetGraphicsResetStatus)();
        public uint glGetGraphicsResetStatusARB() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glGetGraphicsResetStatusARB)();
        public uint glGetGraphicsResetStatusEXT() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glGetGraphicsResetStatusEXT)();
        public uint glGetGraphicsResetStatusKHR() => ((delegate* unmanaged[Cdecl]<uint>)vtable.glGetGraphicsResetStatusKHR)();
        public nint glGetHandleARB(uint pname) => ((delegate* unmanaged[Cdecl]<uint, nint>)vtable.glGetHandleARB)(pname);
        public void glGetHistogram(uint target, byte reset, uint format, uint type, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, void*, void>)vtable.glGetHistogram)(target, reset, format, type, values);
        public void glGetHistogramEXT(uint target, byte reset, uint format, uint type, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, void*, void>)vtable.glGetHistogramEXT)(target, reset, format, type, values);
        public void glGetHistogramParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetHistogramParameterfv)(target, pname, parameters);
        public void glGetHistogramParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetHistogramParameterfvEXT)(target, pname, parameters);
        public void glGetHistogramParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetHistogramParameteriv)(target, pname, parameters);
        public void glGetHistogramParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetHistogramParameterivEXT)(target, pname, parameters);
        public void glGetHistogramParameterxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetHistogramParameterxvOES)(target, pname, parameters);
        public ulong glGetImageHandleARB(uint texture, int level, byte layered, int layer, uint format) => ((delegate* unmanaged[Cdecl]<uint, int, byte, int, uint, ulong>)vtable.glGetImageHandleARB)(texture, level, layered, layer, format);
        public ulong glGetImageHandleNV(uint texture, int level, byte layered, int layer, uint format) => ((delegate* unmanaged[Cdecl]<uint, int, byte, int, uint, ulong>)vtable.glGetImageHandleNV)(texture, level, layered, layer, format);
        public void glGetImageTransformParameterfvHP(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetImageTransformParameterfvHP)(target, pname, parameters);
        public void glGetImageTransformParameterivHP(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetImageTransformParameterivHP)(target, pname, parameters);
        public void glGetInfoLogARB(nint obj, int maxLength, int* length, byte* infoLog) => ((delegate* unmanaged[Cdecl]<nint, int, int*, byte*, void>)vtable.glGetInfoLogARB)(obj, maxLength, length, infoLog);
        public int glGetInstrumentsSGIX() => ((delegate* unmanaged[Cdecl]<int>)vtable.glGetInstrumentsSGIX)();
        public void glGetInteger64i_v(uint target, uint index, long* data) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetInteger64i_v)(target, index, data);
        public void glGetInteger64v(uint pname, long* data) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glGetInteger64v)(pname, data);
        public void glGetInteger64vAPPLE(uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glGetInteger64vAPPLE)(pname, parameters);
        public void glGetInteger64vEXT(uint pname, long* data) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glGetInteger64vEXT)(pname, data);
        public void glGetIntegerIndexedvEXT(uint target, uint index, int* data) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetIntegerIndexedvEXT)(target, index, data);
        public void glGetIntegeri_v(uint target, uint index, int* data) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetIntegeri_v)(target, index, data);
        public void glGetIntegeri_vEXT(uint target, uint index, int* data) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetIntegeri_vEXT)(target, index, data);
        public void glGetIntegerui64i_vNV(uint value, uint index, ulong* result) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetIntegerui64i_vNV)(value, index, result);
        public void glGetIntegerui64vNV(uint value, ulong* result) => ((delegate* unmanaged[Cdecl]<uint, ulong*, void>)vtable.glGetIntegerui64vNV)(value, result);
        public void glGetIntegerv(uint pname, int* data) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetIntegerv)(pname, data);
        public void glGetInternalformatSampleivNV(uint target, uint internalformat, int samples, uint pname, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int*, void>)vtable.glGetInternalformatSampleivNV)(target, internalformat, samples, pname, count, parameters);
        public void glGetInternalformati64v(uint target, uint internalformat, uint pname, int count, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, long*, void>)vtable.glGetInternalformati64v)(target, internalformat, pname, count, parameters);
        public void glGetInternalformativ(uint target, uint internalformat, uint pname, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int*, void>)vtable.glGetInternalformativ)(target, internalformat, pname, count, parameters);
        public void glGetInvariantBooleanvEXT(uint id, uint value, byte* data) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetInvariantBooleanvEXT)(id, value, data);
        public void glGetInvariantFloatvEXT(uint id, uint value, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetInvariantFloatvEXT)(id, value, data);
        public void glGetInvariantIntegervEXT(uint id, uint value, int* data) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetInvariantIntegervEXT)(id, value, data);
        public void glGetLightfv(uint light, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetLightfv)(light, pname, parameters);
        public void glGetLightiv(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetLightiv)(light, pname, parameters);
        public void glGetLightxOES(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetLightxOES)(light, pname, parameters);
        public void glGetLightxv(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetLightxv)(light, pname, parameters);
        public void glGetLightxvOES(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetLightxvOES)(light, pname, parameters);
        public void glGetListParameterfvSGIX(uint list, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetListParameterfvSGIX)(list, pname, parameters);
        public void glGetListParameterivSGIX(uint list, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetListParameterivSGIX)(list, pname, parameters);
        public void glGetLocalConstantBooleanvEXT(uint id, uint value, byte* data) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetLocalConstantBooleanvEXT)(id, value, data);
        public void glGetLocalConstantFloatvEXT(uint id, uint value, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetLocalConstantFloatvEXT)(id, value, data);
        public void glGetLocalConstantIntegervEXT(uint id, uint value, int* data) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetLocalConstantIntegervEXT)(id, value, data);
        public void glGetMapAttribParameterfvNV(uint target, uint index, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetMapAttribParameterfvNV)(target, index, pname, parameters);
        public void glGetMapAttribParameterivNV(uint target, uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetMapAttribParameterivNV)(target, index, pname, parameters);
        public void glGetMapControlPointsNV(uint target, uint index, uint type, int ustride, int vstride, byte packed, void* points) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, byte, void*, void>)vtable.glGetMapControlPointsNV)(target, index, type, ustride, vstride, packed, points);
        public void glGetMapParameterfvNV(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMapParameterfvNV)(target, pname, parameters);
        public void glGetMapParameterivNV(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMapParameterivNV)(target, pname, parameters);
        public void glGetMapdv(uint target, uint query, double* v) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetMapdv)(target, query, v);
        public void glGetMapfv(uint target, uint query, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMapfv)(target, query, v);
        public void glGetMapiv(uint target, uint query, int* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMapiv)(target, query, v);
        public void glGetMapxvOES(uint target, uint query, int* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMapxvOES)(target, query, v);
        public void glGetMaterialfv(uint face, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMaterialfv)(face, pname, parameters);
        public void glGetMaterialiv(uint face, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMaterialiv)(face, pname, parameters);
        public void glGetMaterialxOES(uint face, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glGetMaterialxOES)(face, pname, param);
        public void glGetMaterialxv(uint face, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMaterialxv)(face, pname, parameters);
        public void glGetMaterialxvOES(uint face, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMaterialxvOES)(face, pname, parameters);
        public void glGetMemoryObjectDetachedResourcesuivNV(uint memory, uint pname, int first, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint*, void>)vtable.glGetMemoryObjectDetachedResourcesuivNV)(memory, pname, first, count, parameters);
        public void glGetMemoryObjectParameterivEXT(uint memoryObject, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMemoryObjectParameterivEXT)(memoryObject, pname, parameters);
        public void glGetMinmax(uint target, byte reset, uint format, uint type, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, void*, void>)vtable.glGetMinmax)(target, reset, format, type, values);
        public void glGetMinmaxEXT(uint target, byte reset, uint format, uint type, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, void*, void>)vtable.glGetMinmaxEXT)(target, reset, format, type, values);
        public void glGetMinmaxParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMinmaxParameterfv)(target, pname, parameters);
        public void glGetMinmaxParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMinmaxParameterfvEXT)(target, pname, parameters);
        public void glGetMinmaxParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMinmaxParameteriv)(target, pname, parameters);
        public void glGetMinmaxParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetMinmaxParameterivEXT)(target, pname, parameters);
        public void glGetMultiTexEnvfvEXT(uint texunit, uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetMultiTexEnvfvEXT)(texunit, target, pname, parameters);
        public void glGetMultiTexEnvivEXT(uint texunit, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetMultiTexEnvivEXT)(texunit, target, pname, parameters);
        public void glGetMultiTexGendvEXT(uint texunit, uint coord, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glGetMultiTexGendvEXT)(texunit, coord, pname, parameters);
        public void glGetMultiTexGenfvEXT(uint texunit, uint coord, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetMultiTexGenfvEXT)(texunit, coord, pname, parameters);
        public void glGetMultiTexGenivEXT(uint texunit, uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetMultiTexGenivEXT)(texunit, coord, pname, parameters);
        public void glGetMultiTexImageEXT(uint texunit, uint target, int level, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);
        public void glGetMultiTexLevelParameterfvEXT(uint texunit, uint target, int level, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, float*, void>)vtable.glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, parameters);
        public void glGetMultiTexLevelParameterivEXT(uint texunit, uint target, int level, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int*, void>)vtable.glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, parameters);
        public void glGetMultiTexParameterIivEXT(uint texunit, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetMultiTexParameterIivEXT)(texunit, target, pname, parameters);
        public void glGetMultiTexParameterIuivEXT(uint texunit, uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glGetMultiTexParameterIuivEXT)(texunit, target, pname, parameters);
        public void glGetMultiTexParameterfvEXT(uint texunit, uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetMultiTexParameterfvEXT)(texunit, target, pname, parameters);
        public void glGetMultiTexParameterivEXT(uint texunit, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetMultiTexParameterivEXT)(texunit, target, pname, parameters);
        public void glGetMultisamplefv(uint pname, uint index, float* val) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMultisamplefv)(pname, index, val);
        public void glGetMultisamplefvNV(uint pname, uint index, float* val) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetMultisamplefvNV)(pname, index, val);
        public void glGetNamedBufferParameteri64v(uint buffer, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetNamedBufferParameteri64v)(buffer, pname, parameters);
        public void glGetNamedBufferParameteriv(uint buffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetNamedBufferParameteriv)(buffer, pname, parameters);
        public void glGetNamedBufferParameterivEXT(uint buffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetNamedBufferParameterivEXT)(buffer, pname, parameters);
        public void glGetNamedBufferParameterui64vNV(uint buffer, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetNamedBufferParameterui64vNV)(buffer, pname, parameters);
        public void glGetNamedBufferPointerv(uint buffer, uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetNamedBufferPointerv)(buffer, pname, parameters);
        public void glGetNamedBufferPointervEXT(uint buffer, uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetNamedBufferPointervEXT)(buffer, pname, parameters);
        public void glGetNamedBufferSubData(uint buffer, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glGetNamedBufferSubData)(buffer, offset, size, data);
        public void glGetNamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glGetNamedBufferSubDataEXT)(buffer, offset, size, data);
        public void glGetNamedFramebufferParameterfvAMD(uint framebuffer, uint pname, uint numsamples, uint pixelindex, int size, float* values) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, float*, void>)vtable.glGetNamedFramebufferParameterfvAMD)(framebuffer, pname, numsamples, pixelindex, size, values);
        public void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, uint attachment, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetNamedFramebufferAttachmentParameteriv)(framebuffer, attachment, pname, parameters);
        public void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, uint attachment, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, parameters);
        public void glGetNamedFramebufferParameteriv(uint framebuffer, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetNamedFramebufferParameteriv)(framebuffer, pname, param);
        public void glGetNamedFramebufferParameterivEXT(uint framebuffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetNamedFramebufferParameterivEXT)(framebuffer, pname, parameters);
        public void glGetNamedProgramLocalParameterIivEXT(uint program, uint target, uint index, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetNamedProgramLocalParameterIivEXT)(program, target, index, parameters);
        public void glGetNamedProgramLocalParameterIuivEXT(uint program, uint target, uint index, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glGetNamedProgramLocalParameterIuivEXT)(program, target, index, parameters);
        public void glGetNamedProgramLocalParameterdvEXT(uint program, uint target, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glGetNamedProgramLocalParameterdvEXT)(program, target, index, parameters);
        public void glGetNamedProgramLocalParameterfvEXT(uint program, uint target, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetNamedProgramLocalParameterfvEXT)(program, target, index, parameters);
        public void glGetNamedProgramStringEXT(uint program, uint target, uint pname, void* str) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetNamedProgramStringEXT)(program, target, pname, str);
        public void glGetNamedProgramivEXT(uint program, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetNamedProgramivEXT)(program, target, pname, parameters);
        public void glGetNamedRenderbufferParameteriv(uint renderbuffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetNamedRenderbufferParameteriv)(renderbuffer, pname, parameters);
        public void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, parameters);
        public void glGetNamedStringARB(int namelen, byte* name, int bufSize, int* stringlen, byte* str) => ((delegate* unmanaged[Cdecl]<int, byte*, int, int*, byte*, void>)vtable.glGetNamedStringARB)(namelen, name, bufSize, stringlen, str);
        public void glGetNamedStringivARB(int namelen, byte* name, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<int, byte*, uint, int*, void>)vtable.glGetNamedStringivARB)(namelen, name, pname, parameters);
        public void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glGetNextPerfQueryIdINTEL)(queryId, nextQueryId);
        public void glGetObjectBufferfvATI(uint buffer, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetObjectBufferfvATI)(buffer, pname, parameters);
        public void glGetObjectBufferivATI(uint buffer, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetObjectBufferivATI)(buffer, pname, parameters);
        public void glGetObjectLabel(uint identifier, uint name, int bufSize, int* length, byte* label) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)vtable.glGetObjectLabel)(identifier, name, bufSize, length, label);
        public void glGetObjectLabelEXT(uint type, uint obj, int bufSize, int* length, byte* label) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)vtable.glGetObjectLabelEXT)(type, obj, bufSize, length, label);
        public void glGetObjectLabelKHR(uint identifier, uint name, int bufSize, int* length, byte* label) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)vtable.glGetObjectLabelKHR)(identifier, name, bufSize, length, label);
        public void glGetObjectParameterfvARB(nint obj, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<nint, uint, float*, void>)vtable.glGetObjectParameterfvARB)(obj, pname, parameters);
        public void glGetObjectParameterivAPPLE(uint objectType, uint name, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetObjectParameterivAPPLE)(objectType, name, pname, parameters);
        public void glGetObjectParameterivARB(nint obj, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<nint, uint, int*, void>)vtable.glGetObjectParameterivARB)(obj, pname, parameters);
        public void glGetObjectPtrLabel(void* ptr, int bufSize, int* length, byte* label) => ((delegate* unmanaged[Cdecl]<void*, int, int*, byte*, void>)vtable.glGetObjectPtrLabel)(ptr, bufSize, length, label);
        public void glGetObjectPtrLabelKHR(void* ptr, int bufSize, int* length, byte* label) => ((delegate* unmanaged[Cdecl]<void*, int, int*, byte*, void>)vtable.glGetObjectPtrLabelKHR)(ptr, bufSize, length, label);
        public void glGetOcclusionQueryivNV(uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetOcclusionQueryivNV)(id, pname, parameters);
        public void glGetOcclusionQueryuivNV(uint id, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetOcclusionQueryuivNV)(id, pname, parameters);
        public void glGetPathColorGenfvNV(uint color, uint pname, float* value) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetPathColorGenfvNV)(color, pname, value);
        public void glGetPathColorGenivNV(uint color, uint pname, int* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetPathColorGenivNV)(color, pname, value);
        public void glGetPathCommandsNV(uint path, byte* commands) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glGetPathCommandsNV)(path, commands);
        public void glGetPathCoordsNV(uint path, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetPathCoordsNV)(path, coords);
        public void glGetPathDashArrayNV(uint path, float* dashArray) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetPathDashArrayNV)(path, dashArray);
        public float glGetPathLengthNV(uint path, int startSegment, int numSegments) => ((delegate* unmanaged[Cdecl]<uint, int, int, float>)vtable.glGetPathLengthNV)(path, startSegment, numSegments);
        public void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, float*, void>)vtable.glGetPathMetricRangeNV)(metricQueryMask, firstPathName, numPaths, stride, metrics);
        public void glGetPathMetricsNV(uint metricQueryMask, int numPaths, uint pathNameType, void* paths, uint pathBase, int stride, float* metrics) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, uint, int, float*, void>)vtable.glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        public void glGetPathParameterfvNV(uint path, uint pname, float* value) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetPathParameterfvNV)(path, pname, value);
        public void glGetPathParameterivNV(uint path, uint pname, int* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetPathParameterivNV)(path, pname, value);
        public void glGetPathSpacingNV(uint pathListMode, int numPaths, uint pathNameType, void* paths, uint pathBase, float advanceScale, float kerningScale, uint transformType, float* returnedSpacing) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, uint, float, float, uint, float*, void>)vtable.glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        public void glGetPathTexGenfvNV(uint texCoordSet, uint pname, float* value) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetPathTexGenfvNV)(texCoordSet, pname, value);
        public void glGetPathTexGenivNV(uint texCoordSet, uint pname, int* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetPathTexGenivNV)(texCoordSet, pname, value);
        public void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void>)vtable.glGetPerfCounterInfoINTEL)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        public void glGetPerfMonitorCounterDataAMD(uint monitor, uint pname, int dataSize, uint* data, int* bytesWritten) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, int*, void>)vtable.glGetPerfMonitorCounterDataAMD)(monitor, pname, dataSize, data, bytesWritten);
        public void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, uint pname, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glGetPerfMonitorCounterInfoAMD)(group, counter, pname, data);
        public void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, byte* counterString) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)vtable.glGetPerfMonitorCounterStringAMD)(group, counter, bufSize, length, counterString);
        public void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters) => ((delegate* unmanaged[Cdecl]<uint, int*, int*, int, uint*, void>)vtable.glGetPerfMonitorCountersAMD)(group, numCounters, maxActiveCounters, counterSize, counters);
        public void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, byte* groupString) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetPerfMonitorGroupStringAMD)(group, bufSize, length, groupString);
        public void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups) => ((delegate* unmanaged[Cdecl]<int*, int, uint*, void>)vtable.glGetPerfMonitorGroupsAMD)(numGroups, groupsSize, groups);
        public void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, void* data, uint* bytesWritten) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void*, uint*, void>)vtable.glGetPerfQueryDataINTEL)(queryHandle, flags, dataSize, data, bytesWritten);
        public void glGetPerfQueryIdByNameINTEL(byte* queryName, uint* queryId) => ((delegate* unmanaged[Cdecl]<byte*, uint*, void>)vtable.glGetPerfQueryIdByNameINTEL)(queryName, queryId);
        public void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, uint*, uint*, uint*, uint*, void>)vtable.glGetPerfQueryInfoINTEL)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        public void glGetPixelMapfv(uint map, float* values) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetPixelMapfv)(map, values);
        public void glGetPixelMapuiv(uint map, uint* values) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glGetPixelMapuiv)(map, values);
        public void glGetPixelMapusv(uint map, ushort* values) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glGetPixelMapusv)(map, values);
        public void glGetPixelMapxv(uint map, int size, int* values) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glGetPixelMapxv)(map, size, values);
        public void glGetPixelTexGenParameterfvSGIS(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetPixelTexGenParameterfvSGIS)(pname, parameters);
        public void glGetPixelTexGenParameterivSGIS(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetPixelTexGenParameterivSGIS)(pname, parameters);
        public void glGetPixelTransformParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetPixelTransformParameterfvEXT)(target, pname, parameters);
        public void glGetPixelTransformParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetPixelTransformParameterivEXT)(target, pname, parameters);
        public void glGetPointerIndexedvEXT(uint target, uint index, void** data) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetPointerIndexedvEXT)(target, index, data);
        public void glGetPointeri_vEXT(uint pname, uint index, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetPointeri_vEXT)(pname, index, parameters);
        public void glGetPointerv(uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, void**, void>)vtable.glGetPointerv)(pname, parameters);
        public void glGetPointervEXT(uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, void**, void>)vtable.glGetPointervEXT)(pname, parameters);
        public void glGetPointervKHR(uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, void**, void>)vtable.glGetPointervKHR)(pname, parameters);
        public void glGetPolygonStipple(byte* mask) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glGetPolygonStipple)(mask);
        public void glGetProgramBinary(uint program, int bufSize, int* length, uint* binaryFormat, void* binary) => ((delegate* unmanaged[Cdecl]<uint, int, int*, uint*, void*, void>)vtable.glGetProgramBinary)(program, bufSize, length, binaryFormat, binary);
        public void glGetProgramBinaryOES(uint program, int bufSize, int* length, uint* binaryFormat, void* binary) => ((delegate* unmanaged[Cdecl]<uint, int, int*, uint*, void*, void>)vtable.glGetProgramBinaryOES)(program, bufSize, length, binaryFormat, binary);
        public void glGetProgramEnvParameterIivNV(uint target, uint index, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramEnvParameterIivNV)(target, index, parameters);
        public void glGetProgramEnvParameterIuivNV(uint target, uint index, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetProgramEnvParameterIuivNV)(target, index, parameters);
        public void glGetProgramEnvParameterdvARB(uint target, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetProgramEnvParameterdvARB)(target, index, parameters);
        public void glGetProgramEnvParameterfvARB(uint target, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetProgramEnvParameterfvARB)(target, index, parameters);
        public void glGetProgramInfoLog(uint program, int bufSize, int* length, byte* infoLog) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetProgramInfoLog)(program, bufSize, length, infoLog);
        public void glGetProgramInterfaceiv(uint program, uint programInterface, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetProgramInterfaceiv)(program, programInterface, pname, parameters);
        public void glGetProgramLocalParameterIivNV(uint target, uint index, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramLocalParameterIivNV)(target, index, parameters);
        public void glGetProgramLocalParameterIuivNV(uint target, uint index, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetProgramLocalParameterIuivNV)(target, index, parameters);
        public void glGetProgramLocalParameterdvARB(uint target, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetProgramLocalParameterdvARB)(target, index, parameters);
        public void glGetProgramLocalParameterfvARB(uint target, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetProgramLocalParameterfvARB)(target, index, parameters);
        public void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, double*, void>)vtable.glGetProgramNamedParameterdvNV)(id, len, name, parameters);
        public void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, float*, void>)vtable.glGetProgramNamedParameterfvNV)(id, len, name, parameters);
        public void glGetProgramParameterdvNV(uint target, uint index, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glGetProgramParameterdvNV)(target, index, pname, parameters);
        public void glGetProgramParameterfvNV(uint target, uint index, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetProgramParameterfvNV)(target, index, pname, parameters);
        public void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, byte* infoLog) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);
        public void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, int* length, byte* infoLog) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetProgramPipelineInfoLogEXT)(pipeline, bufSize, length, infoLog);
        public void glGetProgramPipelineiv(uint pipeline, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramPipelineiv)(pipeline, pname, parameters);
        public void glGetProgramPipelineivEXT(uint pipeline, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramPipelineivEXT)(pipeline, pname, parameters);
        public uint glGetProgramResourceIndex(uint program, uint programInterface, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, uint>)vtable.glGetProgramResourceIndex)(program, programInterface, name);
        public int glGetProgramResourceLocation(uint program, uint programInterface, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, int>)vtable.glGetProgramResourceLocation)(program, programInterface, name);
        public int glGetProgramResourceLocationIndex(uint program, uint programInterface, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, int>)vtable.glGetProgramResourceLocationIndex)(program, programInterface, name);
        public int glGetProgramResourceLocationIndexEXT(uint program, uint programInterface, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, int>)vtable.glGetProgramResourceLocationIndexEXT)(program, programInterface, name);
        public void glGetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, int* length, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int*, byte*, void>)vtable.glGetProgramResourceName)(program, programInterface, index, bufSize, length, name);
        public void glGetProgramResourcefvNV(uint program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, int, int*, float*, void>)vtable.glGetProgramResourcefvNV)(program, programInterface, index, propCount, props, count, length, parameters);
        public void glGetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, int, int*, int*, void>)vtable.glGetProgramResourceiv)(program, programInterface, index, propCount, props, count, length, parameters);
        public void glGetProgramStageiv(uint program, uint shadertype, uint pname, int* values) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetProgramStageiv)(program, shadertype, pname, values);
        public void glGetProgramStringARB(uint target, uint pname, void* str) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, void>)vtable.glGetProgramStringARB)(target, pname, str);
        public void glGetProgramStringNV(uint id, uint pname, byte* program) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetProgramStringNV)(id, pname, program);
        public void glGetProgramSubroutineParameteruivNV(uint target, uint index, uint* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetProgramSubroutineParameteruivNV)(target, index, param);
        public void glGetProgramiv(uint program, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramiv)(program, pname, parameters);
        public void glGetProgramivARB(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramivARB)(target, pname, parameters);
        public void glGetProgramivNV(uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetProgramivNV)(id, pname, parameters);
        public void glGetQueryBufferObjecti64v(uint id, uint buffer, uint pname, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glGetQueryBufferObjecti64v)(id, buffer, pname, offset);
        public void glGetQueryBufferObjectiv(uint id, uint buffer, uint pname, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glGetQueryBufferObjectiv)(id, buffer, pname, offset);
        public void glGetQueryBufferObjectui64v(uint id, uint buffer, uint pname, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glGetQueryBufferObjectui64v)(id, buffer, pname, offset);
        public void glGetQueryBufferObjectuiv(uint id, uint buffer, uint pname, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)vtable.glGetQueryBufferObjectuiv)(id, buffer, pname, offset);
        public void glGetQueryIndexediv(uint target, uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetQueryIndexediv)(target, index, pname, parameters);
        public void glGetQueryObjecti64v(uint id, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetQueryObjecti64v)(id, pname, parameters);
        public void glGetQueryObjecti64vEXT(uint id, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetQueryObjecti64vEXT)(id, pname, parameters);
        public void glGetQueryObjectiv(uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetQueryObjectiv)(id, pname, parameters);
        public void glGetQueryObjectivARB(uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetQueryObjectivARB)(id, pname, parameters);
        public void glGetQueryObjectivEXT(uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetQueryObjectivEXT)(id, pname, parameters);
        public void glGetQueryObjectui64v(uint id, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetQueryObjectui64v)(id, pname, parameters);
        public void glGetQueryObjectui64vEXT(uint id, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetQueryObjectui64vEXT)(id, pname, parameters);
        public void glGetQueryObjectuiv(uint id, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetQueryObjectuiv)(id, pname, parameters);
        public void glGetQueryObjectuivARB(uint id, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetQueryObjectuivARB)(id, pname, parameters);
        public void glGetQueryObjectuivEXT(uint id, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetQueryObjectuivEXT)(id, pname, parameters);
        public void glGetQueryiv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetQueryiv)(target, pname, parameters);
        public void glGetQueryivARB(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetQueryivARB)(target, pname, parameters);
        public void glGetQueryivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetQueryivEXT)(target, pname, parameters);
        public void glGetRenderbufferParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetRenderbufferParameteriv)(target, pname, parameters);
        public void glGetRenderbufferParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetRenderbufferParameterivEXT)(target, pname, parameters);
        public void glGetRenderbufferParameterivOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetRenderbufferParameterivOES)(target, pname, parameters);
        public void glGetSamplerParameterIiv(uint sampler, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetSamplerParameterIiv)(sampler, pname, parameters);
        public void glGetSamplerParameterIivEXT(uint sampler, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetSamplerParameterIivEXT)(sampler, pname, parameters);
        public void glGetSamplerParameterIivOES(uint sampler, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetSamplerParameterIivOES)(sampler, pname, parameters);
        public void glGetSamplerParameterIuiv(uint sampler, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetSamplerParameterIuiv)(sampler, pname, parameters);
        public void glGetSamplerParameterIuivEXT(uint sampler, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetSamplerParameterIuivEXT)(sampler, pname, parameters);
        public void glGetSamplerParameterIuivOES(uint sampler, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetSamplerParameterIuivOES)(sampler, pname, parameters);
        public void glGetSamplerParameterfv(uint sampler, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetSamplerParameterfv)(sampler, pname, parameters);
        public void glGetSamplerParameteriv(uint sampler, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetSamplerParameteriv)(sampler, pname, parameters);
        public void glGetSemaphoreParameterivNV(uint semaphore, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetSemaphoreParameterivNV)(semaphore, pname, parameters);
        public void glGetSemaphoreParameterui64vEXT(uint semaphore, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetSemaphoreParameterui64vEXT)(semaphore, pname, parameters);
        public void glGetSeparableFilter(uint target, uint format, uint type, void* row, void* column, void* span) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void*, void*, void>)vtable.glGetSeparableFilter)(target, format, type, row, column, span);
        public void glGetSeparableFilterEXT(uint target, uint format, uint type, void* row, void* column, void* span) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void*, void*, void>)vtable.glGetSeparableFilterEXT)(target, format, type, row, column, span);
        public void glGetShaderInfoLog(uint shader, int bufSize, int* length, byte* infoLog) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetShaderInfoLog)(shader, bufSize, length, infoLog);
        public void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, int* range, int* precision) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, int*, void>)vtable.glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);
        public void glGetShaderSource(uint shader, int bufSize, int* length, byte* source) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetShaderSource)(shader, bufSize, length, source);
        public void glGetShaderSourceARB(nint obj, int maxLength, int* length, byte* source) => ((delegate* unmanaged[Cdecl]<nint, int, int*, byte*, void>)vtable.glGetShaderSourceARB)(obj, maxLength, length, source);
        public void glGetShaderiv(uint shader, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetShaderiv)(shader, pname, parameters);
        public void glGetShadingRateImagePaletteNV(uint viewport, uint entry, uint* rate) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetShadingRateImagePaletteNV)(viewport, entry, rate);
        public void glGetShadingRateSampleLocationivNV(uint rate, uint samples, uint index, int* location) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetShadingRateSampleLocationivNV)(rate, samples, index, location);
        public void glGetSharpenTexFuncSGIS(uint target, float* points) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetSharpenTexFuncSGIS)(target, points);
        public ushort glGetStageIndexNV(uint shadertype) => ((delegate* unmanaged[Cdecl]<uint, ushort>)vtable.glGetStageIndexNV)(shadertype);
        public byte* glGetString(uint name) => ((delegate* unmanaged[Cdecl]<uint, byte*>)vtable.glGetString)(name);
        public byte* glGetStringi(uint name, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*>)vtable.glGetStringi)(name, index);
        public uint glGetSubroutineIndex(uint program, uint shadertype, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, uint>)vtable.glGetSubroutineIndex)(program, shadertype, name);
        public int glGetSubroutineUniformLocation(uint program, uint shadertype, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, int>)vtable.glGetSubroutineUniformLocation)(program, shadertype, name);
        public void glGetSynciv(nint sync, uint pname, int count, int* length, int* values) => ((delegate* unmanaged[Cdecl]<nint, uint, int, int*, int*, void>)vtable.glGetSynciv)(sync, pname, count, length, values);
        public void glGetSyncivAPPLE(nint sync, uint pname, int count, int* length, int* values) => ((delegate* unmanaged[Cdecl]<nint, uint, int, int*, int*, void>)vtable.glGetSyncivAPPLE)(sync, pname, count, length, values);
        public void glGetTexBumpParameterfvATI(uint pname, float* param) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetTexBumpParameterfvATI)(pname, param);
        public void glGetTexBumpParameterivATI(uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glGetTexBumpParameterivATI)(pname, param);
        public void glGetTexEnvfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetTexEnvfv)(target, pname, parameters);
        public void glGetTexEnviv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexEnviv)(target, pname, parameters);
        public void glGetTexEnvxv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexEnvxv)(target, pname, parameters);
        public void glGetTexEnvxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexEnvxvOES)(target, pname, parameters);
        public void glGetTexFilterFuncSGIS(uint target, uint filter, float* weights) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetTexFilterFuncSGIS)(target, filter, weights);
        public void glGetTexGendv(uint coord, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetTexGendv)(coord, pname, parameters);
        public void glGetTexGenfv(uint coord, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetTexGenfv)(coord, pname, parameters);
        public void glGetTexGenfvOES(uint coord, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetTexGenfvOES)(coord, pname, parameters);
        public void glGetTexGeniv(uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexGeniv)(coord, pname, parameters);
        public void glGetTexGenivOES(uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexGenivOES)(coord, pname, parameters);
        public void glGetTexGenxvOES(uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexGenxvOES)(coord, pname, parameters);
        public void glGetTexImage(uint target, int level, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void*, void>)vtable.glGetTexImage)(target, level, format, type, pixels);
        public void glGetTexLevelParameterfv(uint target, int level, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint, float*, void>)vtable.glGetTexLevelParameterfv)(target, level, pname, parameters);
        public void glGetTexLevelParameteriv(uint target, int level, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int*, void>)vtable.glGetTexLevelParameteriv)(target, level, pname, parameters);
        public void glGetTexLevelParameterxvOES(uint target, int level, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int*, void>)vtable.glGetTexLevelParameterxvOES)(target, level, pname, parameters);
        public void glGetTexParameterIiv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexParameterIiv)(target, pname, parameters);
        public void glGetTexParameterIivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexParameterIivEXT)(target, pname, parameters);
        public void glGetTexParameterIivOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexParameterIivOES)(target, pname, parameters);
        public void glGetTexParameterIuiv(uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetTexParameterIuiv)(target, pname, parameters);
        public void glGetTexParameterIuivEXT(uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetTexParameterIuivEXT)(target, pname, parameters);
        public void glGetTexParameterIuivOES(uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetTexParameterIuivOES)(target, pname, parameters);
        public void glGetTexParameterPointervAPPLE(uint target, uint pname, void** parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetTexParameterPointervAPPLE)(target, pname, parameters);
        public void glGetTexParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetTexParameterfv)(target, pname, parameters);
        public void glGetTexParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexParameteriv)(target, pname, parameters);
        public void glGetTexParameterxv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexParameterxv)(target, pname, parameters);
        public void glGetTexParameterxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTexParameterxvOES)(target, pname, parameters);
        public ulong glGetTextureHandleARB(uint texture) => ((delegate* unmanaged[Cdecl]<uint, ulong>)vtable.glGetTextureHandleARB)(texture);
        public ulong glGetTextureHandleIMG(uint texture) => ((delegate* unmanaged[Cdecl]<uint, ulong>)vtable.glGetTextureHandleIMG)(texture);
        public ulong glGetTextureHandleNV(uint texture) => ((delegate* unmanaged[Cdecl]<uint, ulong>)vtable.glGetTextureHandleNV)(texture);
        public void glGetTextureImage(uint texture, int level, uint format, uint type, int bufSize, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, int, void*, void>)vtable.glGetTextureImage)(texture, level, format, type, bufSize, pixels);
        public void glGetTextureImageEXT(uint texture, uint target, int level, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)vtable.glGetTextureImageEXT)(texture, target, level, format, type, pixels);
        public void glGetTextureLevelParameterfv(uint texture, int level, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint, float*, void>)vtable.glGetTextureLevelParameterfv)(texture, level, pname, parameters);
        public void glGetTextureLevelParameterfvEXT(uint texture, uint target, int level, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, float*, void>)vtable.glGetTextureLevelParameterfvEXT)(texture, target, level, pname, parameters);
        public void glGetTextureLevelParameteriv(uint texture, int level, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int*, void>)vtable.glGetTextureLevelParameteriv)(texture, level, pname, parameters);
        public void glGetTextureLevelParameterivEXT(uint texture, uint target, int level, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int*, void>)vtable.glGetTextureLevelParameterivEXT)(texture, target, level, pname, parameters);
        public void glGetTextureParameterIiv(uint texture, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTextureParameterIiv)(texture, pname, parameters);
        public void glGetTextureParameterIivEXT(uint texture, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetTextureParameterIivEXT)(texture, target, pname, parameters);
        public void glGetTextureParameterIuiv(uint texture, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetTextureParameterIuiv)(texture, pname, parameters);
        public void glGetTextureParameterIuivEXT(uint texture, uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glGetTextureParameterIuivEXT)(texture, target, pname, parameters);
        public void glGetTextureParameterfv(uint texture, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetTextureParameterfv)(texture, pname, parameters);
        public void glGetTextureParameterfvEXT(uint texture, uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetTextureParameterfvEXT)(texture, target, pname, parameters);
        public void glGetTextureParameteriv(uint texture, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTextureParameteriv)(texture, pname, parameters);
        public void glGetTextureParameterivEXT(uint texture, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetTextureParameterivEXT)(texture, target, pname, parameters);
        public ulong glGetTextureSamplerHandleARB(uint texture, uint sampler) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong>)vtable.glGetTextureSamplerHandleARB)(texture, sampler);
        public ulong glGetTextureSamplerHandleIMG(uint texture, uint sampler) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong>)vtable.glGetTextureSamplerHandleIMG)(texture, sampler);
        public ulong glGetTextureSamplerHandleNV(uint texture, uint sampler) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong>)vtable.glGetTextureSamplerHandleNV)(texture, sampler);
        public void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, int bufSize, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, int, void*, void>)vtable.glGetTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        public void glGetTrackMatrixivNV(uint target, uint address, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetTrackMatrixivNV)(target, address, pname, parameters);
        public void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);
        public void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, int*, uint*, byte*, void>)vtable.glGetTransformFeedbackVaryingEXT)(program, index, bufSize, length, size, type, name);
        public void glGetTransformFeedbackVaryingNV(uint program, uint index, int* location) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTransformFeedbackVaryingNV)(program, index, location);
        public void glGetTransformFeedbacki64_v(uint xfb, uint pname, uint index, long* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, long*, void>)vtable.glGetTransformFeedbacki64_v)(xfb, pname, index, param);
        public void glGetTransformFeedbacki_v(uint xfb, uint pname, uint index, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetTransformFeedbacki_v)(xfb, pname, index, param);
        public void glGetTransformFeedbackiv(uint xfb, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetTransformFeedbackiv)(xfb, pname, param);
        public void glGetTranslatedShaderSourceANGLE(uint shader, int bufSize, int* length, byte* source) => ((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)vtable.glGetTranslatedShaderSourceANGLE)(shader, bufSize, length, source);
        public uint glGetUniformBlockIndex(uint program, byte* uniformBlockName) => ((delegate* unmanaged[Cdecl]<uint, byte*, uint>)vtable.glGetUniformBlockIndex)(program, uniformBlockName);
        public int glGetUniformBufferSizeEXT(uint program, int location) => ((delegate* unmanaged[Cdecl]<uint, int, int>)vtable.glGetUniformBufferSizeEXT)(program, location);
        public void glGetUniformIndices(uint program, int uniformCount, byte** uniformNames, uint* uniformIndices) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, uint*, void>)vtable.glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);
        public int glGetUniformLocation(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetUniformLocation)(program, name);
        public int glGetUniformLocationARB(nint programObj, byte* name) => ((delegate* unmanaged[Cdecl]<nint, byte*, int>)vtable.glGetUniformLocationARB)(programObj, name);
        public nint glGetUniformOffsetEXT(uint program, int location) => ((delegate* unmanaged[Cdecl]<uint, int, nint>)vtable.glGetUniformOffsetEXT)(program, location);
        public void glGetUniformSubroutineuiv(uint shadertype, int location, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glGetUniformSubroutineuiv)(shadertype, location, parameters);
        public void glGetUniformdv(uint program, int location, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glGetUniformdv)(program, location, parameters);
        public void glGetUniformfv(uint program, int location, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glGetUniformfv)(program, location, parameters);
        public void glGetUniformfvARB(nint programObj, int location, float* parameters) => ((delegate* unmanaged[Cdecl]<nint, int, float*, void>)vtable.glGetUniformfvARB)(programObj, location, parameters);
        public void glGetUniformi64vARB(uint program, int location, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, long*, void>)vtable.glGetUniformi64vARB)(program, location, parameters);
        public void glGetUniformi64vNV(uint program, int location, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, long*, void>)vtable.glGetUniformi64vNV)(program, location, parameters);
        public void glGetUniformiv(uint program, int location, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glGetUniformiv)(program, location, parameters);
        public void glGetUniformivARB(nint programObj, int location, int* parameters) => ((delegate* unmanaged[Cdecl]<nint, int, int*, void>)vtable.glGetUniformivARB)(programObj, location, parameters);
        public void glGetUniformui64vARB(uint program, int location, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, ulong*, void>)vtable.glGetUniformui64vARB)(program, location, parameters);
        public void glGetUniformui64vNV(uint program, int location, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, ulong*, void>)vtable.glGetUniformui64vNV)(program, location, parameters);
        public void glGetUniformuiv(uint program, int location, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glGetUniformuiv)(program, location, parameters);
        public void glGetUniformuivEXT(uint program, int location, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glGetUniformuivEXT)(program, location, parameters);
        public void glGetUnsignedBytevEXT(uint pname, byte* data) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glGetUnsignedBytevEXT)(pname, data);
        public void glGetUnsignedBytei_vEXT(uint target, uint index, byte* data) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetUnsignedBytei_vEXT)(target, index, data);
        public void glGetVariantArrayObjectfvATI(uint id, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetVariantArrayObjectfvATI)(id, pname, parameters);
        public void glGetVariantArrayObjectivATI(uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVariantArrayObjectivATI)(id, pname, parameters);
        public void glGetVariantBooleanvEXT(uint id, uint value, byte* data) => ((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)vtable.glGetVariantBooleanvEXT)(id, value, data);
        public void glGetVariantFloatvEXT(uint id, uint value, float* data) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetVariantFloatvEXT)(id, value, data);
        public void glGetVariantIntegervEXT(uint id, uint value, int* data) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVariantIntegervEXT)(id, value, data);
        public void glGetVariantPointervEXT(uint id, uint value, void** data) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetVariantPointervEXT)(id, value, data);
        public int glGetVaryingLocationNV(uint program, byte* name) => ((delegate* unmanaged[Cdecl]<uint, byte*, int>)vtable.glGetVaryingLocationNV)(program, name);
        public void glGetVertexArrayIndexed64iv(uint vaobj, uint index, uint pname, long* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, long*, void>)vtable.glGetVertexArrayIndexed64iv)(vaobj, index, pname, param);
        public void glGetVertexArrayIndexediv(uint vaobj, uint index, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetVertexArrayIndexediv)(vaobj, index, pname, param);
        public void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param);
        public void glGetVertexArrayIntegervEXT(uint vaobj, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexArrayIntegervEXT)(vaobj, pname, param);
        public void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, uint pname, void** param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void**, void>)vtable.glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param);
        public void glGetVertexArrayPointervEXT(uint vaobj, uint pname, void** param) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetVertexArrayPointervEXT)(vaobj, pname, param);
        public void glGetVertexArrayiv(uint vaobj, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexArrayiv)(vaobj, pname, param);
        public void glGetVertexAttribArrayObjectfvATI(uint index, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetVertexAttribArrayObjectfvATI)(index, pname, parameters);
        public void glGetVertexAttribArrayObjectivATI(uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexAttribArrayObjectivATI)(index, pname, parameters);
        public void glGetVertexAttribIiv(uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexAttribIiv)(index, pname, parameters);
        public void glGetVertexAttribIivEXT(uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexAttribIivEXT)(index, pname, parameters);
        public void glGetVertexAttribIuiv(uint index, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetVertexAttribIuiv)(index, pname, parameters);
        public void glGetVertexAttribIuivEXT(uint index, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetVertexAttribIuivEXT)(index, pname, parameters);
        public void glGetVertexAttribLdv(uint index, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetVertexAttribLdv)(index, pname, parameters);
        public void glGetVertexAttribLdvEXT(uint index, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetVertexAttribLdvEXT)(index, pname, parameters);
        public void glGetVertexAttribLi64vNV(uint index, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetVertexAttribLi64vNV)(index, pname, parameters);
        public void glGetVertexAttribLui64vARB(uint index, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetVertexAttribLui64vARB)(index, pname, parameters);
        public void glGetVertexAttribLui64vNV(uint index, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetVertexAttribLui64vNV)(index, pname, parameters);
        public void glGetVertexAttribPointerv(uint index, uint pname, void** pointer) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetVertexAttribPointerv)(index, pname, pointer);
        public void glGetVertexAttribPointervARB(uint index, uint pname, void** pointer) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetVertexAttribPointervARB)(index, pname, pointer);
        public void glGetVertexAttribPointervNV(uint index, uint pname, void** pointer) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, void>)vtable.glGetVertexAttribPointervNV)(index, pname, pointer);
        public void glGetVertexAttribdv(uint index, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetVertexAttribdv)(index, pname, parameters);
        public void glGetVertexAttribdvARB(uint index, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetVertexAttribdvARB)(index, pname, parameters);
        public void glGetVertexAttribdvNV(uint index, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glGetVertexAttribdvNV)(index, pname, parameters);
        public void glGetVertexAttribfv(uint index, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetVertexAttribfv)(index, pname, parameters);
        public void glGetVertexAttribfvARB(uint index, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetVertexAttribfvARB)(index, pname, parameters);
        public void glGetVertexAttribfvNV(uint index, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glGetVertexAttribfvNV)(index, pname, parameters);
        public void glGetVertexAttribiv(uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexAttribiv)(index, pname, parameters);
        public void glGetVertexAttribivARB(uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexAttribivARB)(index, pname, parameters);
        public void glGetVertexAttribivNV(uint index, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVertexAttribivNV)(index, pname, parameters);
        public void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glGetVideoCaptureStreamdvNV)(video_capture_slot, stream, pname, parameters);
        public void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glGetVideoCaptureStreamfvNV)(video_capture_slot, stream, pname, parameters);
        public void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glGetVideoCaptureStreamivNV)(video_capture_slot, stream, pname, parameters);
        public void glGetVideoCaptureivNV(uint video_capture_slot, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVideoCaptureivNV)(video_capture_slot, pname, parameters);
        public void glGetVideoi64vNV(uint video_slot, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, long*, void>)vtable.glGetVideoi64vNV)(video_slot, pname, parameters);
        public void glGetVideoivNV(uint video_slot, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetVideoivNV)(video_slot, pname, parameters);
        public void glGetVideoui64vNV(uint video_slot, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glGetVideoui64vNV)(video_slot, pname, parameters);
        public void glGetVideouivNV(uint video_slot, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glGetVideouivNV)(video_slot, pname, parameters);
        public void glGetnColorTable(uint target, uint format, uint type, int bufSize, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, void>)vtable.glGetnColorTable)(target, format, type, bufSize, table);
        public void glGetnColorTableARB(uint target, uint format, uint type, int bufSize, void* table) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, void>)vtable.glGetnColorTableARB)(target, format, type, bufSize, table);
        public void glGetnCompressedTexImage(uint target, int lod, int bufSize, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, void*, void>)vtable.glGetnCompressedTexImage)(target, lod, bufSize, pixels);
        public void glGetnCompressedTexImageARB(uint target, int lod, int bufSize, void* img) => ((delegate* unmanaged[Cdecl]<uint, int, int, void*, void>)vtable.glGetnCompressedTexImageARB)(target, lod, bufSize, img);
        public void glGetnConvolutionFilter(uint target, uint format, uint type, int bufSize, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, void>)vtable.glGetnConvolutionFilter)(target, format, type, bufSize, image);
        public void glGetnConvolutionFilterARB(uint target, uint format, uint type, int bufSize, void* image) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, void>)vtable.glGetnConvolutionFilterARB)(target, format, type, bufSize, image);
        public void glGetnHistogram(uint target, byte reset, uint format, uint type, int bufSize, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, int, void*, void>)vtable.glGetnHistogram)(target, reset, format, type, bufSize, values);
        public void glGetnHistogramARB(uint target, byte reset, uint format, uint type, int bufSize, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, int, void*, void>)vtable.glGetnHistogramARB)(target, reset, format, type, bufSize, values);
        public void glGetnMapdv(uint target, uint query, int bufSize, double* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, double*, void>)vtable.glGetnMapdv)(target, query, bufSize, v);
        public void glGetnMapdvARB(uint target, uint query, int bufSize, double* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, double*, void>)vtable.glGetnMapdvARB)(target, query, bufSize, v);
        public void glGetnMapfv(uint target, uint query, int bufSize, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glGetnMapfv)(target, query, bufSize, v);
        public void glGetnMapfvARB(uint target, uint query, int bufSize, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glGetnMapfvARB)(target, query, bufSize, v);
        public void glGetnMapiv(uint target, uint query, int bufSize, int* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, void>)vtable.glGetnMapiv)(target, query, bufSize, v);
        public void glGetnMapivARB(uint target, uint query, int bufSize, int* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, void>)vtable.glGetnMapivARB)(target, query, bufSize, v);
        public void glGetnMinmax(uint target, byte reset, uint format, uint type, int bufSize, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, int, void*, void>)vtable.glGetnMinmax)(target, reset, format, type, bufSize, values);
        public void glGetnMinmaxARB(uint target, byte reset, uint format, uint type, int bufSize, void* values) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, int, void*, void>)vtable.glGetnMinmaxARB)(target, reset, format, type, bufSize, values);
        public void glGetnPixelMapfv(uint map, int bufSize, float* values) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glGetnPixelMapfv)(map, bufSize, values);
        public void glGetnPixelMapfvARB(uint map, int bufSize, float* values) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glGetnPixelMapfvARB)(map, bufSize, values);
        public void glGetnPixelMapuiv(uint map, int bufSize, uint* values) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glGetnPixelMapuiv)(map, bufSize, values);
        public void glGetnPixelMapuivARB(uint map, int bufSize, uint* values) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glGetnPixelMapuivARB)(map, bufSize, values);
        public void glGetnPixelMapusv(uint map, int bufSize, ushort* values) => ((delegate* unmanaged[Cdecl]<uint, int, ushort*, void>)vtable.glGetnPixelMapusv)(map, bufSize, values);
        public void glGetnPixelMapusvARB(uint map, int bufSize, ushort* values) => ((delegate* unmanaged[Cdecl]<uint, int, ushort*, void>)vtable.glGetnPixelMapusvARB)(map, bufSize, values);
        public void glGetnPolygonStipple(int bufSize, byte* pattern) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glGetnPolygonStipple)(bufSize, pattern);
        public void glGetnPolygonStippleARB(int bufSize, byte* pattern) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glGetnPolygonStippleARB)(bufSize, pattern);
        public void glGetnSeparableFilter(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, int, void*, void*, void>)vtable.glGetnSeparableFilter)(target, format, type, rowBufSize, row, columnBufSize, column, span);
        public void glGetnSeparableFilterARB(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, int, void*, void*, void>)vtable.glGetnSeparableFilterARB)(target, format, type, rowBufSize, row, columnBufSize, column, span);
        public void glGetnTexImage(uint target, int level, uint format, uint type, int bufSize, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, int, void*, void>)vtable.glGetnTexImage)(target, level, format, type, bufSize, pixels);
        public void glGetnTexImageARB(uint target, int level, uint format, uint type, int bufSize, void* img) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, int, void*, void>)vtable.glGetnTexImageARB)(target, level, format, type, bufSize, img);
        public void glGetnUniformdv(uint program, int location, int bufSize, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glGetnUniformdv)(program, location, bufSize, parameters);
        public void glGetnUniformdvARB(uint program, int location, int bufSize, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glGetnUniformdvARB)(program, location, bufSize, parameters);
        public void glGetnUniformfv(uint program, int location, int bufSize, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glGetnUniformfv)(program, location, bufSize, parameters);
        public void glGetnUniformfvARB(uint program, int location, int bufSize, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glGetnUniformfvARB)(program, location, bufSize, parameters);
        public void glGetnUniformfvEXT(uint program, int location, int bufSize, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glGetnUniformfvEXT)(program, location, bufSize, parameters);
        public void glGetnUniformfvKHR(uint program, int location, int bufSize, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glGetnUniformfvKHR)(program, location, bufSize, parameters);
        public void glGetnUniformi64vARB(uint program, int location, int bufSize, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glGetnUniformi64vARB)(program, location, bufSize, parameters);
        public void glGetnUniformiv(uint program, int location, int bufSize, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glGetnUniformiv)(program, location, bufSize, parameters);
        public void glGetnUniformivARB(uint program, int location, int bufSize, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glGetnUniformivARB)(program, location, bufSize, parameters);
        public void glGetnUniformivEXT(uint program, int location, int bufSize, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glGetnUniformivEXT)(program, location, bufSize, parameters);
        public void glGetnUniformivKHR(uint program, int location, int bufSize, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glGetnUniformivKHR)(program, location, bufSize, parameters);
        public void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glGetnUniformui64vARB)(program, location, bufSize, parameters);
        public void glGetnUniformuiv(uint program, int location, int bufSize, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glGetnUniformuiv)(program, location, bufSize, parameters);
        public void glGetnUniformuivARB(uint program, int location, int bufSize, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glGetnUniformuivARB)(program, location, bufSize, parameters);
        public void glGetnUniformuivKHR(uint program, int location, int bufSize, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glGetnUniformuivKHR)(program, location, bufSize, parameters);
        public void glGlobalAlphaFactorbSUN(sbyte factor) => ((delegate* unmanaged[Cdecl]<sbyte, void>)vtable.glGlobalAlphaFactorbSUN)(factor);
        public void glGlobalAlphaFactordSUN(double factor) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glGlobalAlphaFactordSUN)(factor);
        public void glGlobalAlphaFactorfSUN(float factor) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glGlobalAlphaFactorfSUN)(factor);
        public void glGlobalAlphaFactoriSUN(int factor) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glGlobalAlphaFactoriSUN)(factor);
        public void glGlobalAlphaFactorsSUN(short factor) => ((delegate* unmanaged[Cdecl]<short, void>)vtable.glGlobalAlphaFactorsSUN)(factor);
        public void glGlobalAlphaFactorubSUN(byte factor) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glGlobalAlphaFactorubSUN)(factor);
        public void glGlobalAlphaFactoruiSUN(uint factor) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glGlobalAlphaFactoruiSUN)(factor);
        public void glGlobalAlphaFactorusSUN(ushort factor) => ((delegate* unmanaged[Cdecl]<ushort, void>)vtable.glGlobalAlphaFactorusSUN)(factor);
        public void glHint(uint target, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glHint)(target, mode);
        public void glHintPGI(uint target, int mode) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glHintPGI)(target, mode);
        public void glHistogram(uint target, int width, uint internalformat, byte sink) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, void>)vtable.glHistogram)(target, width, internalformat, sink);
        public void glHistogramEXT(uint target, int width, uint internalformat, byte sink) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, void>)vtable.glHistogramEXT)(target, width, internalformat, sink);
        public void glIglooInterfaceSGIX(uint pname, void* parameters) => ((delegate* unmanaged[Cdecl]<uint, void*, void>)vtable.glIglooInterfaceSGIX)(pname, parameters);
        public void glImageTransformParameterfHP(uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glImageTransformParameterfHP)(target, pname, param);
        public void glImageTransformParameterfvHP(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glImageTransformParameterfvHP)(target, pname, parameters);
        public void glImageTransformParameteriHP(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glImageTransformParameteriHP)(target, pname, param);
        public void glImageTransformParameterivHP(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glImageTransformParameterivHP)(target, pname, parameters);
        public void glImportMemoryFdEXT(uint memory, ulong size, uint handleType, int fd) => ((delegate* unmanaged[Cdecl]<uint, ulong, uint, int, void>)vtable.glImportMemoryFdEXT)(memory, size, handleType, fd);
        public void glImportMemoryWin32HandleEXT(uint memory, ulong size, uint handleType, void* handle) => ((delegate* unmanaged[Cdecl]<uint, ulong, uint, void*, void>)vtable.glImportMemoryWin32HandleEXT)(memory, size, handleType, handle);
        public void glImportMemoryWin32NameEXT(uint memory, ulong size, uint handleType, void* name) => ((delegate* unmanaged[Cdecl]<uint, ulong, uint, void*, void>)vtable.glImportMemoryWin32NameEXT)(memory, size, handleType, name);
        public void glImportSemaphoreFdEXT(uint semaphore, uint handleType, int fd) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glImportSemaphoreFdEXT)(semaphore, handleType, fd);
        public void glImportSemaphoreWin32HandleEXT(uint semaphore, uint handleType, void* handle) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, void>)vtable.glImportSemaphoreWin32HandleEXT)(semaphore, handleType, handle);
        public void glImportSemaphoreWin32NameEXT(uint semaphore, uint handleType, void* name) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, void>)vtable.glImportSemaphoreWin32NameEXT)(semaphore, handleType, name);
        public nint glImportSyncEXT(uint external_sync_type, nint external_sync, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, uint, nint>)vtable.glImportSyncEXT)(external_sync_type, external_sync, flags);
        public void glIndexFormatNV(uint type, int stride) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glIndexFormatNV)(type, stride);
        public void glIndexFuncEXT(uint func, float reference) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glIndexFuncEXT)(func, reference);
        public void glIndexMask(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glIndexMask)(mask);
        public void glIndexMaterialEXT(uint face, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glIndexMaterialEXT)(face, mode);
        public void glIndexPointer(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glIndexPointer)(type, stride, pointer);
        public void glIndexPointerEXT(uint type, int stride, int count, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, int, void*, void>)vtable.glIndexPointerEXT)(type, stride, count, pointer);
        public void glIndexPointerListIBM(uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<uint, int, void**, int, void>)vtable.glIndexPointerListIBM)(type, stride, pointer, ptrstride);
        public void glIndexd(double c) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glIndexd)(c);
        public void glIndexdv(double* c) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glIndexdv)(c);
        public void glIndexf(float c) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glIndexf)(c);
        public void glIndexfv(float* c) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glIndexfv)(c);
        public void glIndexi(int c) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glIndexi)(c);
        public void glIndexiv(int* c) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glIndexiv)(c);
        public void glIndexs(short c) => ((delegate* unmanaged[Cdecl]<short, void>)vtable.glIndexs)(c);
        public void glIndexsv(short* c) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glIndexsv)(c);
        public void glIndexub(byte c) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glIndexub)(c);
        public void glIndexubv(byte* c) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glIndexubv)(c);
        public void glIndexxOES(int component) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glIndexxOES)(component);
        public void glIndexxvOES(int* component) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glIndexxvOES)(component);
        public void glInitNames() => ((delegate* unmanaged[Cdecl]<void>)vtable.glInitNames)();
        public void glInsertComponentEXT(uint res, uint src, uint num) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glInsertComponentEXT)(res, src, num);
        public void glInsertEventMarkerEXT(int length, byte* marker) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glInsertEventMarkerEXT)(length, marker);
        public void glInstrumentsBufferSGIX(int size, int* buffer) => ((delegate* unmanaged[Cdecl]<int, int*, void>)vtable.glInstrumentsBufferSGIX)(size, buffer);
        public void glInterleavedArrays(uint format, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glInterleavedArrays)(format, stride, pointer);
        public void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glInterpolatePathsNV)(resultPath, pathA, pathB, weight);
        public void glInvalidateBufferData(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glInvalidateBufferData)(buffer);
        public void glInvalidateBufferSubData(uint buffer, nint offset, nint length) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vtable.glInvalidateBufferSubData)(buffer, offset, length);
        public void glInvalidateFramebuffer(uint target, int numAttachments, uint* attachments) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glInvalidateFramebuffer)(target, numAttachments, attachments);
        public void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glInvalidateNamedFramebufferData)(framebuffer, numAttachments, attachments);
        public void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, int, int, int, int, void>)vtable.glInvalidateNamedFramebufferSubData)(framebuffer, numAttachments, attachments, x, y, width, height);
        public void glInvalidateSubFramebuffer(uint target, int numAttachments, uint* attachments, int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, int, int, int, int, void>)vtable.glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);
        public void glInvalidateTexImage(uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glInvalidateTexImage)(texture, level);
        public void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)vtable.glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        public byte glIsAsyncMarkerSGIX(uint marker) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsAsyncMarkerSGIX)(marker);
        public byte glIsBuffer(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsBuffer)(buffer);
        public byte glIsBufferARB(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsBufferARB)(buffer);
        public byte glIsBufferResidentNV(uint target) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsBufferResidentNV)(target);
        public byte glIsCommandListNV(uint list) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsCommandListNV)(list);
        public byte glIsEnabled(uint cap) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsEnabled)(cap);
        public byte glIsEnabledIndexedEXT(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsEnabledIndexedEXT)(target, index);
        public byte glIsEnabledi(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsEnabledi)(target, index);
        public byte glIsEnablediEXT(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsEnablediEXT)(target, index);
        public byte glIsEnablediNV(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsEnablediNV)(target, index);
        public byte glIsEnablediOES(uint target, uint index) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsEnablediOES)(target, index);
        public byte glIsFenceAPPLE(uint fence) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsFenceAPPLE)(fence);
        public byte glIsFenceNV(uint fence) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsFenceNV)(fence);
        public byte glIsFramebuffer(uint framebuffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsFramebuffer)(framebuffer);
        public byte glIsFramebufferEXT(uint framebuffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsFramebufferEXT)(framebuffer);
        public byte glIsFramebufferOES(uint framebuffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsFramebufferOES)(framebuffer);
        public byte glIsImageHandleResidentARB(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, byte>)vtable.glIsImageHandleResidentARB)(handle);
        public byte glIsImageHandleResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, byte>)vtable.glIsImageHandleResidentNV)(handle);
        public byte glIsList(uint list) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsList)(list);
        public byte glIsMemoryObjectEXT(uint memoryObject) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsMemoryObjectEXT)(memoryObject);
        public byte glIsNameAMD(uint identifier, uint name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsNameAMD)(identifier, name);
        public byte glIsNamedBufferResidentNV(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsNamedBufferResidentNV)(buffer);
        public byte glIsNamedStringARB(int namelen, byte* name) => ((delegate* unmanaged[Cdecl]<int, byte*, byte>)vtable.glIsNamedStringARB)(namelen, name);
        public byte glIsObjectBufferATI(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsObjectBufferATI)(buffer);
        public byte glIsOcclusionQueryNV(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsOcclusionQueryNV)(id);
        public byte glIsPathNV(uint path) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsPathNV)(path);
        public byte glIsPointInFillPathNV(uint path, uint mask, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, byte>)vtable.glIsPointInFillPathNV)(path, mask, x, y);
        public byte glIsPointInStrokePathNV(uint path, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, float, float, byte>)vtable.glIsPointInStrokePathNV)(path, x, y);
        public byte glIsProgram(uint program) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsProgram)(program);
        public byte glIsProgramARB(uint program) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsProgramARB)(program);
        public byte glIsProgramNV(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsProgramNV)(id);
        public byte glIsProgramPipeline(uint pipeline) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsProgramPipeline)(pipeline);
        public byte glIsProgramPipelineEXT(uint pipeline) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsProgramPipelineEXT)(pipeline);
        public byte glIsQuery(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsQuery)(id);
        public byte glIsQueryARB(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsQueryARB)(id);
        public byte glIsQueryEXT(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsQueryEXT)(id);
        public byte glIsRenderbuffer(uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsRenderbuffer)(renderbuffer);
        public byte glIsRenderbufferEXT(uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsRenderbufferEXT)(renderbuffer);
        public byte glIsRenderbufferOES(uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsRenderbufferOES)(renderbuffer);
        public byte glIsSemaphoreEXT(uint semaphore) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsSemaphoreEXT)(semaphore);
        public byte glIsSampler(uint sampler) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsSampler)(sampler);
        public byte glIsShader(uint shader) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsShader)(shader);
        public byte glIsStateNV(uint state) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsStateNV)(state);
        public byte glIsSync(nint sync) => ((delegate* unmanaged[Cdecl]<nint, byte>)vtable.glIsSync)(sync);
        public byte glIsSyncAPPLE(nint sync) => ((delegate* unmanaged[Cdecl]<nint, byte>)vtable.glIsSyncAPPLE)(sync);
        public byte glIsTexture(uint texture) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsTexture)(texture);
        public byte glIsTextureEXT(uint texture) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsTextureEXT)(texture);
        public byte glIsTextureHandleResidentARB(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, byte>)vtable.glIsTextureHandleResidentARB)(handle);
        public byte glIsTextureHandleResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, byte>)vtable.glIsTextureHandleResidentNV)(handle);
        public byte glIsTransformFeedback(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsTransformFeedback)(id);
        public byte glIsTransformFeedbackNV(uint id) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsTransformFeedbackNV)(id);
        public byte glIsVariantEnabledEXT(uint id, uint cap) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsVariantEnabledEXT)(id, cap);
        public byte glIsVertexArray(uint array) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsVertexArray)(array);
        public byte glIsVertexArrayAPPLE(uint array) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsVertexArrayAPPLE)(array);
        public byte glIsVertexArrayOES(uint array) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsVertexArrayOES)(array);
        public byte glIsVertexAttribEnabledAPPLE(uint index, uint pname) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glIsVertexAttribEnabledAPPLE)(index, pname);
        public void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)vtable.glLGPUCopyImageSubDataNVX)(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        public void glLGPUInterlockNVX() => ((delegate* unmanaged[Cdecl]<void>)vtable.glLGPUInterlockNVX)();
        public void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, void*, void>)vtable.glLGPUNamedBufferSubDataNVX)(gpuMask, buffer, offset, size, data);
        public void glLabelObjectEXT(uint type, uint obj, int length, byte* label) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte*, void>)vtable.glLabelObjectEXT)(type, obj, length, label);
        public void glLightEnviSGIX(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glLightEnviSGIX)(pname, param);
        public void glLightModelf(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glLightModelf)(pname, param);
        public void glLightModelfv(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glLightModelfv)(pname, parameters);
        public void glLightModeli(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glLightModeli)(pname, param);
        public void glLightModeliv(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glLightModeliv)(pname, parameters);
        public void glLightModelx(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glLightModelx)(pname, param);
        public void glLightModelxOES(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glLightModelxOES)(pname, param);
        public void glLightModelxv(uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glLightModelxv)(pname, param);
        public void glLightModelxvOES(uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glLightModelxvOES)(pname, param);
        public void glLightf(uint light, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glLightf)(light, pname, param);
        public void glLightfv(uint light, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glLightfv)(light, pname, parameters);
        public void glLighti(uint light, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glLighti)(light, pname, param);
        public void glLightiv(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glLightiv)(light, pname, parameters);
        public void glLightx(uint light, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glLightx)(light, pname, param);
        public void glLightxOES(uint light, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glLightxOES)(light, pname, param);
        public void glLightxv(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glLightxv)(light, pname, parameters);
        public void glLightxvOES(uint light, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glLightxvOES)(light, pname, parameters);
        public void glLineStipple(int factor, ushort pattern) => ((delegate* unmanaged[Cdecl]<int, ushort, void>)vtable.glLineStipple)(factor, pattern);
        public void glLineWidth(float width) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glLineWidth)(width);
        public void glLineWidthx(int width) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glLineWidthx)(width);
        public void glLineWidthxOES(int width) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glLineWidthxOES)(width);
        public void glLinkProgram(uint program) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glLinkProgram)(program);
        public void glLinkProgramARB(nint programObj) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glLinkProgramARB)(programObj);
        public void glListBase(uint @base) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glListBase)(@base);
        public void glListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, int* sizes, uint* states, uint* fbos, uint count) => ((delegate* unmanaged[Cdecl]<uint, uint, void**, int*, uint*, uint*, uint, void>)vtable.glListDrawCommandsStatesClientNV)(list, segment, indirects, sizes, states, fbos, count);
        public void glListParameterfSGIX(uint list, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glListParameterfSGIX)(list, pname, param);
        public void glListParameterfvSGIX(uint list, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glListParameterfvSGIX)(list, pname, parameters);
        public void glListParameteriSGIX(uint list, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glListParameteriSGIX)(list, pname, param);
        public void glListParameterivSGIX(uint list, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glListParameterivSGIX)(list, pname, parameters);
        public void glLoadIdentity() => ((delegate* unmanaged[Cdecl]<void>)vtable.glLoadIdentity)();
        public void glLoadIdentityDeformationMapSGIX(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glLoadIdentityDeformationMapSGIX)(mask);
        public void glLoadMatrixd(double* m) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glLoadMatrixd)(m);
        public void glLoadMatrixf(float* m) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glLoadMatrixf)(m);
        public void glLoadMatrixx(int* m) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glLoadMatrixx)(m);
        public void glLoadMatrixxOES(int* m) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glLoadMatrixxOES)(m);
        public void glLoadName(uint name) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glLoadName)(name);
        public void glLoadPaletteFromModelViewMatrixOES() => ((delegate* unmanaged[Cdecl]<void>)vtable.glLoadPaletteFromModelViewMatrixOES)();
        public void glLoadProgramNV(uint target, uint id, int len, byte* program) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte*, void>)vtable.glLoadProgramNV)(target, id, len, program);
        public void glLoadTransposeMatrixd(double* m) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glLoadTransposeMatrixd)(m);
        public void glLoadTransposeMatrixdARB(double* m) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glLoadTransposeMatrixdARB)(m);
        public void glLoadTransposeMatrixf(float* m) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glLoadTransposeMatrixf)(m);
        public void glLoadTransposeMatrixfARB(float* m) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glLoadTransposeMatrixfARB)(m);
        public void glLoadTransposeMatrixxOES(int* m) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glLoadTransposeMatrixxOES)(m);
        public void glLockArraysEXT(int first, int count) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glLockArraysEXT)(first, count);
        public void glLogicOp(uint opcode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glLogicOp)(opcode);
        public void glMakeBufferNonResidentNV(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMakeBufferNonResidentNV)(target);
        public void glMakeBufferResidentNV(uint target, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glMakeBufferResidentNV)(target, access);
        public void glMakeImageHandleNonResidentARB(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeImageHandleNonResidentARB)(handle);
        public void glMakeImageHandleNonResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeImageHandleNonResidentNV)(handle);
        public void glMakeImageHandleResidentARB(ulong handle, uint access) => ((delegate* unmanaged[Cdecl]<ulong, uint, void>)vtable.glMakeImageHandleResidentARB)(handle, access);
        public void glMakeImageHandleResidentNV(ulong handle, uint access) => ((delegate* unmanaged[Cdecl]<ulong, uint, void>)vtable.glMakeImageHandleResidentNV)(handle, access);
        public void glMakeNamedBufferNonResidentNV(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMakeNamedBufferNonResidentNV)(buffer);
        public void glMakeNamedBufferResidentNV(uint buffer, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glMakeNamedBufferResidentNV)(buffer, access);
        public void glMakeTextureHandleNonResidentARB(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeTextureHandleNonResidentARB)(handle);
        public void glMakeTextureHandleNonResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeTextureHandleNonResidentNV)(handle);
        public void glMakeTextureHandleResidentARB(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeTextureHandleResidentARB)(handle);
        public void glMakeTextureHandleResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeTextureHandleResidentNV)(handle);
        public void glMap1d(uint target, double u1, double u2, int stride, int order, double* points) => ((delegate* unmanaged[Cdecl]<uint, double, double, int, int, double*, void>)vtable.glMap1d)(target, u1, u2, stride, order, points);
        public void glMap1f(uint target, float u1, float u2, int stride, int order, float* points) => ((delegate* unmanaged[Cdecl]<uint, float, float, int, int, float*, void>)vtable.glMap1f)(target, u1, u2, stride, order, points);
        public void glMap1xOES(uint target, int u1, int u2, int stride, int order, int points) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)vtable.glMap1xOES)(target, u1, u2, stride, order, points);
        public void glMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points) => ((delegate* unmanaged[Cdecl]<uint, double, double, int, int, double, double, int, int, double*, void>)vtable.glMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public void glMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points) => ((delegate* unmanaged[Cdecl]<uint, float, float, int, int, float, float, int, int, float*, void>)vtable.glMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public void glMap2xOES(uint target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, int, void>)vtable.glMap2xOES)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public void* glMapBuffer(uint target, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void*>)vtable.glMapBuffer)(target, access);
        public void* glMapBufferARB(uint target, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void*>)vtable.glMapBufferARB)(target, access);
        public void* glMapBufferOES(uint target, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void*>)vtable.glMapBufferOES)(target, access);
        public void* glMapBufferRange(uint target, nint offset, nint length, uint access) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, uint, void*>)vtable.glMapBufferRange)(target, offset, length, access);
        public void* glMapBufferRangeEXT(uint target, nint offset, nint length, uint access) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, uint, void*>)vtable.glMapBufferRangeEXT)(target, offset, length, access);
        public void glMapControlPointsNV(uint target, uint index, uint type, int ustride, int vstride, int uorder, int vorder, byte packed, void* points) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, int, int, byte, void*, void>)vtable.glMapControlPointsNV)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        public void glMapGrid1d(int un, double u1, double u2) => ((delegate* unmanaged[Cdecl]<int, double, double, void>)vtable.glMapGrid1d)(un, u1, u2);
        public void glMapGrid1f(int un, float u1, float u2) => ((delegate* unmanaged[Cdecl]<int, float, float, void>)vtable.glMapGrid1f)(un, u1, u2);
        public void glMapGrid1xOES(int n, int u1, int u2) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glMapGrid1xOES)(n, u1, u2);
        public void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) => ((delegate* unmanaged[Cdecl]<int, double, double, int, double, double, void>)vtable.glMapGrid2d)(un, u1, u2, vn, v1, v2);
        public void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2) => ((delegate* unmanaged[Cdecl]<int, float, float, int, float, float, void>)vtable.glMapGrid2f)(un, u1, u2, vn, v1, v2);
        public void glMapGrid2xOES(int n, int u1, int u2, int v1, int v2) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)vtable.glMapGrid2xOES)(n, u1, u2, v1, v2);
        public void* glMapNamedBuffer(uint buffer, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void*>)vtable.glMapNamedBuffer)(buffer, access);
        public void* glMapNamedBufferEXT(uint buffer, uint access) => ((delegate* unmanaged[Cdecl]<uint, uint, void*>)vtable.glMapNamedBufferEXT)(buffer, access);
        public void* glMapNamedBufferRange(uint buffer, nint offset, nint length, uint access) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, uint, void*>)vtable.glMapNamedBufferRange)(buffer, offset, length, access);
        public void* glMapNamedBufferRangeEXT(uint buffer, nint offset, nint length, uint access) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, uint, void*>)vtable.glMapNamedBufferRangeEXT)(buffer, offset, length, access);
        public void* glMapObjectBufferATI(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, void*>)vtable.glMapObjectBufferATI)(buffer);
        public void glMapParameterfvNV(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glMapParameterfvNV)(target, pname, parameters);
        public void glMapParameterivNV(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glMapParameterivNV)(target, pname, parameters);
        public void* glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, uint* layout) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int*, uint*, void*>)vtable.glMapTexture2DINTEL)(texture, level, access, stride, layout);
        public void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points) => ((delegate* unmanaged[Cdecl]<uint, uint, double, double, int, int, double*, void>)vtable.glMapVertexAttrib1dAPPLE)(index, size, u1, u2, stride, order, points);
        public void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, int, int, float*, void>)vtable.glMapVertexAttrib1fAPPLE)(index, size, u1, u2, stride, order, points);
        public void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points) => ((delegate* unmanaged[Cdecl]<uint, uint, double, double, int, int, double, double, int, int, double*, void>)vtable.glMapVertexAttrib2dAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, int, int, float, float, int, int, float*, void>)vtable.glMapVertexAttrib2fAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public void glMaterialf(uint face, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glMaterialf)(face, pname, param);
        public void glMaterialfv(uint face, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glMaterialfv)(face, pname, parameters);
        public void glMateriali(uint face, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glMateriali)(face, pname, param);
        public void glMaterialiv(uint face, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glMaterialiv)(face, pname, parameters);
        public void glMaterialx(uint face, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glMaterialx)(face, pname, param);
        public void glMaterialxOES(uint face, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glMaterialxOES)(face, pname, param);
        public void glMaterialxv(uint face, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glMaterialxv)(face, pname, param);
        public void glMaterialxvOES(uint face, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glMaterialxvOES)(face, pname, param);
        public void glMatrixFrustumEXT(uint mode, double left, double right, double bottom, double top, double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, double, double, void>)vtable.glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
        public void glMatrixIndexPointerARB(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glMatrixIndexPointerARB)(size, type, stride, pointer);
        public void glMatrixIndexPointerOES(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glMatrixIndexPointerOES)(size, type, stride, pointer);
        public void glMatrixIndexubvARB(int size, byte* indices) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glMatrixIndexubvARB)(size, indices);
        public void glMatrixIndexuivARB(int size, uint* indices) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glMatrixIndexuivARB)(size, indices);
        public void glMatrixIndexusvARB(int size, ushort* indices) => ((delegate* unmanaged[Cdecl]<int, ushort*, void>)vtable.glMatrixIndexusvARB)(size, indices);
        public void glMatrixLoad3x2fNV(uint matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixLoad3x2fNV)(matrixMode, m);
        public void glMatrixLoad3x3fNV(uint matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixLoad3x3fNV)(matrixMode, m);
        public void glMatrixLoadIdentityEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMatrixLoadIdentityEXT)(mode);
        public void glMatrixLoadTranspose3x3fNV(uint matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixLoadTranspose3x3fNV)(matrixMode, m);
        public void glMatrixLoadTransposedEXT(uint mode, double* m) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMatrixLoadTransposedEXT)(mode, m);
        public void glMatrixLoadTransposefEXT(uint mode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixLoadTransposefEXT)(mode, m);
        public void glMatrixLoaddEXT(uint mode, double* m) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMatrixLoaddEXT)(mode, m);
        public void glMatrixLoadfEXT(uint mode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixLoadfEXT)(mode, m);
        public void glMatrixMode(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMatrixMode)(mode);
        public void glMatrixMult3x2fNV(uint matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixMult3x2fNV)(matrixMode, m);
        public void glMatrixMult3x3fNV(uint matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixMult3x3fNV)(matrixMode, m);
        public void glMatrixMultTranspose3x3fNV(uint matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixMultTranspose3x3fNV)(matrixMode, m);
        public void glMatrixMultTransposedEXT(uint mode, double* m) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMatrixMultTransposedEXT)(mode, m);
        public void glMatrixMultTransposefEXT(uint mode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixMultTransposefEXT)(mode, m);
        public void glMatrixMultdEXT(uint mode, double* m) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMatrixMultdEXT)(mode, m);
        public void glMatrixMultfEXT(uint mode, float* m) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMatrixMultfEXT)(mode, m);
        public void glMatrixOrthoEXT(uint mode, double left, double right, double bottom, double top, double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, double, double, void>)vtable.glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
        public void glMatrixPopEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMatrixPopEXT)(mode);
        public void glMatrixPushEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMatrixPushEXT)(mode);
        public void glMatrixRotatedEXT(uint mode, double angle, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glMatrixRotatedEXT)(mode, angle, x, y, z);
        public void glMatrixRotatefEXT(uint mode, float angle, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glMatrixRotatefEXT)(mode, angle, x, y, z);
        public void glMatrixScaledEXT(uint mode, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glMatrixScaledEXT)(mode, x, y, z);
        public void glMatrixScalefEXT(uint mode, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glMatrixScalefEXT)(mode, x, y, z);
        public void glMatrixTranslatedEXT(uint mode, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glMatrixTranslatedEXT)(mode, x, y, z);
        public void glMatrixTranslatefEXT(uint mode, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glMatrixTranslatefEXT)(mode, x, y, z);
        public void glMaxShaderCompilerThreadsKHR(uint count) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMaxShaderCompilerThreadsKHR)(count);
        public void glMaxShaderCompilerThreadsARB(uint count) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMaxShaderCompilerThreadsARB)(count);
        public void glMemoryBarrier(uint barriers) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMemoryBarrier)(barriers);
        public void glMemoryBarrierByRegion(uint barriers) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMemoryBarrierByRegion)(barriers);
        public void glMemoryBarrierEXT(uint barriers) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glMemoryBarrierEXT)(barriers);
        public void glMemoryObjectParameterivEXT(uint memoryObject, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glMemoryObjectParameterivEXT)(memoryObject, pname, parameters);
        public void glMinSampleShading(float value) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glMinSampleShading)(value);
        public void glMinSampleShadingARB(float value) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glMinSampleShadingARB)(value);
        public void glMinSampleShadingOES(float value) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glMinSampleShadingOES)(value);
        public void glMinmax(uint target, uint internalformat, byte sink) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, void>)vtable.glMinmax)(target, internalformat, sink);
        public void glMinmaxEXT(uint target, uint internalformat, byte sink) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, void>)vtable.glMinmaxEXT)(target, internalformat, sink);
        public void glMultMatrixd(double* m) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glMultMatrixd)(m);
        public void glMultMatrixf(float* m) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glMultMatrixf)(m);
        public void glMultMatrixx(int* m) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glMultMatrixx)(m);
        public void glMultMatrixxOES(int* m) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glMultMatrixxOES)(m);
        public void glMultTransposeMatrixd(double* m) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glMultTransposeMatrixd)(m);
        public void glMultTransposeMatrixdARB(double* m) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glMultTransposeMatrixdARB)(m);
        public void glMultTransposeMatrixf(float* m) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glMultTransposeMatrixf)(m);
        public void glMultTransposeMatrixfARB(float* m) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glMultTransposeMatrixfARB)(m);
        public void glMultTransposeMatrixxOES(int* m) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glMultTransposeMatrixxOES)(m);
        public void glMultiDrawArrays(uint mode, int* first, int* count, int drawcount) => ((delegate* unmanaged[Cdecl]<uint, int*, int*, int, void>)vtable.glMultiDrawArrays)(mode, first, count, drawcount);
        public void glMultiDrawArraysEXT(uint mode, int* first, int* count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int*, int*, int, void>)vtable.glMultiDrawArraysEXT)(mode, first, count, primcount);
        public void glMultiDrawArraysIndirect(uint mode, void* indirect, int drawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vtable.glMultiDrawArraysIndirect)(mode, indirect, drawcount, stride);
        public void glMultiDrawArraysIndirectAMD(uint mode, void* indirect, int primcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vtable.glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);
        public void glMultiDrawArraysIndirectBindlessCountNV(uint mode, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) => ((delegate* unmanaged[Cdecl]<uint, void*, int, int, int, int, void>)vtable.glMultiDrawArraysIndirectBindlessCountNV)(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        public void glMultiDrawArraysIndirectBindlessNV(uint mode, void* indirect, int drawCount, int stride, int vertexBufferCount) => ((delegate* unmanaged[Cdecl]<uint, void*, int, int, int, void>)vtable.glMultiDrawArraysIndirectBindlessNV)(mode, indirect, drawCount, stride, vertexBufferCount);
        public void glMultiDrawArraysIndirectCount(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, void*, nint, int, int, void>)vtable.glMultiDrawArraysIndirectCount)(mode, indirect, drawcount, maxdrawcount, stride);
        public void glMultiDrawArraysIndirectCountARB(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, void*, nint, int, int, void>)vtable.glMultiDrawArraysIndirectCountARB)(mode, indirect, drawcount, maxdrawcount, stride);
        public void glMultiDrawArraysIndirectEXT(uint mode, void* indirect, int drawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, void*, int, int, void>)vtable.glMultiDrawArraysIndirectEXT)(mode, indirect, drawcount, stride);
        public void glMultiDrawElementArrayAPPLE(uint mode, int* first, int* count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int*, int*, int, void>)vtable.glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);
        public void glMultiDrawElements(uint mode, int* count, uint type, void** indices, int drawcount) => ((delegate* unmanaged[Cdecl]<uint, int*, uint, void**, int, void>)vtable.glMultiDrawElements)(mode, count, type, indices, drawcount);
        public void glMultiDrawElementsBaseVertex(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex) => ((delegate* unmanaged[Cdecl]<uint, int*, uint, void**, int, int*, void>)vtable.glMultiDrawElementsBaseVertex)(mode, count, type, indices, drawcount, basevertex);
        public void glMultiDrawElementsBaseVertexEXT(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex) => ((delegate* unmanaged[Cdecl]<uint, int*, uint, void**, int, int*, void>)vtable.glMultiDrawElementsBaseVertexEXT)(mode, count, type, indices, drawcount, basevertex);
        public void glMultiDrawElementsEXT(uint mode, int* count, uint type, void** indices, int primcount) => ((delegate* unmanaged[Cdecl]<uint, int*, uint, void**, int, void>)vtable.glMultiDrawElementsEXT)(mode, count, type, indices, primcount);
        public void glMultiDrawElementsIndirect(uint mode, uint type, void* indirect, int drawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, int, void>)vtable.glMultiDrawElementsIndirect)(mode, type, indirect, drawcount, stride);
        public void glMultiDrawElementsIndirectAMD(uint mode, uint type, void* indirect, int primcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, int, void>)vtable.glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);
        public void glMultiDrawElementsIndirectBindlessCountNV(uint mode, uint type, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, int, int, int, void>)vtable.glMultiDrawElementsIndirectBindlessCountNV)(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        public void glMultiDrawElementsIndirectBindlessNV(uint mode, uint type, void* indirect, int drawCount, int stride, int vertexBufferCount) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, int, int, void>)vtable.glMultiDrawElementsIndirectBindlessNV)(mode, type, indirect, drawCount, stride, vertexBufferCount);
        public void glMultiDrawElementsIndirectCount(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, nint, int, int, void>)vtable.glMultiDrawElementsIndirectCount)(mode, type, indirect, drawcount, maxdrawcount, stride);
        public void glMultiDrawElementsIndirectCountARB(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, nint, int, int, void>)vtable.glMultiDrawElementsIndirectCountARB)(mode, type, indirect, drawcount, maxdrawcount, stride);
        public void glMultiDrawElementsIndirectEXT(uint mode, uint type, void* indirect, int drawcount, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, int, void>)vtable.glMultiDrawElementsIndirectEXT)(mode, type, indirect, drawcount, stride);
        public void glMultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride) => ((delegate* unmanaged[Cdecl]<nint, int, int, void>)vtable.glMultiDrawMeshTasksIndirectNV)(indirect, drawcount, stride);
        public void glMultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride) => ((delegate* unmanaged[Cdecl]<nint, nint, int, int, void>)vtable.glMultiDrawMeshTasksIndirectCountNV)(indirect, drawcount, maxdrawcount, stride);
        public void glMultiDrawRangeElementArrayAPPLE(uint mode, uint start, uint end, int* first, int* count, int primcount) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, int*, int, void>)vtable.glMultiDrawRangeElementArrayAPPLE)(mode, start, end, first, count, primcount);
        public void glMultiModeDrawArraysIBM(uint* mode, int* first, int* count, int primcount, int modestride) => ((delegate* unmanaged[Cdecl]<uint*, int*, int*, int, int, void>)vtable.glMultiModeDrawArraysIBM)(mode, first, count, primcount, modestride);
        public void glMultiModeDrawElementsIBM(uint* mode, int* count, uint type, void** indices, int primcount, int modestride) => ((delegate* unmanaged[Cdecl]<uint*, int*, uint, void**, int, int, void>)vtable.glMultiModeDrawElementsIBM)(mode, count, type, indices, primcount, modestride);
        public void glMultiTexBufferEXT(uint texunit, uint target, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glMultiTexBufferEXT)(texunit, target, internalformat, buffer);
        public void glMultiTexCoord1bOES(uint texture, sbyte s) => ((delegate* unmanaged[Cdecl]<uint, sbyte, void>)vtable.glMultiTexCoord1bOES)(texture, s);
        public void glMultiTexCoord1bvOES(uint texture, sbyte* coords) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glMultiTexCoord1bvOES)(texture, coords);
        public void glMultiTexCoord1d(uint target, double s) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glMultiTexCoord1d)(target, s);
        public void glMultiTexCoord1dARB(uint target, double s) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glMultiTexCoord1dARB)(target, s);
        public void glMultiTexCoord1dv(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord1dv)(target, v);
        public void glMultiTexCoord1dvARB(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord1dvARB)(target, v);
        public void glMultiTexCoord1f(uint target, float s) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glMultiTexCoord1f)(target, s);
        public void glMultiTexCoord1fARB(uint target, float s) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glMultiTexCoord1fARB)(target, s);
        public void glMultiTexCoord1fv(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord1fv)(target, v);
        public void glMultiTexCoord1fvARB(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord1fvARB)(target, v);
        public void glMultiTexCoord1hNV(uint target, Half s) => ((delegate* unmanaged[Cdecl]<uint, Half, void>)vtable.glMultiTexCoord1hNV)(target, s);
        public void glMultiTexCoord1hvNV(uint target, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glMultiTexCoord1hvNV)(target, v);
        public void glMultiTexCoord1i(uint target, int s) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glMultiTexCoord1i)(target, s);
        public void glMultiTexCoord1iARB(uint target, int s) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glMultiTexCoord1iARB)(target, s);
        public void glMultiTexCoord1iv(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord1iv)(target, v);
        public void glMultiTexCoord1ivARB(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord1ivARB)(target, v);
        public void glMultiTexCoord1s(uint target, short s) => ((delegate* unmanaged[Cdecl]<uint, short, void>)vtable.glMultiTexCoord1s)(target, s);
        public void glMultiTexCoord1sARB(uint target, short s) => ((delegate* unmanaged[Cdecl]<uint, short, void>)vtable.glMultiTexCoord1sARB)(target, s);
        public void glMultiTexCoord1sv(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord1sv)(target, v);
        public void glMultiTexCoord1svARB(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord1svARB)(target, v);
        public void glMultiTexCoord1xOES(uint texture, int s) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glMultiTexCoord1xOES)(texture, s);
        public void glMultiTexCoord1xvOES(uint texture, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord1xvOES)(texture, coords);
        public void glMultiTexCoord2bOES(uint texture, sbyte s, sbyte t) => ((delegate* unmanaged[Cdecl]<uint, sbyte, sbyte, void>)vtable.glMultiTexCoord2bOES)(texture, s, t);
        public void glMultiTexCoord2bvOES(uint texture, sbyte* coords) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glMultiTexCoord2bvOES)(texture, coords);
        public void glMultiTexCoord2d(uint target, double s, double t) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glMultiTexCoord2d)(target, s, t);
        public void glMultiTexCoord2dARB(uint target, double s, double t) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glMultiTexCoord2dARB)(target, s, t);
        public void glMultiTexCoord2dv(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord2dv)(target, v);
        public void glMultiTexCoord2dvARB(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord2dvARB)(target, v);
        public void glMultiTexCoord2f(uint target, float s, float t) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glMultiTexCoord2f)(target, s, t);
        public void glMultiTexCoord2fARB(uint target, float s, float t) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glMultiTexCoord2fARB)(target, s, t);
        public void glMultiTexCoord2fv(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord2fv)(target, v);
        public void glMultiTexCoord2fvARB(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord2fvARB)(target, v);
        public void glMultiTexCoord2hNV(uint target, Half s, Half t) => ((delegate* unmanaged[Cdecl]<uint, Half, Half, void>)vtable.glMultiTexCoord2hNV)(target, s, t);
        public void glMultiTexCoord2hvNV(uint target, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glMultiTexCoord2hvNV)(target, v);
        public void glMultiTexCoord2i(uint target, int s, int t) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glMultiTexCoord2i)(target, s, t);
        public void glMultiTexCoord2iARB(uint target, int s, int t) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glMultiTexCoord2iARB)(target, s, t);
        public void glMultiTexCoord2iv(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord2iv)(target, v);
        public void glMultiTexCoord2ivARB(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord2ivARB)(target, v);
        public void glMultiTexCoord2s(uint target, short s, short t) => ((delegate* unmanaged[Cdecl]<uint, short, short, void>)vtable.glMultiTexCoord2s)(target, s, t);
        public void glMultiTexCoord2sARB(uint target, short s, short t) => ((delegate* unmanaged[Cdecl]<uint, short, short, void>)vtable.glMultiTexCoord2sARB)(target, s, t);
        public void glMultiTexCoord2sv(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord2sv)(target, v);
        public void glMultiTexCoord2svARB(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord2svARB)(target, v);
        public void glMultiTexCoord2xOES(uint texture, int s, int t) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glMultiTexCoord2xOES)(texture, s, t);
        public void glMultiTexCoord2xvOES(uint texture, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord2xvOES)(texture, coords);
        public void glMultiTexCoord3bOES(uint texture, sbyte s, sbyte t, sbyte r) => ((delegate* unmanaged[Cdecl]<uint, sbyte, sbyte, sbyte, void>)vtable.glMultiTexCoord3bOES)(texture, s, t, r);
        public void glMultiTexCoord3bvOES(uint texture, sbyte* coords) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glMultiTexCoord3bvOES)(texture, coords);
        public void glMultiTexCoord3d(uint target, double s, double t, double r) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glMultiTexCoord3d)(target, s, t, r);
        public void glMultiTexCoord3dARB(uint target, double s, double t, double r) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glMultiTexCoord3dARB)(target, s, t, r);
        public void glMultiTexCoord3dv(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord3dv)(target, v);
        public void glMultiTexCoord3dvARB(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord3dvARB)(target, v);
        public void glMultiTexCoord3f(uint target, float s, float t, float r) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glMultiTexCoord3f)(target, s, t, r);
        public void glMultiTexCoord3fARB(uint target, float s, float t, float r) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glMultiTexCoord3fARB)(target, s, t, r);
        public void glMultiTexCoord3fv(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord3fv)(target, v);
        public void glMultiTexCoord3fvARB(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord3fvARB)(target, v);
        public void glMultiTexCoord3hNV(uint target, Half s, Half t, Half r) => ((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, void>)vtable.glMultiTexCoord3hNV)(target, s, t, r);
        public void glMultiTexCoord3hvNV(uint target, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glMultiTexCoord3hvNV)(target, v);
        public void glMultiTexCoord3i(uint target, int s, int t, int r) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glMultiTexCoord3i)(target, s, t, r);
        public void glMultiTexCoord3iARB(uint target, int s, int t, int r) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glMultiTexCoord3iARB)(target, s, t, r);
        public void glMultiTexCoord3iv(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord3iv)(target, v);
        public void glMultiTexCoord3ivARB(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord3ivARB)(target, v);
        public void glMultiTexCoord3s(uint target, short s, short t, short r) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glMultiTexCoord3s)(target, s, t, r);
        public void glMultiTexCoord3sARB(uint target, short s, short t, short r) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glMultiTexCoord3sARB)(target, s, t, r);
        public void glMultiTexCoord3sv(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord3sv)(target, v);
        public void glMultiTexCoord3svARB(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord3svARB)(target, v);
        public void glMultiTexCoord3xOES(uint texture, int s, int t, int r) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glMultiTexCoord3xOES)(texture, s, t, r);
        public void glMultiTexCoord3xvOES(uint texture, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord3xvOES)(texture, coords);
        public void glMultiTexCoord4bOES(uint texture, sbyte s, sbyte t, sbyte r, sbyte q) => ((delegate* unmanaged[Cdecl]<uint, sbyte, sbyte, sbyte, sbyte, void>)vtable.glMultiTexCoord4bOES)(texture, s, t, r, q);
        public void glMultiTexCoord4bvOES(uint texture, sbyte* coords) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glMultiTexCoord4bvOES)(texture, coords);
        public void glMultiTexCoord4d(uint target, double s, double t, double r, double q) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glMultiTexCoord4d)(target, s, t, r, q);
        public void glMultiTexCoord4dARB(uint target, double s, double t, double r, double q) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glMultiTexCoord4dARB)(target, s, t, r, q);
        public void glMultiTexCoord4dv(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord4dv)(target, v);
        public void glMultiTexCoord4dvARB(uint target, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glMultiTexCoord4dvARB)(target, v);
        public void glMultiTexCoord4f(uint target, float s, float t, float r, float q) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glMultiTexCoord4f)(target, s, t, r, q);
        public void glMultiTexCoord4fARB(uint target, float s, float t, float r, float q) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glMultiTexCoord4fARB)(target, s, t, r, q);
        public void glMultiTexCoord4fv(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord4fv)(target, v);
        public void glMultiTexCoord4fvARB(uint target, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glMultiTexCoord4fvARB)(target, v);
        public void glMultiTexCoord4hNV(uint target, Half s, Half t, Half r, Half q) => ((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, Half, void>)vtable.glMultiTexCoord4hNV)(target, s, t, r, q);
        public void glMultiTexCoord4hvNV(uint target, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glMultiTexCoord4hvNV)(target, v);
        public void glMultiTexCoord4i(uint target, int s, int t, int r, int q) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glMultiTexCoord4i)(target, s, t, r, q);
        public void glMultiTexCoord4iARB(uint target, int s, int t, int r, int q) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glMultiTexCoord4iARB)(target, s, t, r, q);
        public void glMultiTexCoord4iv(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord4iv)(target, v);
        public void glMultiTexCoord4ivARB(uint target, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord4ivARB)(target, v);
        public void glMultiTexCoord4s(uint target, short s, short t, short r, short q) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)vtable.glMultiTexCoord4s)(target, s, t, r, q);
        public void glMultiTexCoord4sARB(uint target, short s, short t, short r, short q) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)vtable.glMultiTexCoord4sARB)(target, s, t, r, q);
        public void glMultiTexCoord4sv(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord4sv)(target, v);
        public void glMultiTexCoord4svARB(uint target, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glMultiTexCoord4svARB)(target, v);
        public void glMultiTexCoord4x(uint texture, int s, int t, int r, int q) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glMultiTexCoord4x)(texture, s, t, r, q);
        public void glMultiTexCoord4xOES(uint texture, int s, int t, int r, int q) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glMultiTexCoord4xOES)(texture, s, t, r, q);
        public void glMultiTexCoord4xvOES(uint texture, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glMultiTexCoord4xvOES)(texture, coords);
        public void glMultiTexCoordP1ui(uint texture, uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glMultiTexCoordP1ui)(texture, type, coords);
        public void glMultiTexCoordP1uiv(uint texture, uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glMultiTexCoordP1uiv)(texture, type, coords);
        public void glMultiTexCoordP2ui(uint texture, uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glMultiTexCoordP2ui)(texture, type, coords);
        public void glMultiTexCoordP2uiv(uint texture, uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glMultiTexCoordP2uiv)(texture, type, coords);
        public void glMultiTexCoordP3ui(uint texture, uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glMultiTexCoordP3ui)(texture, type, coords);
        public void glMultiTexCoordP3uiv(uint texture, uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glMultiTexCoordP3uiv)(texture, type, coords);
        public void glMultiTexCoordP4ui(uint texture, uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glMultiTexCoordP4ui)(texture, type, coords);
        public void glMultiTexCoordP4uiv(uint texture, uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glMultiTexCoordP4uiv)(texture, type, coords);
        public void glMultiTexCoordPointerEXT(uint texunit, int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void*, void>)vtable.glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);
        public void glMultiTexEnvfEXT(uint texunit, uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glMultiTexEnvfEXT)(texunit, target, pname, param);
        public void glMultiTexEnvfvEXT(uint texunit, uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glMultiTexEnvfvEXT)(texunit, target, pname, parameters);
        public void glMultiTexEnviEXT(uint texunit, uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glMultiTexEnviEXT)(texunit, target, pname, param);
        public void glMultiTexEnvivEXT(uint texunit, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glMultiTexEnvivEXT)(texunit, target, pname, parameters);
        public void glMultiTexGendEXT(uint texunit, uint coord, uint pname, double param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double, void>)vtable.glMultiTexGendEXT)(texunit, coord, pname, param);
        public void glMultiTexGendvEXT(uint texunit, uint coord, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glMultiTexGendvEXT)(texunit, coord, pname, parameters);
        public void glMultiTexGenfEXT(uint texunit, uint coord, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glMultiTexGenfEXT)(texunit, coord, pname, param);
        public void glMultiTexGenfvEXT(uint texunit, uint coord, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glMultiTexGenfvEXT)(texunit, coord, pname, parameters);
        public void glMultiTexGeniEXT(uint texunit, uint coord, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glMultiTexGeniEXT)(texunit, coord, pname, param);
        public void glMultiTexGenivEXT(uint texunit, uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glMultiTexGenivEXT)(texunit, coord, pname, parameters);
        public void glMultiTexImage1DEXT(uint texunit, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, uint, void*, void>)vtable.glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);
        public void glMultiTexImage2DEXT(uint texunit, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        public void glMultiTexImage3DEXT(uint texunit, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        public void glMultiTexParameterIivEXT(uint texunit, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glMultiTexParameterIivEXT)(texunit, target, pname, parameters);
        public void glMultiTexParameterIuivEXT(uint texunit, uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glMultiTexParameterIuivEXT)(texunit, target, pname, parameters);
        public void glMultiTexParameterfEXT(uint texunit, uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glMultiTexParameterfEXT)(texunit, target, pname, param);
        public void glMultiTexParameterfvEXT(uint texunit, uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glMultiTexParameterfvEXT)(texunit, target, pname, parameters);
        public void glMultiTexParameteriEXT(uint texunit, uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glMultiTexParameteriEXT)(texunit, target, pname, param);
        public void glMultiTexParameterivEXT(uint texunit, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glMultiTexParameterivEXT)(texunit, target, pname, parameters);
        public void glMultiTexRenderbufferEXT(uint texunit, uint target, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);
        public void glMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, uint, uint, void*, void>)vtable.glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);
        public void glMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        public void glMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public void glMulticastBarrierNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glMulticastBarrierNV)();
        public void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void>)vtable.glMulticastBlitFramebufferNV)(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, void*, void>)vtable.glMulticastBufferSubDataNV)(gpuMask, buffer, offset, size, data);
        public void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, nint, nint, nint, void>)vtable.glMulticastCopyBufferSubDataNV)(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        public void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)vtable.glMulticastCopyImageSubDataNV)(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, float*, void>)vtable.glMulticastFramebufferSampleLocationsfvNV)(gpu, framebuffer, start, count, v);
        public void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, uint pname, long* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, long*, void>)vtable.glMulticastGetQueryObjecti64vNV)(gpu, id, pname, parameters);
        public void glMulticastGetQueryObjectivNV(uint gpu, uint id, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glMulticastGetQueryObjectivNV)(gpu, id, pname, parameters);
        public void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, ulong*, void>)vtable.glMulticastGetQueryObjectui64vNV)(gpu, id, pname, parameters);
        public void glMulticastGetQueryObjectuivNV(uint gpu, uint id, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glMulticastGetQueryObjectuivNV)(gpu, id, pname, parameters);
        public void glMulticastScissorArrayvNVX(uint gpu, uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, void>)vtable.glMulticastScissorArrayvNVX)(gpu, first, count, v);
        public void glMulticastViewportArrayvNVX(uint gpu, uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glMulticastViewportArrayvNVX)(gpu, first, count, v);
        public void glMulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, void>)vtable.glMulticastViewportPositionWScaleNVX)(gpu, index, xcoeff, ycoeff);
        public void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glMulticastWaitSyncNV)(signalGpu, waitGpuMask);
        public void glNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong, void>)vtable.glNamedBufferAttachMemoryNV)(buffer, memory, offset);
        public void glNamedBufferData(uint buffer, nint size, void* data, uint usage) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glNamedBufferData)(buffer, size, data, usage);
        public void glNamedBufferDataEXT(uint buffer, nint size, void* data, uint usage) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glNamedBufferDataEXT)(buffer, size, data, usage);
        public void glNamedBufferPageCommitmentARB(uint buffer, nint offset, nint size, byte commit) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, byte, void>)vtable.glNamedBufferPageCommitmentARB)(buffer, offset, size, commit);
        public void glNamedBufferPageCommitmentEXT(uint buffer, nint offset, nint size, byte commit) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, byte, void>)vtable.glNamedBufferPageCommitmentEXT)(buffer, offset, size, commit);
        public void glNamedBufferPageCommitmentMemNV(uint buffer, nint offset, nint size, uint memory, ulong memOffset, byte commit) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, uint, ulong, byte, void>)vtable.glNamedBufferPageCommitmentMemNV)(buffer, offset, size, memory, memOffset, commit);
        public void glNamedBufferStorage(uint buffer, nint size, void* data, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glNamedBufferStorage)(buffer, size, data, flags);
        public void glNamedBufferStorageExternalEXT(uint buffer, nint offset, nint size, void* clientBuffer, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, uint, void>)vtable.glNamedBufferStorageExternalEXT)(buffer, offset, size, clientBuffer, flags);
        public void glNamedBufferStorageEXT(uint buffer, nint size, void* data, uint flags) => ((delegate* unmanaged[Cdecl]<uint, nint, void*, uint, void>)vtable.glNamedBufferStorageEXT)(buffer, size, data, flags);
        public void glNamedBufferStorageMemEXT(uint buffer, nint size, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, nint, uint, ulong, void>)vtable.glNamedBufferStorageMemEXT)(buffer, size, memory, offset);
        public void glNamedBufferSubData(uint buffer, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glNamedBufferSubData)(buffer, offset, size, data);
        public void glNamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data) => ((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)vtable.glNamedBufferSubDataEXT)(buffer, offset, size, data);
        public void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, void>)vtable.glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);
        public void glNamedFramebufferDrawBuffer(uint framebuffer, uint buf) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glNamedFramebufferDrawBuffer)(framebuffer, buf);
        public void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glNamedFramebufferDrawBuffers)(framebuffer, n, bufs);
        public void glNamedFramebufferParameteri(uint framebuffer, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glNamedFramebufferParameteri)(framebuffer, pname, param);
        public void glNamedFramebufferParameteriEXT(uint framebuffer, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glNamedFramebufferParameteriEXT)(framebuffer, pname, param);
        public void glNamedFramebufferReadBuffer(uint framebuffer, uint src) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glNamedFramebufferReadBuffer)(framebuffer, src);
        public void glNamedFramebufferRenderbuffer(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glNamedFramebufferRenderbuffer)(framebuffer, attachment, renderbuffertarget, renderbuffer);
        public void glNamedFramebufferRenderbufferEXT(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);
        public void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glNamedFramebufferSampleLocationsfvARB)(framebuffer, start, count, v);
        public void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glNamedFramebufferSampleLocationsfvNV)(framebuffer, start, count, v);
        public void glNamedFramebufferTexture(uint framebuffer, uint attachment, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glNamedFramebufferTexture)(framebuffer, attachment, texture, level);
        public void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glNamedFramebufferSamplePositionsfvAMD)(framebuffer, numsamples, pixelindex, values);
        public void glNamedFramebufferTexture1DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);
        public void glNamedFramebufferTexture2DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, void>)vtable.glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);
        public void glNamedFramebufferTexture3DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level, int zoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, int, int, void>)vtable.glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);
        public void glNamedFramebufferTextureEXT(uint framebuffer, uint attachment, uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);
        public void glNamedFramebufferTextureFaceEXT(uint framebuffer, uint attachment, uint texture, int level, uint face) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void>)vtable.glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);
        public void glNamedFramebufferTextureLayer(uint framebuffer, uint attachment, uint texture, int level, int layer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, void>)vtable.glNamedFramebufferTextureLayer)(framebuffer, attachment, texture, level, layer);
        public void glNamedFramebufferTextureLayerEXT(uint framebuffer, uint attachment, uint texture, int level, int layer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, void>)vtable.glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);
        public void glNamedProgramLocalParameter4dEXT(uint program, uint target, uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double, double, double, double, void>)vtable.glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);
        public void glNamedProgramLocalParameter4dvEXT(uint program, uint target, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glNamedProgramLocalParameter4dvEXT)(program, target, index, parameters);
        public void glNamedProgramLocalParameter4fEXT(uint program, uint target, uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, float, float, float, void>)vtable.glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);
        public void glNamedProgramLocalParameter4fvEXT(uint program, uint target, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glNamedProgramLocalParameter4fvEXT)(program, target, index, parameters);
        public void glNamedProgramLocalParameterI4iEXT(uint program, uint target, uint index, int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, int, int, void>)vtable.glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);
        public void glNamedProgramLocalParameterI4ivEXT(uint program, uint target, uint index, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glNamedProgramLocalParameterI4ivEXT)(program, target, index, parameters);
        public void glNamedProgramLocalParameterI4uiEXT(uint program, uint target, uint index, uint x, uint y, uint z, uint w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, void>)vtable.glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);
        public void glNamedProgramLocalParameterI4uivEXT(uint program, uint target, uint index, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glNamedProgramLocalParameterI4uivEXT)(program, target, index, parameters);
        public void glNamedProgramLocalParameters4fvEXT(uint program, uint target, uint index, int count, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, float*, void>)vtable.glNamedProgramLocalParameters4fvEXT)(program, target, index, count, parameters);
        public void glNamedProgramLocalParametersI4ivEXT(uint program, uint target, uint index, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int*, void>)vtable.glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, parameters);
        public void glNamedProgramLocalParametersI4uivEXT(uint program, uint target, uint index, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, void>)vtable.glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, parameters);
        public void glNamedProgramStringEXT(uint program, uint target, uint format, int len, void* str) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void*, void>)vtable.glNamedProgramStringEXT)(program, target, format, len, str);
        public void glNamedRenderbufferStorage(uint renderbuffer, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, void>)vtable.glNamedRenderbufferStorage)(renderbuffer, internalformat, width, height);
        public void glNamedRenderbufferStorageEXT(uint renderbuffer, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, void>)vtable.glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);
        public void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glNamedRenderbufferStorageMultisample)(renderbuffer, samples, internalformat, width, height);
        public void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, int, int, void>)vtable.glNamedRenderbufferStorageMultisampleAdvancedAMD)(renderbuffer, samples, storageSamples, internalformat, width, height);
        public void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, int, int, void>)vtable.glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        public void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);
        public void glNamedStringARB(uint type, int namelen, byte* name, int stringlen, byte* str) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, int, byte*, void>)vtable.glNamedStringARB)(type, namelen, name, stringlen, str);
        public void glNewList(uint list, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glNewList)(list, mode);
        public uint glNewObjectBufferATI(int size, void* pointer, uint usage) => ((delegate* unmanaged[Cdecl]<int, void*, uint, uint>)vtable.glNewObjectBufferATI)(size, pointer, usage);
        public void glNormal3b(sbyte nx, sbyte ny, sbyte nz) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glNormal3b)(nx, ny, nz);
        public void glNormal3bv(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glNormal3bv)(v);
        public void glNormal3d(double nx, double ny, double nz) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glNormal3d)(nx, ny, nz);
        public void glNormal3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glNormal3dv)(v);
        public void glNormal3f(float nx, float ny, float nz) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glNormal3f)(nx, ny, nz);
        public void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)vtable.glNormal3fVertex3fSUN)(nx, ny, nz, x, y, z);
        public void glNormal3fVertex3fvSUN(float* n, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, void>)vtable.glNormal3fVertex3fvSUN)(n, v);
        public void glNormal3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glNormal3fv)(v);
        public void glNormal3hNV(Half nx, Half ny, Half nz) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)vtable.glNormal3hNV)(nx, ny, nz);
        public void glNormal3hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glNormal3hvNV)(v);
        public void glNormal3i(int nx, int ny, int nz) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glNormal3i)(nx, ny, nz);
        public void glNormal3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glNormal3iv)(v);
        public void glNormal3s(short nx, short ny, short nz) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glNormal3s)(nx, ny, nz);
        public void glNormal3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glNormal3sv)(v);
        public void glNormal3x(int nx, int ny, int nz) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glNormal3x)(nx, ny, nz);
        public void glNormal3xOES(int nx, int ny, int nz) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glNormal3xOES)(nx, ny, nz);
        public void glNormal3xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glNormal3xvOES)(coords);
        public void glNormalFormatNV(uint type, int stride) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glNormalFormatNV)(type, stride);
        public void glNormalP3ui(uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glNormalP3ui)(type, coords);
        public void glNormalP3uiv(uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glNormalP3uiv)(type, coords);
        public void glNormalPointer(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glNormalPointer)(type, stride, pointer);
        public void glNormalPointerEXT(uint type, int stride, int count, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, int, void*, void>)vtable.glNormalPointerEXT)(type, stride, count, pointer);
        public void glNormalPointerListIBM(uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<uint, int, void**, int, void>)vtable.glNormalPointerListIBM)(type, stride, pointer, ptrstride);
        public void glNormalPointervINTEL(uint type, void** pointer) => ((delegate* unmanaged[Cdecl]<uint, void**, void>)vtable.glNormalPointervINTEL)(type, pointer);
        public void glNormalStream3bATI(uint stream, sbyte nx, sbyte ny, sbyte nz) => ((delegate* unmanaged[Cdecl]<uint, sbyte, sbyte, sbyte, void>)vtable.glNormalStream3bATI)(stream, nx, ny, nz);
        public void glNormalStream3bvATI(uint stream, sbyte* coords) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glNormalStream3bvATI)(stream, coords);
        public void glNormalStream3dATI(uint stream, double nx, double ny, double nz) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glNormalStream3dATI)(stream, nx, ny, nz);
        public void glNormalStream3dvATI(uint stream, double* coords) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glNormalStream3dvATI)(stream, coords);
        public void glNormalStream3fATI(uint stream, float nx, float ny, float nz) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glNormalStream3fATI)(stream, nx, ny, nz);
        public void glNormalStream3fvATI(uint stream, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glNormalStream3fvATI)(stream, coords);
        public void glNormalStream3iATI(uint stream, int nx, int ny, int nz) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glNormalStream3iATI)(stream, nx, ny, nz);
        public void glNormalStream3ivATI(uint stream, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glNormalStream3ivATI)(stream, coords);
        public void glNormalStream3sATI(uint stream, short nx, short ny, short nz) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glNormalStream3sATI)(stream, nx, ny, nz);
        public void glNormalStream3svATI(uint stream, short* coords) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glNormalStream3svATI)(stream, coords);
        public void glObjectLabel(uint identifier, uint name, int length, byte* label) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte*, void>)vtable.glObjectLabel)(identifier, name, length, label);
        public void glObjectLabelKHR(uint identifier, uint name, int length, byte* label) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte*, void>)vtable.glObjectLabelKHR)(identifier, name, length, label);
        public void glObjectPtrLabel(void* ptr, int length, byte* label) => ((delegate* unmanaged[Cdecl]<void*, int, byte*, void>)vtable.glObjectPtrLabel)(ptr, length, label);
        public void glObjectPtrLabelKHR(void* ptr, int length, byte* label) => ((delegate* unmanaged[Cdecl]<void*, int, byte*, void>)vtable.glObjectPtrLabelKHR)(ptr, length, label);
        public uint glObjectPurgeableAPPLE(uint objectType, uint name, uint option) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint>)vtable.glObjectPurgeableAPPLE)(objectType, name, option);
        public uint glObjectUnpurgeableAPPLE(uint objectType, uint name, uint option) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint>)vtable.glObjectUnpurgeableAPPLE)(objectType, name, option);
        public void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)vtable.glOrtho)(left, right, bottom, top, zNear, zFar);
        public void glOrthof(float l, float r, float b, float t, float n, float f) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)vtable.glOrthof)(l, r, b, t, n, f);
        public void glOrthofOES(float l, float r, float b, float t, float n, float f) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)vtable.glOrthofOES)(l, r, b, t, n, f);
        public void glOrthox(int l, int r, int b, int t, int n, int f) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vtable.glOrthox)(l, r, b, t, n, f);
        public void glOrthoxOES(int l, int r, int b, int t, int n, int f) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)vtable.glOrthoxOES)(l, r, b, t, n, f);
        public void glPNTrianglesfATI(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPNTrianglesfATI)(pname, param);
        public void glPNTrianglesiATI(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPNTrianglesiATI)(pname, param);
        public void glPassTexCoordATI(uint dst, uint coord, uint swizzle) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glPassTexCoordATI)(dst, coord, swizzle);
        public void glPassThrough(float token) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glPassThrough)(token);
        public void glPassThroughxOES(int token) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glPassThroughxOES)(token);
        public void glPatchParameterfv(uint pname, float* values) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glPatchParameterfv)(pname, values);
        public void glPatchParameteri(uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPatchParameteri)(pname, value);
        public void glPatchParameteriEXT(uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPatchParameteriEXT)(pname, value);
        public void glPatchParameteriOES(uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPatchParameteriOES)(pname, value);
        public void glPathColorGenNV(uint color, uint genMode, uint colorFormat, float* coeffs) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glPathColorGenNV)(color, genMode, colorFormat, coeffs);
        public void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, uint coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, int, uint, void*, void>)vtable.glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);
        public void glPathCoordsNV(uint path, int numCoords, uint coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void*, void>)vtable.glPathCoordsNV)(path, numCoords, coordType, coords);
        public void glPathCoverDepthFuncNV(uint func) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPathCoverDepthFuncNV)(func);
        public void glPathDashArrayNV(uint path, int dashCount, float* dashArray) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glPathDashArrayNV)(path, dashCount, dashArray);
        public void glPathFogGenNV(uint genMode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPathFogGenNV)(genMode);
        public uint glPathGlyphIndexArrayNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, uint, uint, int, uint, float, uint>)vtable.glPathGlyphIndexArrayNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        public uint glPathGlyphIndexRangeNV(uint fontTarget, void* fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount) => ((delegate* unmanaged[Cdecl]<uint, void*, uint, uint, float, uint*, uint>)vtable.glPathGlyphIndexRangeNV)(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
        public void glPathGlyphRangeNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyph, int numGlyphs, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, uint, uint, int, uint, uint, float, void>)vtable.glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        public void glPathGlyphsNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, int numGlyphs, uint type, void* charcodes, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, uint, int, uint, void*, uint, uint, float, void>)vtable.glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        public uint glPathMemoryGlyphIndexArrayNV(uint firstPathName, uint fontTarget, nint fontSize, void* fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, uint, nint, void*, int, uint, int, uint, float, uint>)vtable.glPathMemoryGlyphIndexArrayNV)(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        public void glPathParameterfNV(uint path, uint pname, float value) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glPathParameterfNV)(path, pname, value);
        public void glPathParameterfvNV(uint path, uint pname, float* value) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glPathParameterfvNV)(path, pname, value);
        public void glPathParameteriNV(uint path, uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glPathParameteriNV)(path, pname, value);
        public void glPathParameterivNV(uint path, uint pname, int* value) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glPathParameterivNV)(path, pname, value);
        public void glPathStencilDepthOffsetNV(float factor, float units) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glPathStencilDepthOffsetNV)(factor, units);
        public void glPathStencilFuncNV(uint func, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glPathStencilFuncNV)(func, reference, mask);
        public void glPathStringNV(uint path, uint format, int length, void* pathString) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void*, void>)vtable.glPathStringNV)(path, format, length, pathString);
        public void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, uint coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, byte*, int, uint, void*, void>)vtable.glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        public void glPathSubCoordsNV(uint path, int coordStart, int numCoords, uint coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, void*, void>)vtable.glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);
        public void glPathTexGenNV(uint texCoordSet, uint genMode, int components, float* coeffs) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glPathTexGenNV)(texCoordSet, genMode, components, coeffs);
        public void glPauseTransformFeedback() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPauseTransformFeedback)();
        public void glPauseTransformFeedbackNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPauseTransformFeedbackNV)();
        public void glPixelDataRangeNV(uint target, int length, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glPixelDataRangeNV)(target, length, pointer);
        public void glPixelMapfv(uint map, int mapsize, float* values) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glPixelMapfv)(map, mapsize, values);
        public void glPixelMapuiv(uint map, int mapsize, uint* values) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glPixelMapuiv)(map, mapsize, values);
        public void glPixelMapusv(uint map, int mapsize, ushort* values) => ((delegate* unmanaged[Cdecl]<uint, int, ushort*, void>)vtable.glPixelMapusv)(map, mapsize, values);
        public void glPixelMapx(uint map, int size, int* values) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glPixelMapx)(map, size, values);
        public void glPixelStoref(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPixelStoref)(pname, param);
        public void glPixelStorei(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPixelStorei)(pname, param);
        public void glPixelStorex(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPixelStorex)(pname, param);
        public void glPixelTexGenParameterfSGIS(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPixelTexGenParameterfSGIS)(pname, param);
        public void glPixelTexGenParameterfvSGIS(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glPixelTexGenParameterfvSGIS)(pname, parameters);
        public void glPixelTexGenParameteriSGIS(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPixelTexGenParameteriSGIS)(pname, param);
        public void glPixelTexGenParameterivSGIS(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glPixelTexGenParameterivSGIS)(pname, parameters);
        public void glPixelTexGenSGIX(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPixelTexGenSGIX)(mode);
        public void glPixelTransferf(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPixelTransferf)(pname, param);
        public void glPixelTransferi(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPixelTransferi)(pname, param);
        public void glPixelTransferxOES(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPixelTransferxOES)(pname, param);
        public void glPixelTransformParameterfEXT(uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glPixelTransformParameterfEXT)(target, pname, param);
        public void glPixelTransformParameterfvEXT(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glPixelTransformParameterfvEXT)(target, pname, parameters);
        public void glPixelTransformParameteriEXT(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glPixelTransformParameteriEXT)(target, pname, param);
        public void glPixelTransformParameterivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glPixelTransformParameterivEXT)(target, pname, parameters);
        public void glPixelZoom(float xfactor, float yfactor) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glPixelZoom)(xfactor, yfactor);
        public void glPixelZoomxOES(int xfactor, int yfactor) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glPixelZoomxOES)(xfactor, yfactor);
        public byte glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY) => ((delegate* unmanaged[Cdecl]<uint, int, int, float, float*, float*, float*, float*, byte>)vtable.glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
        public void glPointParameterf(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPointParameterf)(pname, param);
        public void glPointParameterfARB(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPointParameterfARB)(pname, param);
        public void glPointParameterfEXT(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPointParameterfEXT)(pname, param);
        public void glPointParameterfSGIS(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glPointParameterfSGIS)(pname, param);
        public void glPointParameterfv(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glPointParameterfv)(pname, parameters);
        public void glPointParameterfvARB(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glPointParameterfvARB)(pname, parameters);
        public void glPointParameterfvEXT(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glPointParameterfvEXT)(pname, parameters);
        public void glPointParameterfvSGIS(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glPointParameterfvSGIS)(pname, parameters);
        public void glPointParameteri(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPointParameteri)(pname, param);
        public void glPointParameteriNV(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPointParameteriNV)(pname, param);
        public void glPointParameteriv(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glPointParameteriv)(pname, parameters);
        public void glPointParameterivNV(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glPointParameterivNV)(pname, parameters);
        public void glPointParameterx(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPointParameterx)(pname, param);
        public void glPointParameterxOES(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glPointParameterxOES)(pname, param);
        public void glPointParameterxv(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glPointParameterxv)(pname, parameters);
        public void glPointParameterxvOES(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glPointParameterxvOES)(pname, parameters);
        public void glPointSize(float size) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glPointSize)(size);
        public void glPointSizePointerOES(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glPointSizePointerOES)(type, stride, pointer);
        public void glPointSizex(int size) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glPointSizex)(size);
        public void glPointSizexOES(int size) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glPointSizexOES)(size);
        public int glPollAsyncSGIX(uint* markerp) => ((delegate* unmanaged[Cdecl]<uint*, int>)vtable.glPollAsyncSGIX)(markerp);
        public int glPollInstrumentsSGIX(int* marker_p) => ((delegate* unmanaged[Cdecl]<int*, int>)vtable.glPollInstrumentsSGIX)(marker_p);
        public void glPolygonMode(uint face, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glPolygonMode)(face, mode);
        public void glPolygonModeNV(uint face, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glPolygonModeNV)(face, mode);
        public void glPolygonOffset(float factor, float units) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glPolygonOffset)(factor, units);
        public void glPolygonOffsetClamp(float factor, float units, float clamp) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glPolygonOffsetClamp)(factor, units, clamp);
        public void glPolygonOffsetClampEXT(float factor, float units, float clamp) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glPolygonOffsetClampEXT)(factor, units, clamp);
        public void glPolygonOffsetEXT(float factor, float bias) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glPolygonOffsetEXT)(factor, bias);
        public void glPolygonOffsetx(int factor, int units) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glPolygonOffsetx)(factor, units);
        public void glPolygonOffsetxOES(int factor, int units) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glPolygonOffsetxOES)(factor, units);
        public void glPolygonStipple(byte* mask) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glPolygonStipple)(mask);
        public void glPopAttrib() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopAttrib)();
        public void glPopClientAttrib() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopClientAttrib)();
        public void glPopDebugGroup() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopDebugGroup)();
        public void glPopDebugGroupKHR() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopDebugGroupKHR)();
        public void glPopGroupMarkerEXT() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopGroupMarkerEXT)();
        public void glPopMatrix() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopMatrix)();
        public void glPopName() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPopName)();
        public void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint target1, uint fill1, uint target2, uint fill2, uint target3, uint fill3) => ((delegate* unmanaged[Cdecl]<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glPresentFrameDualFillNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        public void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint key0, uint target1, uint fill1, uint key1) => ((delegate* unmanaged[Cdecl]<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glPresentFrameKeyedNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        public void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glPrimitiveBoundingBox)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glPrimitiveBoundingBoxARB)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glPrimitiveBoundingBoxEXT)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glPrimitiveBoundingBoxOES)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public void glPrimitiveRestartIndex(uint index) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPrimitiveRestartIndex)(index);
        public void glPrimitiveRestartIndexNV(uint index) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPrimitiveRestartIndexNV)(index);
        public void glPrimitiveRestartNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPrimitiveRestartNV)();
        public void glPrioritizeTextures(int n, uint* textures, float* priorities) => ((delegate* unmanaged[Cdecl]<int, uint*, float*, void>)vtable.glPrioritizeTextures)(n, textures, priorities);
        public void glPrioritizeTexturesEXT(int n, uint* textures, float* priorities) => ((delegate* unmanaged[Cdecl]<int, uint*, float*, void>)vtable.glPrioritizeTexturesEXT)(n, textures, priorities);
        public void glPrioritizeTexturesxOES(int n, uint* textures, int* priorities) => ((delegate* unmanaged[Cdecl]<int, uint*, int*, void>)vtable.glPrioritizeTexturesxOES)(n, textures, priorities);
        public void glProgramBinary(uint program, uint binaryFormat, void* binary, int length) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, void>)vtable.glProgramBinary)(program, binaryFormat, binary, length);
        public void glProgramBinaryOES(uint program, uint binaryFormat, void* binary, int length) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, int, void>)vtable.glProgramBinaryOES)(program, binaryFormat, binary, length);
        public void glProgramBufferParametersIivNV(uint target, uint bindingIndex, uint wordIndex, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int*, void>)vtable.glProgramBufferParametersIivNV)(target, bindingIndex, wordIndex, count, parameters);
        public void glProgramBufferParametersIuivNV(uint target, uint bindingIndex, uint wordIndex, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint*, void>)vtable.glProgramBufferParametersIuivNV)(target, bindingIndex, wordIndex, count, parameters);
        public void glProgramBufferParametersfvNV(uint target, uint bindingIndex, uint wordIndex, int count, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, float*, void>)vtable.glProgramBufferParametersfvNV)(target, bindingIndex, wordIndex, count, parameters);
        public void glProgramEnvParameter4dARB(uint target, uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, uint, double, double, double, double, void>)vtable.glProgramEnvParameter4dARB)(target, index, x, y, z, w);
        public void glProgramEnvParameter4dvARB(uint target, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glProgramEnvParameter4dvARB)(target, index, parameters);
        public void glProgramEnvParameter4fARB(uint target, uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, float, float, void>)vtable.glProgramEnvParameter4fARB)(target, index, x, y, z, w);
        public void glProgramEnvParameter4fvARB(uint target, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glProgramEnvParameter4fvARB)(target, index, parameters);
        public void glProgramEnvParameterI4iNV(uint target, uint index, int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, void>)vtable.glProgramEnvParameterI4iNV)(target, index, x, y, z, w);
        public void glProgramEnvParameterI4ivNV(uint target, uint index, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glProgramEnvParameterI4ivNV)(target, index, parameters);
        public void glProgramEnvParameterI4uiNV(uint target, uint index, uint x, uint y, uint z, uint w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);
        public void glProgramEnvParameterI4uivNV(uint target, uint index, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glProgramEnvParameterI4uivNV)(target, index, parameters);
        public void glProgramEnvParameters4fvEXT(uint target, uint index, int count, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glProgramEnvParameters4fvEXT)(target, index, count, parameters);
        public void glProgramEnvParametersI4ivNV(uint target, uint index, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, void>)vtable.glProgramEnvParametersI4ivNV)(target, index, count, parameters);
        public void glProgramEnvParametersI4uivNV(uint target, uint index, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, void>)vtable.glProgramEnvParametersI4uivNV)(target, index, count, parameters);
        public void glProgramLocalParameter4dARB(uint target, uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, uint, double, double, double, double, void>)vtable.glProgramLocalParameter4dARB)(target, index, x, y, z, w);
        public void glProgramLocalParameter4dvARB(uint target, uint index, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glProgramLocalParameter4dvARB)(target, index, parameters);
        public void glProgramLocalParameter4fARB(uint target, uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, float, float, void>)vtable.glProgramLocalParameter4fARB)(target, index, x, y, z, w);
        public void glProgramLocalParameter4fvARB(uint target, uint index, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glProgramLocalParameter4fvARB)(target, index, parameters);
        public void glProgramLocalParameterI4iNV(uint target, uint index, int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, void>)vtable.glProgramLocalParameterI4iNV)(target, index, x, y, z, w);
        public void glProgramLocalParameterI4ivNV(uint target, uint index, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glProgramLocalParameterI4ivNV)(target, index, parameters);
        public void glProgramLocalParameterI4uiNV(uint target, uint index, uint x, uint y, uint z, uint w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);
        public void glProgramLocalParameterI4uivNV(uint target, uint index, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glProgramLocalParameterI4uivNV)(target, index, parameters);
        public void glProgramLocalParameters4fvEXT(uint target, uint index, int count, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glProgramLocalParameters4fvEXT)(target, index, count, parameters);
        public void glProgramLocalParametersI4ivNV(uint target, uint index, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int*, void>)vtable.glProgramLocalParametersI4ivNV)(target, index, count, parameters);
        public void glProgramLocalParametersI4uivNV(uint target, uint index, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, void>)vtable.glProgramLocalParametersI4uivNV)(target, index, count, parameters);
        public void glProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, double, double, double, double, void>)vtable.glProgramNamedParameter4dNV)(id, len, name, x, y, z, w);
        public void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, double*, void>)vtable.glProgramNamedParameter4dvNV)(id, len, name, v);
        public void glProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, float, float, float, float, void>)vtable.glProgramNamedParameter4fNV)(id, len, name, x, y, z, w);
        public void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, float*, void>)vtable.glProgramNamedParameter4fvNV)(id, len, name, v);
        public void glProgramParameter4dNV(uint target, uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, uint, double, double, double, double, void>)vtable.glProgramParameter4dNV)(target, index, x, y, z, w);
        public void glProgramParameter4dvNV(uint target, uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glProgramParameter4dvNV)(target, index, v);
        public void glProgramParameter4fNV(uint target, uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, float, float, void>)vtable.glProgramParameter4fNV)(target, index, x, y, z, w);
        public void glProgramParameter4fvNV(uint target, uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glProgramParameter4fvNV)(target, index, v);
        public void glProgramParameteri(uint program, uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glProgramParameteri)(program, pname, value);
        public void glProgramParameteriARB(uint program, uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glProgramParameteriARB)(program, pname, value);
        public void glProgramParameteriEXT(uint program, uint pname, int value) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glProgramParameteriEXT)(program, pname, value);
        public void glProgramParameters4dvNV(uint target, uint index, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, double*, void>)vtable.glProgramParameters4dvNV)(target, index, count, v);
        public void glProgramParameters4fvNV(uint target, uint index, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glProgramParameters4fvNV)(target, index, count, v);
        public void glProgramPathFragmentInputGenNV(uint program, int location, uint genMode, int components, float* coeffs) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, float*, void>)vtable.glProgramPathFragmentInputGenNV)(program, location, genMode, components, coeffs);
        public void glProgramStringARB(uint target, uint format, int len, void* str) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void*, void>)vtable.glProgramStringARB)(target, format, len, str);
        public void glProgramSubroutineParametersuivNV(uint target, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glProgramSubroutineParametersuivNV)(target, count, parameters);
        public void glProgramUniform1d(uint program, int location, double v0) => ((delegate* unmanaged[Cdecl]<uint, int, double, void>)vtable.glProgramUniform1d)(program, location, v0);
        public void glProgramUniform1dEXT(uint program, int location, double x) => ((delegate* unmanaged[Cdecl]<uint, int, double, void>)vtable.glProgramUniform1dEXT)(program, location, x);
        public void glProgramUniform1dv(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform1dv)(program, location, count, value);
        public void glProgramUniform1dvEXT(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform1dvEXT)(program, location, count, value);
        public void glProgramUniform1f(uint program, int location, float v0) => ((delegate* unmanaged[Cdecl]<uint, int, float, void>)vtable.glProgramUniform1f)(program, location, v0);
        public void glProgramUniform1fEXT(uint program, int location, float v0) => ((delegate* unmanaged[Cdecl]<uint, int, float, void>)vtable.glProgramUniform1fEXT)(program, location, v0);
        public void glProgramUniform1fv(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform1fv)(program, location, count, value);
        public void glProgramUniform1fvEXT(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform1fvEXT)(program, location, count, value);
        public void glProgramUniform1i(uint program, int location, int v0) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glProgramUniform1i)(program, location, v0);
        public void glProgramUniform1i64ARB(uint program, int location, long x) => ((delegate* unmanaged[Cdecl]<uint, int, long, void>)vtable.glProgramUniform1i64ARB)(program, location, x);
        public void glProgramUniform1i64NV(uint program, int location, long x) => ((delegate* unmanaged[Cdecl]<uint, int, long, void>)vtable.glProgramUniform1i64NV)(program, location, x);
        public void glProgramUniform1i64vARB(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform1i64vARB)(program, location, count, value);
        public void glProgramUniform1i64vNV(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform1i64vNV)(program, location, count, value);
        public void glProgramUniform1iEXT(uint program, int location, int v0) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glProgramUniform1iEXT)(program, location, v0);
        public void glProgramUniform1iv(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform1iv)(program, location, count, value);
        public void glProgramUniform1ivEXT(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform1ivEXT)(program, location, count, value);
        public void glProgramUniform1ui(uint program, int location, uint v0) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glProgramUniform1ui)(program, location, v0);
        public void glProgramUniform1ui64ARB(uint program, int location, ulong x) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)vtable.glProgramUniform1ui64ARB)(program, location, x);
        public void glProgramUniform1ui64NV(uint program, int location, ulong x) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)vtable.glProgramUniform1ui64NV)(program, location, x);
        public void glProgramUniform1ui64vARB(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform1ui64vARB)(program, location, count, value);
        public void glProgramUniform1ui64vNV(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform1ui64vNV)(program, location, count, value);
        public void glProgramUniform1uiEXT(uint program, int location, uint v0) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glProgramUniform1uiEXT)(program, location, v0);
        public void glProgramUniform1uiv(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform1uiv)(program, location, count, value);
        public void glProgramUniform1uivEXT(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform1uivEXT)(program, location, count, value);
        public void glProgramUniform2d(uint program, int location, double v0, double v1) => ((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)vtable.glProgramUniform2d)(program, location, v0, v1);
        public void glProgramUniform2dEXT(uint program, int location, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)vtable.glProgramUniform2dEXT)(program, location, x, y);
        public void glProgramUniform2dv(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform2dv)(program, location, count, value);
        public void glProgramUniform2dvEXT(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform2dvEXT)(program, location, count, value);
        public void glProgramUniform2f(uint program, int location, float v0, float v1) => ((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)vtable.glProgramUniform2f)(program, location, v0, v1);
        public void glProgramUniform2fEXT(uint program, int location, float v0, float v1) => ((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)vtable.glProgramUniform2fEXT)(program, location, v0, v1);
        public void glProgramUniform2fv(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform2fv)(program, location, count, value);
        public void glProgramUniform2fvEXT(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform2fvEXT)(program, location, count, value);
        public void glProgramUniform2i(uint program, int location, int v0, int v1) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glProgramUniform2i)(program, location, v0, v1);
        public void glProgramUniform2i64ARB(uint program, int location, long x, long y) => ((delegate* unmanaged[Cdecl]<uint, int, long, long, void>)vtable.glProgramUniform2i64ARB)(program, location, x, y);
        public void glProgramUniform2i64NV(uint program, int location, long x, long y) => ((delegate* unmanaged[Cdecl]<uint, int, long, long, void>)vtable.glProgramUniform2i64NV)(program, location, x, y);
        public void glProgramUniform2i64vARB(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform2i64vARB)(program, location, count, value);
        public void glProgramUniform2i64vNV(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform2i64vNV)(program, location, count, value);
        public void glProgramUniform2iEXT(uint program, int location, int v0, int v1) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glProgramUniform2iEXT)(program, location, v0, v1);
        public void glProgramUniform2iv(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform2iv)(program, location, count, value);
        public void glProgramUniform2ivEXT(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform2ivEXT)(program, location, count, value);
        public void glProgramUniform2ui(uint program, int location, uint v0, uint v1) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)vtable.glProgramUniform2ui)(program, location, v0, v1);
        public void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, void>)vtable.glProgramUniform2ui64ARB)(program, location, x, y);
        public void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, void>)vtable.glProgramUniform2ui64NV)(program, location, x, y);
        public void glProgramUniform2ui64vARB(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform2ui64vARB)(program, location, count, value);
        public void glProgramUniform2ui64vNV(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform2ui64vNV)(program, location, count, value);
        public void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)vtable.glProgramUniform2uiEXT)(program, location, v0, v1);
        public void glProgramUniform2uiv(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform2uiv)(program, location, count, value);
        public void glProgramUniform2uivEXT(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform2uivEXT)(program, location, count, value);
        public void glProgramUniform3d(uint program, int location, double v0, double v1, double v2) => ((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)vtable.glProgramUniform3d)(program, location, v0, v1, v2);
        public void glProgramUniform3dEXT(uint program, int location, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)vtable.glProgramUniform3dEXT)(program, location, x, y, z);
        public void glProgramUniform3dv(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform3dv)(program, location, count, value);
        public void glProgramUniform3dvEXT(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform3dvEXT)(program, location, count, value);
        public void glProgramUniform3f(uint program, int location, float v0, float v1, float v2) => ((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)vtable.glProgramUniform3f)(program, location, v0, v1, v2);
        public void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2) => ((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)vtable.glProgramUniform3fEXT)(program, location, v0, v1, v2);
        public void glProgramUniform3fv(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform3fv)(program, location, count, value);
        public void glProgramUniform3fvEXT(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform3fvEXT)(program, location, count, value);
        public void glProgramUniform3i(uint program, int location, int v0, int v1, int v2) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glProgramUniform3i)(program, location, v0, v1, v2);
        public void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<uint, int, long, long, long, void>)vtable.glProgramUniform3i64ARB)(program, location, x, y, z);
        public void glProgramUniform3i64NV(uint program, int location, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<uint, int, long, long, long, void>)vtable.glProgramUniform3i64NV)(program, location, x, y, z);
        public void glProgramUniform3i64vARB(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform3i64vARB)(program, location, count, value);
        public void glProgramUniform3i64vNV(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform3i64vNV)(program, location, count, value);
        public void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glProgramUniform3iEXT)(program, location, v0, v1, v2);
        public void glProgramUniform3iv(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform3iv)(program, location, count, value);
        public void glProgramUniform3ivEXT(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform3ivEXT)(program, location, count, value);
        public void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)vtable.glProgramUniform3ui)(program, location, v0, v1, v2);
        public void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, void>)vtable.glProgramUniform3ui64ARB)(program, location, x, y, z);
        public void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, void>)vtable.glProgramUniform3ui64NV)(program, location, x, y, z);
        public void glProgramUniform3ui64vARB(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform3ui64vARB)(program, location, count, value);
        public void glProgramUniform3ui64vNV(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform3ui64vNV)(program, location, count, value);
        public void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)vtable.glProgramUniform3uiEXT)(program, location, v0, v1, v2);
        public void glProgramUniform3uiv(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform3uiv)(program, location, count, value);
        public void glProgramUniform3uivEXT(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform3uivEXT)(program, location, count, value);
        public void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3) => ((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)vtable.glProgramUniform4d)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)vtable.glProgramUniform4dEXT)(program, location, x, y, z, w);
        public void glProgramUniform4dv(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform4dv)(program, location, count, value);
        public void glProgramUniform4dvEXT(uint program, int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)vtable.glProgramUniform4dvEXT)(program, location, count, value);
        public void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3) => ((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)vtable.glProgramUniform4f)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3) => ((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)vtable.glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4fv(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform4fv)(program, location, count, value);
        public void glProgramUniform4fvEXT(uint program, int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)vtable.glProgramUniform4fvEXT)(program, location, count, value);
        public void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)vtable.glProgramUniform4i)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<uint, int, long, long, long, long, void>)vtable.glProgramUniform4i64ARB)(program, location, x, y, z, w);
        public void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<uint, int, long, long, long, long, void>)vtable.glProgramUniform4i64NV)(program, location, x, y, z, w);
        public void glProgramUniform4i64vARB(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform4i64vARB)(program, location, count, value);
        public void glProgramUniform4i64vNV(uint program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)vtable.glProgramUniform4i64vNV)(program, location, count, value);
        public void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)vtable.glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4iv(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform4iv)(program, location, count, value);
        public void glProgramUniform4ivEXT(uint program, int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)vtable.glProgramUniform4ivEXT)(program, location, count, value);
        public void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)vtable.glProgramUniform4ui)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, ulong, void>)vtable.glProgramUniform4ui64ARB)(program, location, x, y, z, w);
        public void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, ulong, void>)vtable.glProgramUniform4ui64NV)(program, location, x, y, z, w);
        public void glProgramUniform4ui64vARB(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform4ui64vARB)(program, location, count, value);
        public void glProgramUniform4ui64vNV(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniform4ui64vNV)(program, location, count, value);
        public void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)vtable.glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);
        public void glProgramUniform4uiv(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform4uiv)(program, location, count, value);
        public void glProgramUniform4uivEXT(uint program, int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)vtable.glProgramUniform4uivEXT)(program, location, count, value);
        public void glProgramUniformHandleui64ARB(uint program, int location, ulong value) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)vtable.glProgramUniformHandleui64ARB)(program, location, value);
        public void glProgramUniformHandleui64IMG(uint program, int location, ulong value) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)vtable.glProgramUniformHandleui64IMG)(program, location, value);
        public void glProgramUniformHandleui64NV(uint program, int location, ulong value) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)vtable.glProgramUniformHandleui64NV)(program, location, value);
        public void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniformHandleui64vARB)(program, location, count, values);
        public void glProgramUniformHandleui64vIMG(uint program, int location, int count, ulong* values) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniformHandleui64vIMG)(program, location, count, values);
        public void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong* values) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniformHandleui64vNV)(program, location, count, values);
        public void glProgramUniformMatrix2dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix2dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix2fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x3dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix2x3dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x3fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix2x3fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x4dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix2x4dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x4fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix2x4fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix3dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix3fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x2dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix3x2dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x2fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix3x2fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x4dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix3x4dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x4fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix3x4fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix4dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix4fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x2dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix4x2dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x2fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix4x2fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x3dv(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix4x3dv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)vtable.glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x3fv(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix4x3fv)(program, location, count, transpose, value);
        public void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)vtable.glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);
        public void glProgramUniformui64NV(uint program, int location, ulong value) => ((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)vtable.glProgramUniformui64NV)(program, location, value);
        public void glProgramUniformui64vNV(uint program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)vtable.glProgramUniformui64vNV)(program, location, count, value);
        public void glProgramVertexLimitNV(uint target, int limit) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glProgramVertexLimitNV)(target, limit);
        public void glProvokingVertex(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glProvokingVertex)(mode);
        public void glProvokingVertexEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glProvokingVertexEXT)(mode);
        public void glPushAttrib(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPushAttrib)(mask);
        public void glPushClientAttrib(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPushClientAttrib)(mask);
        public void glPushClientAttribDefaultEXT(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPushClientAttribDefaultEXT)(mask);
        public void glPushDebugGroup(uint source, uint id, int length, byte* message) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte*, void>)vtable.glPushDebugGroup)(source, id, length, message);
        public void glPushDebugGroupKHR(uint source, uint id, int length, byte* message) => ((delegate* unmanaged[Cdecl]<uint, uint, int, byte*, void>)vtable.glPushDebugGroupKHR)(source, id, length, message);
        public void glPushGroupMarkerEXT(int length, byte* marker) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glPushGroupMarkerEXT)(length, marker);
        public void glPushMatrix() => ((delegate* unmanaged[Cdecl]<void>)vtable.glPushMatrix)();
        public void glPushName(uint name) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glPushName)(name);
        public void glQueryCounter(uint id, uint target) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glQueryCounter)(id, target);
        public void glQueryCounterEXT(uint id, uint target) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glQueryCounterEXT)(id, target);
        public uint glQueryMatrixxOES(int* mantissa, int* exponent) => ((delegate* unmanaged[Cdecl]<int*, int*, uint>)vtable.glQueryMatrixxOES)(mantissa, exponent);
        public void glQueryObjectParameteruiAMD(uint target, uint id, uint pname, uint param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glQueryObjectParameteruiAMD)(target, id, pname, param);
        public int glQueryResourceNV(uint queryType, int tagId, uint count, int* buffer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int*, int>)vtable.glQueryResourceNV)(queryType, tagId, count, buffer);
        public void glQueryResourceTagNV(int tagId, byte* tagString) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glQueryResourceTagNV)(tagId, tagString);
        public void glRasterPos2d(double x, double y) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glRasterPos2d)(x, y);
        public void glRasterPos2dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glRasterPos2dv)(v);
        public void glRasterPos2f(float x, float y) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glRasterPos2f)(x, y);
        public void glRasterPos2fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glRasterPos2fv)(v);
        public void glRasterPos2i(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glRasterPos2i)(x, y);
        public void glRasterPos2iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glRasterPos2iv)(v);
        public void glRasterPos2s(short x, short y) => ((delegate* unmanaged[Cdecl]<short, short, void>)vtable.glRasterPos2s)(x, y);
        public void glRasterPos2sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glRasterPos2sv)(v);
        public void glRasterPos2xOES(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glRasterPos2xOES)(x, y);
        public void glRasterPos2xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glRasterPos2xvOES)(coords);
        public void glRasterPos3d(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glRasterPos3d)(x, y, z);
        public void glRasterPos3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glRasterPos3dv)(v);
        public void glRasterPos3f(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glRasterPos3f)(x, y, z);
        public void glRasterPos3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glRasterPos3fv)(v);
        public void glRasterPos3i(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glRasterPos3i)(x, y, z);
        public void glRasterPos3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glRasterPos3iv)(v);
        public void glRasterPos3s(short x, short y, short z) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glRasterPos3s)(x, y, z);
        public void glRasterPos3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glRasterPos3sv)(v);
        public void glRasterPos3xOES(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glRasterPos3xOES)(x, y, z);
        public void glRasterPos3xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glRasterPos3xvOES)(coords);
        public void glRasterPos4d(double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glRasterPos4d)(x, y, z, w);
        public void glRasterPos4dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glRasterPos4dv)(v);
        public void glRasterPos4f(float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glRasterPos4f)(x, y, z, w);
        public void glRasterPos4fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glRasterPos4fv)(v);
        public void glRasterPos4i(int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glRasterPos4i)(x, y, z, w);
        public void glRasterPos4iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glRasterPos4iv)(v);
        public void glRasterPos4s(short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<short, short, short, short, void>)vtable.glRasterPos4s)(x, y, z, w);
        public void glRasterPos4sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glRasterPos4sv)(v);
        public void glRasterPos4xOES(int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glRasterPos4xOES)(x, y, z, w);
        public void glRasterPos4xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glRasterPos4xvOES)(coords);
        public void glRasterSamplesEXT(uint samples, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, byte, void>)vtable.glRasterSamplesEXT)(samples, fixedsamplelocations);
        public void glReadBuffer(uint src) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glReadBuffer)(src);
        public void glReadBufferIndexedEXT(uint src, int index) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glReadBufferIndexedEXT)(src, index);
        public void glReadBufferNV(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glReadBufferNV)(mode);
        public void glReadInstrumentsSGIX(int marker) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glReadInstrumentsSGIX)(marker);
        public void glReadPixels(int x, int y, int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, void*, void>)vtable.glReadPixels)(x, y, width, height, format, type, pixels);
        public void glReadnPixels(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data) => ((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, int, void*, void>)vtable.glReadnPixels)(x, y, width, height, format, type, bufSize, data);
        public void glReadnPixelsARB(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data) => ((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, int, void*, void>)vtable.glReadnPixelsARB)(x, y, width, height, format, type, bufSize, data);
        public void glReadnPixelsEXT(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data) => ((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, int, void*, void>)vtable.glReadnPixelsEXT)(x, y, width, height, format, type, bufSize, data);
        public void glReadnPixelsKHR(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data) => ((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, int, void*, void>)vtable.glReadnPixelsKHR)(x, y, width, height, format, type, bufSize, data);
        public byte glReleaseKeyedMutexWin32EXT(uint memory, ulong key) => ((delegate* unmanaged[Cdecl]<uint, ulong, byte>)vtable.glReleaseKeyedMutexWin32EXT)(memory, key);
        public void glRectd(double x1, double y1, double x2, double y2) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glRectd)(x1, y1, x2, y2);
        public void glRectdv(double* v1, double* v2) => ((delegate* unmanaged[Cdecl]<double*, double*, void>)vtable.glRectdv)(v1, v2);
        public void glRectf(float x1, float y1, float x2, float y2) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glRectf)(x1, y1, x2, y2);
        public void glRectfv(float* v1, float* v2) => ((delegate* unmanaged[Cdecl]<float*, float*, void>)vtable.glRectfv)(v1, v2);
        public void glRecti(int x1, int y1, int x2, int y2) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glRecti)(x1, y1, x2, y2);
        public void glRectiv(int* v1, int* v2) => ((delegate* unmanaged[Cdecl]<int*, int*, void>)vtable.glRectiv)(v1, v2);
        public void glRects(short x1, short y1, short x2, short y2) => ((delegate* unmanaged[Cdecl]<short, short, short, short, void>)vtable.glRects)(x1, y1, x2, y2);
        public void glRectsv(short* v1, short* v2) => ((delegate* unmanaged[Cdecl]<short*, short*, void>)vtable.glRectsv)(v1, v2);
        public void glRectxOES(int x1, int y1, int x2, int y2) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glRectxOES)(x1, y1, x2, y2);
        public void glRectxvOES(int* v1, int* v2) => ((delegate* unmanaged[Cdecl]<int*, int*, void>)vtable.glRectxvOES)(v1, v2);
        public void glReferencePlaneSGIX(double* equation) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glReferencePlaneSGIX)(equation);
        public void glReleaseShaderCompiler() => ((delegate* unmanaged[Cdecl]<void>)vtable.glReleaseShaderCompiler)();
        public void glRenderGpuMaskNV(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glRenderGpuMaskNV)(mask);
        public int glRenderMode(uint mode) => ((delegate* unmanaged[Cdecl]<uint, int>)vtable.glRenderMode)(mode);
        public void glRenderbufferStorage(uint target, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, void>)vtable.glRenderbufferStorage)(target, internalformat, width, height);
        public void glRenderbufferStorageEXT(uint target, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, void>)vtable.glRenderbufferStorageEXT)(target, internalformat, width, height);
        public void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleANGLE(uint target, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleANGLE)(target, samples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleAPPLE(uint target, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleAPPLE)(target, samples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleAdvancedAMD(uint target, int samples, int storageSamples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleAdvancedAMD)(target, samples, storageSamples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleEXT(uint target, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleIMG(uint target, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleIMG)(target, samples, internalformat, width, height);
        public void glRenderbufferStorageMultisampleNV(uint target, int samples, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glRenderbufferStorageMultisampleNV)(target, samples, internalformat, width, height);
        public void glRenderbufferStorageOES(uint target, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, void>)vtable.glRenderbufferStorageOES)(target, internalformat, width, height);
        public void glReplacementCodePointerSUN(uint type, int stride, void** pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void**, void>)vtable.glReplacementCodePointerSUN)(type, stride, pointer);
        public void glReplacementCodeubSUN(byte code) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glReplacementCodeubSUN)(code);
        public void glReplacementCodeubvSUN(byte* code) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glReplacementCodeubvSUN)(code);
        public void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, float, float, void>)vtable.glReplacementCodeuiColor3fVertex3fSUN)(rc, r, g, b, x, y, z);
        public void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, float*, void>)vtable.glReplacementCodeuiColor3fVertex3fvSUN)(rc, c, v);
        public void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, float, float, float, float, float, float, void>)vtable.glReplacementCodeuiColor4fNormal3fVertex3fSUN)(rc, r, g, b, a, nx, ny, nz, x, y, z);
        public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, float*, float*, void>)vtable.glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(rc, c, n, v);
        public void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, float, float, float, void>)vtable.glReplacementCodeuiColor4ubVertex3fSUN)(rc, r, g, b, a, x, y, z);
        public void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v) => ((delegate* unmanaged[Cdecl]<uint*, byte*, float*, void>)vtable.glReplacementCodeuiColor4ubVertex3fvSUN)(rc, c, v);
        public void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, float, float, void>)vtable.glReplacementCodeuiNormal3fVertex3fSUN)(rc, nx, ny, nz, x, y, z);
        public void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, float*, void>)vtable.glReplacementCodeuiNormal3fVertex3fvSUN)(rc, n, v);
        public void glReplacementCodeuiSUN(uint code) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glReplacementCodeuiSUN)(code);
        public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, float, float, float, float, float, float, float, float, void>)vtable.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, float*, float*, float*, void>)vtable.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(rc, tc, c, n, v);
        public void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, float, float, float, float, void>)vtable.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(rc, s, t, nx, ny, nz, x, y, z);
        public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, float*, float*, void>)vtable.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(rc, tc, n, v);
        public void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, float, void>)vtable.glReplacementCodeuiTexCoord2fVertex3fSUN)(rc, s, t, x, y, z);
        public void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, float*, void>)vtable.glReplacementCodeuiTexCoord2fVertex3fvSUN)(rc, tc, v);
        public void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glReplacementCodeuiVertex3fSUN)(rc, x, y, z);
        public void glReplacementCodeuiVertex3fvSUN(uint* rc, float* v) => ((delegate* unmanaged[Cdecl]<uint*, float*, void>)vtable.glReplacementCodeuiVertex3fvSUN)(rc, v);
        public void glReplacementCodeuivSUN(uint* code) => ((delegate* unmanaged[Cdecl]<uint*, void>)vtable.glReplacementCodeuivSUN)(code);
        public void glReplacementCodeusSUN(ushort code) => ((delegate* unmanaged[Cdecl]<ushort, void>)vtable.glReplacementCodeusSUN)(code);
        public void glReplacementCodeusvSUN(ushort* code) => ((delegate* unmanaged[Cdecl]<ushort*, void>)vtable.glReplacementCodeusvSUN)(code);
        public void glRequestResidentProgramsNV(int n, uint* programs) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glRequestResidentProgramsNV)(n, programs);
        public void glResetHistogram(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glResetHistogram)(target);
        public void glResetHistogramEXT(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glResetHistogramEXT)(target);
        public void glResetMemoryObjectParameterNV(uint memory, uint pname) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glResetMemoryObjectParameterNV)(memory, pname);
        public void glResetMinmax(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glResetMinmax)(target);
        public void glResetMinmaxEXT(uint target) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glResetMinmaxEXT)(target);
        public void glResizeBuffersMESA() => ((delegate* unmanaged[Cdecl]<void>)vtable.glResizeBuffersMESA)();
        public void glResolveDepthValuesNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glResolveDepthValuesNV)();
        public void glResolveMultisampleFramebufferAPPLE() => ((delegate* unmanaged[Cdecl]<void>)vtable.glResolveMultisampleFramebufferAPPLE)();
        public void glResumeTransformFeedback() => ((delegate* unmanaged[Cdecl]<void>)vtable.glResumeTransformFeedback)();
        public void glResumeTransformFeedbackNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glResumeTransformFeedbackNV)();
        public void glRotated(double angle, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glRotated)(angle, x, y, z);
        public void glRotatef(float angle, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glRotatef)(angle, x, y, z);
        public void glRotatex(int angle, int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glRotatex)(angle, x, y, z);
        public void glRotatexOES(int angle, int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glRotatexOES)(angle, x, y, z);
        public void glSampleCoverage(float value, byte invert) => ((delegate* unmanaged[Cdecl]<float, byte, void>)vtable.glSampleCoverage)(value, invert);
        public void glSampleCoverageARB(float value, byte invert) => ((delegate* unmanaged[Cdecl]<float, byte, void>)vtable.glSampleCoverageARB)(value, invert);
        public void glSampleCoveragex(int value, byte invert) => ((delegate* unmanaged[Cdecl]<int, byte, void>)vtable.glSampleCoveragex)(value, invert);
        public void glSampleCoveragexOES(int value, byte invert) => ((delegate* unmanaged[Cdecl]<int, byte, void>)vtable.glSampleCoveragexOES)(value, invert);
        public void glSampleMapATI(uint dst, uint interp, uint swizzle) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glSampleMapATI)(dst, interp, swizzle);
        public void glSampleMaskEXT(float value, byte invert) => ((delegate* unmanaged[Cdecl]<float, byte, void>)vtable.glSampleMaskEXT)(value, invert);
        public void glSampleMaskIndexedNV(uint index, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glSampleMaskIndexedNV)(index, mask);
        public void glSampleMaskSGIS(float value, byte invert) => ((delegate* unmanaged[Cdecl]<float, byte, void>)vtable.glSampleMaskSGIS)(value, invert);
        public void glSampleMaski(uint maskNumber, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glSampleMaski)(maskNumber, mask);
        public void glSamplePatternEXT(uint pattern) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glSamplePatternEXT)(pattern);
        public void glSamplePatternSGIS(uint pattern) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glSamplePatternSGIS)(pattern);
        public void glSamplerParameterIiv(uint sampler, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glSamplerParameterIiv)(sampler, pname, param);
        public void glSamplerParameterIivEXT(uint sampler, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glSamplerParameterIivEXT)(sampler, pname, param);
        public void glSamplerParameterIivOES(uint sampler, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glSamplerParameterIivOES)(sampler, pname, param);
        public void glSamplerParameterIuiv(uint sampler, uint pname, uint* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glSamplerParameterIuiv)(sampler, pname, param);
        public void glSamplerParameterIuivEXT(uint sampler, uint pname, uint* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glSamplerParameterIuivEXT)(sampler, pname, param);
        public void glSamplerParameterIuivOES(uint sampler, uint pname, uint* param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glSamplerParameterIuivOES)(sampler, pname, param);
        public void glSamplerParameterf(uint sampler, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glSamplerParameterf)(sampler, pname, param);
        public void glSamplerParameterfv(uint sampler, uint pname, float* param) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glSamplerParameterfv)(sampler, pname, param);
        public void glSamplerParameteri(uint sampler, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glSamplerParameteri)(sampler, pname, param);
        public void glSamplerParameteriv(uint sampler, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glSamplerParameteriv)(sampler, pname, param);
        public void glScaled(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glScaled)(x, y, z);
        public void glScalef(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glScalef)(x, y, z);
        public void glScalex(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glScalex)(x, y, z);
        public void glScalexOES(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glScalexOES)(x, y, z);
        public void glScissor(int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glScissor)(x, y, width, height);
        public void glScissorArrayv(uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glScissorArrayv)(first, count, v);
        public void glScissorArrayvNV(uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glScissorArrayvNV)(first, count, v);
        public void glScissorArrayvOES(uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glScissorArrayvOES)(first, count, v);
        public void glScissorExclusiveArrayvNV(uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glScissorExclusiveArrayvNV)(first, count, v);
        public void glScissorExclusiveNV(int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glScissorExclusiveNV)(x, y, width, height);
        public void glScissorIndexed(uint index, int left, int bottom, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glScissorIndexed)(index, left, bottom, width, height);
        public void glScissorIndexedNV(uint index, int left, int bottom, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glScissorIndexedNV)(index, left, bottom, width, height);
        public void glScissorIndexedOES(uint index, int left, int bottom, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glScissorIndexedOES)(index, left, bottom, width, height);
        public void glScissorIndexedv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glScissorIndexedv)(index, v);
        public void glScissorIndexedvNV(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glScissorIndexedvNV)(index, v);
        public void glScissorIndexedvOES(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glScissorIndexedvOES)(index, v);
        public void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glSecondaryColor3b)(red, green, blue);
        public void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glSecondaryColor3bEXT)(red, green, blue);
        public void glSecondaryColor3bv(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glSecondaryColor3bv)(v);
        public void glSecondaryColor3bvEXT(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glSecondaryColor3bvEXT)(v);
        public void glSecondaryColor3d(double red, double green, double blue) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glSecondaryColor3d)(red, green, blue);
        public void glSecondaryColor3dEXT(double red, double green, double blue) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glSecondaryColor3dEXT)(red, green, blue);
        public void glSecondaryColor3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glSecondaryColor3dv)(v);
        public void glSecondaryColor3dvEXT(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glSecondaryColor3dvEXT)(v);
        public void glSecondaryColor3f(float red, float green, float blue) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glSecondaryColor3f)(red, green, blue);
        public void glSecondaryColor3fEXT(float red, float green, float blue) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glSecondaryColor3fEXT)(red, green, blue);
        public void glSecondaryColor3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glSecondaryColor3fv)(v);
        public void glSecondaryColor3fvEXT(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glSecondaryColor3fvEXT)(v);
        public void glSecondaryColor3hNV(Half red, Half green, Half blue) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)vtable.glSecondaryColor3hNV)(red, green, blue);
        public void glSecondaryColor3hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glSecondaryColor3hvNV)(v);
        public void glSecondaryColor3i(int red, int green, int blue) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glSecondaryColor3i)(red, green, blue);
        public void glSecondaryColor3iEXT(int red, int green, int blue) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glSecondaryColor3iEXT)(red, green, blue);
        public void glSecondaryColor3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glSecondaryColor3iv)(v);
        public void glSecondaryColor3ivEXT(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glSecondaryColor3ivEXT)(v);
        public void glSecondaryColor3s(short red, short green, short blue) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glSecondaryColor3s)(red, green, blue);
        public void glSecondaryColor3sEXT(short red, short green, short blue) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glSecondaryColor3sEXT)(red, green, blue);
        public void glSecondaryColor3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glSecondaryColor3sv)(v);
        public void glSecondaryColor3svEXT(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glSecondaryColor3svEXT)(v);
        public void glSecondaryColor3ub(byte red, byte green, byte blue) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, void>)vtable.glSecondaryColor3ub)(red, green, blue);
        public void glSecondaryColor3ubEXT(byte red, byte green, byte blue) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, void>)vtable.glSecondaryColor3ubEXT)(red, green, blue);
        public void glSecondaryColor3ubv(byte* v) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glSecondaryColor3ubv)(v);
        public void glSecondaryColor3ubvEXT(byte* v) => ((delegate* unmanaged[Cdecl]<byte*, void>)vtable.glSecondaryColor3ubvEXT)(v);
        public void glSecondaryColor3ui(uint red, uint green, uint blue) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glSecondaryColor3ui)(red, green, blue);
        public void glSecondaryColor3uiEXT(uint red, uint green, uint blue) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glSecondaryColor3uiEXT)(red, green, blue);
        public void glSecondaryColor3uiv(uint* v) => ((delegate* unmanaged[Cdecl]<uint*, void>)vtable.glSecondaryColor3uiv)(v);
        public void glSecondaryColor3uivEXT(uint* v) => ((delegate* unmanaged[Cdecl]<uint*, void>)vtable.glSecondaryColor3uivEXT)(v);
        public void glSecondaryColor3us(ushort red, ushort green, ushort blue) => ((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, void>)vtable.glSecondaryColor3us)(red, green, blue);
        public void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue) => ((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, void>)vtable.glSecondaryColor3usEXT)(red, green, blue);
        public void glSecondaryColor3usv(ushort* v) => ((delegate* unmanaged[Cdecl]<ushort*, void>)vtable.glSecondaryColor3usv)(v);
        public void glSecondaryColor3usvEXT(ushort* v) => ((delegate* unmanaged[Cdecl]<ushort*, void>)vtable.glSecondaryColor3usvEXT)(v);
        public void glSecondaryColorFormatNV(int size, uint type, int stride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void>)vtable.glSecondaryColorFormatNV)(size, type, stride);
        public void glSecondaryColorP3ui(uint type, uint color) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glSecondaryColorP3ui)(type, color);
        public void glSecondaryColorP3uiv(uint type, uint* color) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glSecondaryColorP3uiv)(type, color);
        public void glSecondaryColorPointer(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glSecondaryColorPointer)(size, type, stride, pointer);
        public void glSecondaryColorPointerEXT(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glSecondaryColorPointerEXT)(size, type, stride, pointer);
        public void glSecondaryColorPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void**, int, void>)vtable.glSecondaryColorPointerListIBM)(size, type, stride, pointer, ptrstride);
        public void glSelectBuffer(int size, uint* buffer) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glSelectBuffer)(size, buffer);
        public void glSelectPerfMonitorCountersAMD(uint monitor, byte enable, uint group, int numCounters, uint* counterList) => ((delegate* unmanaged[Cdecl]<uint, byte, uint, int, uint*, void>)vtable.glSelectPerfMonitorCountersAMD)(monitor, enable, group, numCounters, counterList);
        public void glSemaphoreParameterivNV(uint semaphore, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glSemaphoreParameterivNV)(semaphore, pname, parameters);
        public void glSemaphoreParameterui64vEXT(uint semaphore, uint pname, ulong* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong*, void>)vtable.glSemaphoreParameterui64vEXT)(semaphore, pname, parameters);
        public void glSeparableFilter2D(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, void*, void*, void>)vtable.glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);
        public void glSeparableFilter2DEXT(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, void*, void*, void>)vtable.glSeparableFilter2DEXT)(target, internalformat, width, height, format, type, row, column);
        public void glSetFenceAPPLE(uint fence) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glSetFenceAPPLE)(fence);
        public void glSetFenceNV(uint fence, uint condition) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glSetFenceNV)(fence, condition);
        public void glSetFragmentShaderConstantATI(uint dst, float* value) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glSetFragmentShaderConstantATI)(dst, value);
        public void glSetInvariantEXT(uint id, uint type, void* addr) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, void>)vtable.glSetInvariantEXT)(id, type, addr);
        public void glSetLocalConstantEXT(uint id, uint type, void* addr) => ((delegate* unmanaged[Cdecl]<uint, uint, void*, void>)vtable.glSetLocalConstantEXT)(id, type, addr);
        public void glSetMultisamplefvAMD(uint pname, uint index, float* val) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glSetMultisamplefvAMD)(pname, index, val);
        public void glShadeModel(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glShadeModel)(mode);
        public void glShaderBinary(int count, uint* shaders, uint binaryFormat, void* binary, int length) => ((delegate* unmanaged[Cdecl]<int, uint*, uint, void*, int, void>)vtable.glShaderBinary)(count, shaders, binaryFormat, binary, length);
        public void glShaderOp1EXT(uint op, uint res, uint arg1) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glShaderOp1EXT)(op, res, arg1);
        public void glShaderOp2EXT(uint op, uint res, uint arg1, uint arg2) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glShaderOp2EXT)(op, res, arg1, arg2);
        public void glShaderOp3EXT(uint op, uint res, uint arg1, uint arg2, uint arg3) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glShaderOp3EXT)(op, res, arg1, arg2, arg3);
        public void glShaderSource(uint shader, int count, byte** str, int* length) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, int*, void>)vtable.glShaderSource)(shader, count, str, length);
        public void glShaderSourceARB(nint shaderObj, int count, byte** str, int* length) => ((delegate* unmanaged[Cdecl]<nint, int, byte**, int*, void>)vtable.glShaderSourceARB)(shaderObj, count, str, length);
        public void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);
        public void glShadingRateImageBarrierNV(byte synchronize) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glShadingRateImageBarrierNV)(synchronize);
        public void glShadingRateQCOM(uint rate) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glShadingRateQCOM)(rate);
        public void glShadingRateImagePaletteNV(uint viewport, uint first, int count, uint* rates) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, void>)vtable.glShadingRateImagePaletteNV)(viewport, first, count, rates);
        public void glShadingRateSampleOrderNV(uint order) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glShadingRateSampleOrderNV)(order);
        public void glShadingRateSampleOrderCustomNV(uint rate, uint samples, int* locations) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glShadingRateSampleOrderCustomNV)(rate, samples, locations);
        public void glSharpenTexFuncSGIS(uint target, int n, float* points) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glSharpenTexFuncSGIS)(target, n, points);
        public void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* dstLayouts) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, uint, uint*, uint*, void>)vtable.glSignalSemaphoreEXT)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        public void glSignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, ulong*, void>)vtable.glSignalSemaphoreui64NVX)(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        public void glSpecializeShader(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue) => ((delegate* unmanaged[Cdecl]<uint, byte*, uint, uint*, uint*, void>)vtable.glSpecializeShader)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        public void glSpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue) => ((delegate* unmanaged[Cdecl]<uint, byte*, uint, uint*, uint*, void>)vtable.glSpecializeShaderARB)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        public void glSpriteParameterfSGIX(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glSpriteParameterfSGIX)(pname, param);
        public void glSpriteParameterfvSGIX(uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glSpriteParameterfvSGIX)(pname, parameters);
        public void glSpriteParameteriSGIX(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glSpriteParameteriSGIX)(pname, param);
        public void glSpriteParameterivSGIX(uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glSpriteParameterivSGIX)(pname, parameters);
        public void glStartInstrumentsSGIX() => ((delegate* unmanaged[Cdecl]<void>)vtable.glStartInstrumentsSGIX)();
        public void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glStartTilingQCOM)(x, y, width, height, preserveMask);
        public void glStateCaptureNV(uint state, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glStateCaptureNV)(state, mode);
        public void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag) => ((delegate* unmanaged[Cdecl]<int, uint, void>)vtable.glStencilClearTagEXT)(stencilTagBits, stencilClearTag);
        public void glStencilFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, uint, void*, uint, uint, uint, uint, float*, void>)vtable.glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        public void glStencilFillPathNV(uint path, uint fillMode, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glStencilFillPathNV)(path, fillMode, mask);
        public void glStencilFunc(uint func, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glStencilFunc)(func, reference, mask);
        public void glStencilFuncSeparate(uint face, uint func, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, void>)vtable.glStencilFuncSeparate)(face, func, reference, mask);
        public void glStencilFuncSeparateATI(uint frontfunc, uint backfunc, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, void>)vtable.glStencilFuncSeparateATI)(frontfunc, backfunc, reference, mask);
        public void glStencilMask(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glStencilMask)(mask);
        public void glStencilMaskSeparate(uint face, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glStencilMaskSeparate)(face, mask);
        public void glStencilOp(uint fail, uint zfail, uint zpass) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glStencilOp)(fail, zfail, zpass);
        public void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glStencilOpSeparate)(face, sfail, dpfail, dppass);
        public void glStencilOpSeparateATI(uint face, uint sfail, uint dpfail, uint dppass) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glStencilOpSeparateATI)(face, sfail, dpfail, dppass);
        public void glStencilOpValueAMD(uint face, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glStencilOpValueAMD)(face, value);
        public void glStencilStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, uint, void*, uint, int, uint, uint, float*, void>)vtable.glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        public void glStencilStrokePathNV(uint path, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glStencilStrokePathNV)(path, reference, mask);
        public void glStencilThenCoverFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint coverMode, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, uint, void*, uint, uint, uint, uint, uint, float*, void>)vtable.glStencilThenCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        public void glStencilThenCoverFillPathNV(uint path, uint fillMode, uint mask, uint coverMode) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glStencilThenCoverFillPathNV)(path, fillMode, mask, coverMode);
        public void glStencilThenCoverStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint coverMode, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, uint, void*, uint, int, uint, uint, uint, float*, void>)vtable.glStencilThenCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        public void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, uint coverMode) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)vtable.glStencilThenCoverStrokePathNV)(path, reference, mask, coverMode);
        public void glStopInstrumentsSGIX(int marker) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glStopInstrumentsSGIX)(marker);
        public void glStringMarkerGREMEDY(int len, void* str) => ((delegate* unmanaged[Cdecl]<int, void*, void>)vtable.glStringMarkerGREMEDY)(len, str);
        public void glSubpixelPrecisionBiasNV(uint xbits, uint ybits) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glSubpixelPrecisionBiasNV)(xbits, ybits);
        public void glSwizzleEXT(uint res, uint input, uint outX, uint outY, uint outZ, uint outW) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glSwizzleEXT)(res, input, outX, outY, outZ, outW);
        public void glSyncTextureINTEL(uint texture) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glSyncTextureINTEL)(texture);
        public void glTagSampleBufferSGIX() => ((delegate* unmanaged[Cdecl]<void>)vtable.glTagSampleBufferSGIX)();
        public void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glTangent3bEXT)(tx, ty, tz);
        public void glTangent3bvEXT(sbyte* v) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glTangent3bvEXT)(v);
        public void glTangent3dEXT(double tx, double ty, double tz) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glTangent3dEXT)(tx, ty, tz);
        public void glTangent3dvEXT(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glTangent3dvEXT)(v);
        public void glTangent3fEXT(float tx, float ty, float tz) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glTangent3fEXT)(tx, ty, tz);
        public void glTangent3fvEXT(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glTangent3fvEXT)(v);
        public void glTangent3iEXT(int tx, int ty, int tz) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glTangent3iEXT)(tx, ty, tz);
        public void glTangent3ivEXT(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTangent3ivEXT)(v);
        public void glTangent3sEXT(short tx, short ty, short tz) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glTangent3sEXT)(tx, ty, tz);
        public void glTangent3svEXT(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glTangent3svEXT)(v);
        public void glTangentPointerEXT(uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glTangentPointerEXT)(type, stride, pointer);
        public void glTbufferMask3DFX(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glTbufferMask3DFX)(mask);
        public void glTessellationFactorAMD(float factor) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glTessellationFactorAMD)(factor);
        public void glTessellationModeAMD(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glTessellationModeAMD)(mode);
        public byte glTestFenceAPPLE(uint fence) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glTestFenceAPPLE)(fence);
        public byte glTestFenceNV(uint fence) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glTestFenceNV)(fence);
        public byte glTestObjectAPPLE(uint obj, uint name) => ((delegate* unmanaged[Cdecl]<uint, uint, byte>)vtable.glTestObjectAPPLE)(obj, name);
        public void glTexAttachMemoryNV(uint target, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong, void>)vtable.glTexAttachMemoryNV)(target, memory, offset);
        public void glTexBuffer(uint target, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTexBuffer)(target, internalformat, buffer);
        public void glTexBufferARB(uint target, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTexBufferARB)(target, internalformat, buffer);
        public void glTexBufferEXT(uint target, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTexBufferEXT)(target, internalformat, buffer);
        public void glTexBufferOES(uint target, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTexBufferOES)(target, internalformat, buffer);
        public void glTexBufferRange(uint target, uint internalformat, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glTexBufferRange)(target, internalformat, buffer, offset, size);
        public void glTexBufferRangeEXT(uint target, uint internalformat, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glTexBufferRangeEXT)(target, internalformat, buffer, offset, size);
        public void glTexBufferRangeOES(uint target, uint internalformat, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glTexBufferRangeOES)(target, internalformat, buffer, offset, size);
        public void glTexBumpParameterfvATI(uint pname, float* param) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glTexBumpParameterfvATI)(pname, param);
        public void glTexBumpParameterivATI(uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glTexBumpParameterivATI)(pname, param);
        public void glTexCoord1bOES(sbyte s) => ((delegate* unmanaged[Cdecl]<sbyte, void>)vtable.glTexCoord1bOES)(s);
        public void glTexCoord1bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glTexCoord1bvOES)(coords);
        public void glTexCoord1d(double s) => ((delegate* unmanaged[Cdecl]<double, void>)vtable.glTexCoord1d)(s);
        public void glTexCoord1dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glTexCoord1dv)(v);
        public void glTexCoord1f(float s) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glTexCoord1f)(s);
        public void glTexCoord1fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glTexCoord1fv)(v);
        public void glTexCoord1hNV(Half s) => ((delegate* unmanaged[Cdecl]<Half, void>)vtable.glTexCoord1hNV)(s);
        public void glTexCoord1hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glTexCoord1hvNV)(v);
        public void glTexCoord1i(int s) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glTexCoord1i)(s);
        public void glTexCoord1iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord1iv)(v);
        public void glTexCoord1s(short s) => ((delegate* unmanaged[Cdecl]<short, void>)vtable.glTexCoord1s)(s);
        public void glTexCoord1sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glTexCoord1sv)(v);
        public void glTexCoord1xOES(int s) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glTexCoord1xOES)(s);
        public void glTexCoord1xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord1xvOES)(coords);
        public void glTexCoord2bOES(sbyte s, sbyte t) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, void>)vtable.glTexCoord2bOES)(s, t);
        public void glTexCoord2bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glTexCoord2bvOES)(coords);
        public void glTexCoord2d(double s, double t) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glTexCoord2d)(s, t);
        public void glTexCoord2dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glTexCoord2dv)(v);
        public void glTexCoord2f(float s, float t) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glTexCoord2f)(s, t);
        public void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glTexCoord2fColor3fVertex3fSUN)(s, t, r, g, b, x, y, z);
        public void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, float*, void>)vtable.glTexCoord2fColor3fVertex3fvSUN)(tc, c, v);
        public void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, float, float, float, float, void>)vtable.glTexCoord2fColor4fNormal3fVertex3fSUN)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        public void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, float*, float*, void>)vtable.glTexCoord2fColor4fNormal3fVertex3fvSUN)(tc, c, n, v);
        public void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, byte, byte, byte, byte, float, float, float, void>)vtable.glTexCoord2fColor4ubVertex3fSUN)(s, t, r, g, b, a, x, y, z);
        public void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v) => ((delegate* unmanaged[Cdecl]<float*, byte*, float*, void>)vtable.glTexCoord2fColor4ubVertex3fvSUN)(tc, c, v);
        public void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glTexCoord2fNormal3fVertex3fSUN)(s, t, nx, ny, nz, x, y, z);
        public void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, float*, void>)vtable.glTexCoord2fNormal3fVertex3fvSUN)(tc, n, v);
        public void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, void>)vtable.glTexCoord2fVertex3fSUN)(s, t, x, y, z);
        public void glTexCoord2fVertex3fvSUN(float* tc, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, void>)vtable.glTexCoord2fVertex3fvSUN)(tc, v);
        public void glTexCoord2fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glTexCoord2fv)(v);
        public void glTexCoord2hNV(Half s, Half t) => ((delegate* unmanaged[Cdecl]<Half, Half, void>)vtable.glTexCoord2hNV)(s, t);
        public void glTexCoord2hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glTexCoord2hvNV)(v);
        public void glTexCoord2i(int s, int t) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glTexCoord2i)(s, t);
        public void glTexCoord2iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord2iv)(v);
        public void glTexCoord2s(short s, short t) => ((delegate* unmanaged[Cdecl]<short, short, void>)vtable.glTexCoord2s)(s, t);
        public void glTexCoord2sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glTexCoord2sv)(v);
        public void glTexCoord2xOES(int s, int t) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glTexCoord2xOES)(s, t);
        public void glTexCoord2xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord2xvOES)(coords);
        public void glTexCoord3bOES(sbyte s, sbyte t, sbyte r) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glTexCoord3bOES)(s, t, r);
        public void glTexCoord3bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glTexCoord3bvOES)(coords);
        public void glTexCoord3d(double s, double t, double r) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glTexCoord3d)(s, t, r);
        public void glTexCoord3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glTexCoord3dv)(v);
        public void glTexCoord3f(float s, float t, float r) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glTexCoord3f)(s, t, r);
        public void glTexCoord3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glTexCoord3fv)(v);
        public void glTexCoord3hNV(Half s, Half t, Half r) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)vtable.glTexCoord3hNV)(s, t, r);
        public void glTexCoord3hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glTexCoord3hvNV)(v);
        public void glTexCoord3i(int s, int t, int r) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glTexCoord3i)(s, t, r);
        public void glTexCoord3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord3iv)(v);
        public void glTexCoord3s(short s, short t, short r) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glTexCoord3s)(s, t, r);
        public void glTexCoord3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glTexCoord3sv)(v);
        public void glTexCoord3xOES(int s, int t, int r) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glTexCoord3xOES)(s, t, r);
        public void glTexCoord3xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord3xvOES)(coords);
        public void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)vtable.glTexCoord4bOES)(s, t, r, q);
        public void glTexCoord4bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glTexCoord4bvOES)(coords);
        public void glTexCoord4d(double s, double t, double r, double q) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glTexCoord4d)(s, t, r, q);
        public void glTexCoord4dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glTexCoord4dv)(v);
        public void glTexCoord4f(float s, float t, float r, float q) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glTexCoord4f)(s, t, r, q);
        public void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void>)vtable.glTexCoord4fColor4fNormal3fVertex4fSUN)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        public void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, float*, float*, void>)vtable.glTexCoord4fColor4fNormal3fVertex4fvSUN)(tc, c, n, v);
        public void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)vtable.glTexCoord4fVertex4fSUN)(s, t, p, q, x, y, z, w);
        public void glTexCoord4fVertex4fvSUN(float* tc, float* v) => ((delegate* unmanaged[Cdecl]<float*, float*, void>)vtable.glTexCoord4fVertex4fvSUN)(tc, v);
        public void glTexCoord4fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glTexCoord4fv)(v);
        public void glTexCoord4hNV(Half s, Half t, Half r, Half q) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, Half, void>)vtable.glTexCoord4hNV)(s, t, r, q);
        public void glTexCoord4hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glTexCoord4hvNV)(v);
        public void glTexCoord4i(int s, int t, int r, int q) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glTexCoord4i)(s, t, r, q);
        public void glTexCoord4iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord4iv)(v);
        public void glTexCoord4s(short s, short t, short r, short q) => ((delegate* unmanaged[Cdecl]<short, short, short, short, void>)vtable.glTexCoord4s)(s, t, r, q);
        public void glTexCoord4sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glTexCoord4sv)(v);
        public void glTexCoord4xOES(int s, int t, int r, int q) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glTexCoord4xOES)(s, t, r, q);
        public void glTexCoord4xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glTexCoord4xvOES)(coords);
        public void glTexCoordFormatNV(int size, uint type, int stride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void>)vtable.glTexCoordFormatNV)(size, type, stride);
        public void glTexCoordP1ui(uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glTexCoordP1ui)(type, coords);
        public void glTexCoordP1uiv(uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glTexCoordP1uiv)(type, coords);
        public void glTexCoordP2ui(uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glTexCoordP2ui)(type, coords);
        public void glTexCoordP2uiv(uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glTexCoordP2uiv)(type, coords);
        public void glTexCoordP3ui(uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glTexCoordP3ui)(type, coords);
        public void glTexCoordP3uiv(uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glTexCoordP3uiv)(type, coords);
        public void glTexCoordP4ui(uint type, uint coords) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glTexCoordP4ui)(type, coords);
        public void glTexCoordP4uiv(uint type, uint* coords) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glTexCoordP4uiv)(type, coords);
        public void glTexCoordPointer(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glTexCoordPointer)(size, type, stride, pointer);
        public void glTexCoordPointerEXT(int size, uint type, int stride, int count, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, int, void*, void>)vtable.glTexCoordPointerEXT)(size, type, stride, count, pointer);
        public void glTexCoordPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void**, int, void>)vtable.glTexCoordPointerListIBM)(size, type, stride, pointer, ptrstride);
        public void glTexCoordPointervINTEL(int size, uint type, void** pointer) => ((delegate* unmanaged[Cdecl]<int, uint, void**, void>)vtable.glTexCoordPointervINTEL)(size, type, pointer);
        public void glTexEnvf(uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glTexEnvf)(target, pname, param);
        public void glTexEnvfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glTexEnvfv)(target, pname, parameters);
        public void glTexEnvi(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexEnvi)(target, pname, param);
        public void glTexEnviv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexEnviv)(target, pname, parameters);
        public void glTexEnvx(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexEnvx)(target, pname, param);
        public void glTexEnvxOES(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexEnvxOES)(target, pname, param);
        public void glTexEnvxv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexEnvxv)(target, pname, parameters);
        public void glTexEnvxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexEnvxvOES)(target, pname, parameters);
        public void glTexEstimateMotionQCOM(uint reference, uint target, uint output) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTexEstimateMotionQCOM)(reference, target, output);
        public void glTexEstimateMotionRegionsQCOM(uint reference, uint target, uint output, uint mask) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glTexEstimateMotionRegionsQCOM)(reference, target, output, mask);
        public void glExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glExtrapolateTex2DQCOM)(src1, src2, output, scaleFactor);
        public void glTexFilterFuncSGIS(uint target, uint filter, int n, float* weights) => ((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)vtable.glTexFilterFuncSGIS)(target, filter, n, weights);
        public void glTexGend(uint coord, uint pname, double param) => ((delegate* unmanaged[Cdecl]<uint, uint, double, void>)vtable.glTexGend)(coord, pname, param);
        public void glTexGendv(uint coord, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)vtable.glTexGendv)(coord, pname, parameters);
        public void glTexGenf(uint coord, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glTexGenf)(coord, pname, param);
        public void glTexGenfOES(uint coord, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glTexGenfOES)(coord, pname, param);
        public void glTexGenfv(uint coord, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glTexGenfv)(coord, pname, parameters);
        public void glTexGenfvOES(uint coord, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glTexGenfvOES)(coord, pname, parameters);
        public void glTexGeni(uint coord, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexGeni)(coord, pname, param);
        public void glTexGeniOES(uint coord, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexGeniOES)(coord, pname, param);
        public void glTexGeniv(uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexGeniv)(coord, pname, parameters);
        public void glTexGenivOES(uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexGenivOES)(coord, pname, parameters);
        public void glTexGenxOES(uint coord, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexGenxOES)(coord, pname, param);
        public void glTexGenxvOES(uint coord, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexGenxvOES)(coord, pname, parameters);
        public void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, uint, uint, void*, void>)vtable.glTexImage1D)(target, level, internalformat, width, border, format, type, pixels);
        public void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels);
        public void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, byte, void>)vtable.glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
        public void glTexImage2DMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, byte, void>)vtable.glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        public void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);
        public void glTexImage3DEXT(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, uint, uint, void*, void>)vtable.glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);
        public void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, byte, void>)vtable.glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public void glTexImage3DMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, byte, void>)vtable.glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        public void glTexImage3DOES(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, uint, uint, void*, void>)vtable.glTexImage3DOES)(target, level, internalformat, width, height, depth, border, format, type, pixels);
        public void glTexImage4DSGIS(uint target, int level, uint internalformat, int width, int height, int depth, int size4d, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        public void glTexPageCommitmentARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, byte, void>)vtable.glTexPageCommitmentARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        public void glTexPageCommitmentEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, byte, void>)vtable.glTexPageCommitmentEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        public void glTexPageCommitmentMemNV(uint target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)vtable.glTexPageCommitmentMemNV)(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        public void glTexParameterIiv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexParameterIiv)(target, pname, parameters);
        public void glTexParameterIivEXT(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexParameterIivEXT)(target, pname, parameters);
        public void glTexParameterIivOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexParameterIivOES)(target, pname, parameters);
        public void glTexParameterIuiv(uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glTexParameterIuiv)(target, pname, parameters);
        public void glTexParameterIuivEXT(uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glTexParameterIuivEXT)(target, pname, parameters);
        public void glTexParameterIuivOES(uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glTexParameterIuivOES)(target, pname, parameters);
        public void glTexParameterf(uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glTexParameterf)(target, pname, param);
        public void glTexParameterfv(uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glTexParameterfv)(target, pname, parameters);
        public void glTexParameteri(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexParameteri)(target, pname, param);
        public void glTexParameteriv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexParameteriv)(target, pname, parameters);
        public void glTexParameterx(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexParameterx)(target, pname, param);
        public void glTexParameterxOES(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTexParameterxOES)(target, pname, param);
        public void glTexParameterxv(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexParameterxv)(target, pname, parameters);
        public void glTexParameterxvOES(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTexParameterxvOES)(target, pname, parameters);
        public void glTexRenderbufferNV(uint target, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glTexRenderbufferNV)(target, renderbuffer);
        public void glTexStorage1D(uint target, int levels, uint internalformat, int width) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void>)vtable.glTexStorage1D)(target, levels, internalformat, width);
        public void glTexStorage1DEXT(uint target, int levels, uint internalformat, int width) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void>)vtable.glTexStorage1DEXT)(target, levels, internalformat, width);
        public void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glTexStorage2D)(target, levels, internalformat, width, height);
        public void glTexStorage2DEXT(uint target, int levels, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glTexStorage2DEXT)(target, levels, internalformat, width, height);
        public void glTexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, byte, void>)vtable.glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
        public void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, void>)vtable.glTexStorage3D)(target, levels, internalformat, width, height, depth);
        public void glTexStorage3DEXT(uint target, int levels, uint internalformat, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, void>)vtable.glTexStorage3DEXT)(target, levels, internalformat, width, height, depth);
        public void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, byte, void>)vtable.glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public void glTexStorage3DMultisampleOES(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, byte, void>)vtable.glTexStorage3DMultisampleOES)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public void glTexStorageMem1DEXT(uint target, int levels, uint internalFormat, int width, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, uint, ulong, void>)vtable.glTexStorageMem1DEXT)(target, levels, internalFormat, width, memory, offset);
        public void glTexStorageMem2DEXT(uint target, int levels, uint internalFormat, int width, int height, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, uint, ulong, void>)vtable.glTexStorageMem2DEXT)(target, levels, internalFormat, width, height, memory, offset);
        public void glTexStorageMem2DMultisampleEXT(uint target, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, byte, uint, ulong, void>)vtable.glTexStorageMem2DMultisampleEXT)(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        public void glTexStorageMem3DEXT(uint target, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, uint, ulong, void>)vtable.glTexStorageMem3DEXT)(target, levels, internalFormat, width, height, depth, memory, offset);
        public void glTexStorageMem3DMultisampleEXT(uint target, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, byte, uint, ulong, void>)vtable.glTexStorageMem3DMultisampleEXT)(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        public void glTexStorageSparseAMD(uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, void>)vtable.glTexStorageSparseAMD)(target, internalFormat, width, height, depth, layers, flags);
        public void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage1D)(target, level, xoffset, width, format, type, pixels);
        public void glTexSubImage1DEXT(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage1DEXT)(target, level, xoffset, width, format, type, pixels);
        public void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels);
        public void glTexSubImage2DEXT(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage2DEXT)(target, level, xoffset, yoffset, width, height, format, type, pixels);
        public void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public void glTexSubImage3DEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public void glTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public void glTexSubImage4DSGIS(uint target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTexSubImage4DSGIS)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        public void glTextureAttachMemoryNV(uint texture, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, uint, ulong, void>)vtable.glTextureAttachMemoryNV)(texture, memory, offset);
        public void glTextureBarrier() => ((delegate* unmanaged[Cdecl]<void>)vtable.glTextureBarrier)();
        public void glTextureBarrierNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glTextureBarrierNV)();
        public void glTextureBuffer(uint texture, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTextureBuffer)(texture, internalformat, buffer);
        public void glTextureBufferEXT(uint texture, uint target, uint internalformat, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glTextureBufferEXT)(texture, target, internalformat, buffer);
        public void glTextureBufferRange(uint texture, uint internalformat, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glTextureBufferRange)(texture, internalformat, buffer, offset, size);
        public void glTextureBufferRangeEXT(uint texture, uint target, uint internalformat, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, nint, nint, void>)vtable.glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size);
        public void glTextureColorMaskSGIS(byte red, byte green, byte blue, byte alpha) => ((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)vtable.glTextureColorMaskSGIS)(red, green, blue, alpha);
        public void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, float, float, float, float, void>)vtable.glTextureFoveationParametersQCOM)(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        public void glTextureImage1DEXT(uint texture, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, uint, uint, void*, void>)vtable.glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);
        public void glTextureImage2DEXT(uint texture, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);
        public void glTextureImage2DMultisampleCoverageNV(uint texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, byte, void>)vtable.glTextureImage2DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        public void glTextureImage2DMultisampleNV(uint texture, uint target, int samples, int internalFormat, int width, int height, byte fixedSampleLocations) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, byte, void>)vtable.glTextureImage2DMultisampleNV)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        public void glTextureImage3DEXT(uint texture, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        public void glTextureImage3DMultisampleCoverageNV(uint texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, byte, void>)vtable.glTextureImage3DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        public void glTextureImage3DMultisampleNV(uint texture, uint target, int samples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, byte, void>)vtable.glTextureImage3DMultisampleNV)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        public void glTextureLightEXT(uint pname) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glTextureLightEXT)(pname);
        public void glTextureMaterialEXT(uint face, uint mode) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glTextureMaterialEXT)(face, mode);
        public void glTextureNormalEXT(uint mode) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glTextureNormalEXT)(mode);
        public void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, byte, void>)vtable.glTexturePageCommitmentEXT)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        public void glTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)vtable.glTexturePageCommitmentMemNV)(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        public void glTextureParameterIiv(uint texture, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTextureParameterIiv)(texture, pname, parameters);
        public void glTextureParameterIivEXT(uint texture, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glTextureParameterIivEXT)(texture, target, pname, parameters);
        public void glTextureParameterIuiv(uint texture, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, void>)vtable.glTextureParameterIuiv)(texture, pname, parameters);
        public void glTextureParameterIuivEXT(uint texture, uint target, uint pname, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint*, void>)vtable.glTextureParameterIuivEXT)(texture, target, pname, parameters);
        public void glTextureParameterf(uint texture, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, float, void>)vtable.glTextureParameterf)(texture, pname, param);
        public void glTextureParameterfEXT(uint texture, uint target, uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glTextureParameterfEXT)(texture, target, pname, param);
        public void glTextureParameterfv(uint texture, uint pname, float* param) => ((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)vtable.glTextureParameterfv)(texture, pname, param);
        public void glTextureParameterfvEXT(uint texture, uint target, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glTextureParameterfvEXT)(texture, target, pname, parameters);
        public void glTextureParameteri(uint texture, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glTextureParameteri)(texture, pname, param);
        public void glTextureParameteriEXT(uint texture, uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, void>)vtable.glTextureParameteriEXT)(texture, target, pname, param);
        public void glTextureParameteriv(uint texture, uint pname, int* param) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glTextureParameteriv)(texture, pname, param);
        public void glTextureParameterivEXT(uint texture, uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glTextureParameterivEXT)(texture, target, pname, parameters);
        public void glTextureRangeAPPLE(uint target, int length, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, void*, void>)vtable.glTextureRangeAPPLE)(target, length, pointer);
        public void glTextureRenderbufferEXT(uint texture, uint target, uint renderbuffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTextureRenderbufferEXT)(texture, target, renderbuffer);
        public void glTextureStorage1D(uint texture, int levels, uint internalformat, int width) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void>)vtable.glTextureStorage1D)(texture, levels, internalformat, width);
        public void glTextureStorage1DEXT(uint texture, uint target, int levels, uint internalformat, int width) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, void>)vtable.glTextureStorage1DEXT)(texture, target, levels, internalformat, width);
        public void glTextureStorage2D(uint texture, int levels, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, void>)vtable.glTextureStorage2D)(texture, levels, internalformat, width, height);
        public void glTextureStorage2DEXT(uint texture, uint target, int levels, uint internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, void>)vtable.glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height);
        public void glTextureStorage2DMultisample(uint texture, int samples, uint internalformat, int width, int height, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, byte, void>)vtable.glTextureStorage2DMultisample)(texture, samples, internalformat, width, height, fixedsamplelocations);
        public void glTextureStorage2DMultisampleEXT(uint texture, uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, byte, void>)vtable.glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        public void glTextureStorage3D(uint texture, int levels, uint internalformat, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, void>)vtable.glTextureStorage3D)(texture, levels, internalformat, width, height, depth);
        public void glTextureStorage3DEXT(uint texture, uint target, int levels, uint internalformat, int width, int height, int depth) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, void>)vtable.glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth);
        public void glTextureStorage3DMultisample(uint texture, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, byte, void>)vtable.glTextureStorage3DMultisample)(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        public void glTextureStorage3DMultisampleEXT(uint texture, uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, int, int, byte, void>)vtable.glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public void glTextureStorageMem1DEXT(uint texture, int levels, uint internalFormat, int width, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, uint, ulong, void>)vtable.glTextureStorageMem1DEXT)(texture, levels, internalFormat, width, memory, offset);
        public void glTextureStorageMem2DEXT(uint texture, int levels, uint internalFormat, int width, int height, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, uint, ulong, void>)vtable.glTextureStorageMem2DEXT)(texture, levels, internalFormat, width, height, memory, offset);
        public void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, byte, uint, ulong, void>)vtable.glTextureStorageMem2DMultisampleEXT)(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        public void glTextureStorageMem3DEXT(uint texture, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, uint, ulong, void>)vtable.glTextureStorageMem3DEXT)(texture, levels, internalFormat, width, height, depth, memory, offset);
        public void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, byte, uint, ulong, void>)vtable.glTextureStorageMem3DMultisampleEXT)(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        public void glTextureStorageSparseAMD(uint texture, uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, int, int, int, uint, void>)vtable.glTextureStorageSparseAMD)(texture, target, internalFormat, width, height, depth, layers, flags);
        public void glTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, void*, void>)vtable.glTextureSubImage1D)(texture, level, xoffset, width, format, type, pixels);
        public void glTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, uint, uint, void*, void>)vtable.glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);
        public void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        public void glTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, uint, uint, void*, void>)vtable.glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        public void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public void glTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) => ((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, int, int, int, uint, uint, void*, void>)vtable.glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public void glTextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        public void glTextureViewEXT(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glTextureViewEXT)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        public void glTextureViewOES(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, uint, uint, void>)vtable.glTextureViewOES)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        public void glTrackMatrixNV(uint target, uint address, uint matrix, uint transform) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glTrackMatrixNV)(target, address, matrix, transform);
        public void glTransformFeedbackAttribsNV(int count, int* attribs, uint bufferMode) => ((delegate* unmanaged[Cdecl]<int, int*, uint, void>)vtable.glTransformFeedbackAttribsNV)(count, attribs, bufferMode);
        public void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glTransformFeedbackBufferBase)(xfb, index, buffer);
        public void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)vtable.glTransformFeedbackBufferRange)(xfb, index, buffer, offset, size);
        public void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, uint bufferMode) => ((delegate* unmanaged[Cdecl]<int, int*, int, int*, uint, void>)vtable.glTransformFeedbackStreamAttribsNV)(count, attribs, nbuffers, bufstreams, bufferMode);
        public void glTransformFeedbackVaryings(uint program, int count, byte** varyings, uint bufferMode) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, uint, void>)vtable.glTransformFeedbackVaryings)(program, count, varyings, bufferMode);
        public void glTransformFeedbackVaryingsEXT(uint program, int count, byte** varyings, uint bufferMode) => ((delegate* unmanaged[Cdecl]<uint, int, byte**, uint, void>)vtable.glTransformFeedbackVaryingsEXT)(program, count, varyings, bufferMode);
        public void glTransformFeedbackVaryingsNV(uint program, int count, int* locations, uint bufferMode) => ((delegate* unmanaged[Cdecl]<uint, int, int*, uint, void>)vtable.glTransformFeedbackVaryingsNV)(program, count, locations, bufferMode);
        public void glTransformPathNV(uint resultPath, uint srcPath, uint transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glTransformPathNV)(resultPath, srcPath, transformType, transformValues);
        public void glTranslated(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glTranslated)(x, y, z);
        public void glTranslatef(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glTranslatef)(x, y, z);
        public void glTranslatex(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glTranslatex)(x, y, z);
        public void glTranslatexOES(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glTranslatexOES)(x, y, z);
        public void glUniform1d(int location, double x) => ((delegate* unmanaged[Cdecl]<int, double, void>)vtable.glUniform1d)(location, x);
        public void glUniform1dv(int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<int, int, double*, void>)vtable.glUniform1dv)(location, count, value);
        public void glUniform1f(int location, float v0) => ((delegate* unmanaged[Cdecl]<int, float, void>)vtable.glUniform1f)(location, v0);
        public void glUniform1fARB(int location, float v0) => ((delegate* unmanaged[Cdecl]<int, float, void>)vtable.glUniform1fARB)(location, v0);
        public void glUniform1fv(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform1fv)(location, count, value);
        public void glUniform1fvARB(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform1fvARB)(location, count, value);
        public void glUniform1i(int location, int v0) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glUniform1i)(location, v0);
        public void glUniform1i64ARB(int location, long x) => ((delegate* unmanaged[Cdecl]<int, long, void>)vtable.glUniform1i64ARB)(location, x);
        public void glUniform1i64NV(int location, long x) => ((delegate* unmanaged[Cdecl]<int, long, void>)vtable.glUniform1i64NV)(location, x);
        public void glUniform1i64vARB(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform1i64vARB)(location, count, value);
        public void glUniform1i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform1i64vNV)(location, count, value);
        public void glUniform1iARB(int location, int v0) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glUniform1iARB)(location, v0);
        public void glUniform1iv(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform1iv)(location, count, value);
        public void glUniform1ivARB(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform1ivARB)(location, count, value);
        public void glUniform1ui(int location, uint v0) => ((delegate* unmanaged[Cdecl]<int, uint, void>)vtable.glUniform1ui)(location, v0);
        public void glUniform1ui64ARB(int location, ulong x) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniform1ui64ARB)(location, x);
        public void glUniform1ui64NV(int location, ulong x) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniform1ui64NV)(location, x);
        public void glUniform1ui64vARB(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform1ui64vARB)(location, count, value);
        public void glUniform1ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform1ui64vNV)(location, count, value);
        public void glUniform1uiEXT(int location, uint v0) => ((delegate* unmanaged[Cdecl]<int, uint, void>)vtable.glUniform1uiEXT)(location, v0);
        public void glUniform1uiv(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform1uiv)(location, count, value);
        public void glUniform1uivEXT(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform1uivEXT)(location, count, value);
        public void glUniform2d(int location, double x, double y) => ((delegate* unmanaged[Cdecl]<int, double, double, void>)vtable.glUniform2d)(location, x, y);
        public void glUniform2dv(int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<int, int, double*, void>)vtable.glUniform2dv)(location, count, value);
        public void glUniform2f(int location, float v0, float v1) => ((delegate* unmanaged[Cdecl]<int, float, float, void>)vtable.glUniform2f)(location, v0, v1);
        public void glUniform2fARB(int location, float v0, float v1) => ((delegate* unmanaged[Cdecl]<int, float, float, void>)vtable.glUniform2fARB)(location, v0, v1);
        public void glUniform2fv(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform2fv)(location, count, value);
        public void glUniform2fvARB(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform2fvARB)(location, count, value);
        public void glUniform2i(int location, int v0, int v1) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glUniform2i)(location, v0, v1);
        public void glUniform2i64ARB(int location, long x, long y) => ((delegate* unmanaged[Cdecl]<int, long, long, void>)vtable.glUniform2i64ARB)(location, x, y);
        public void glUniform2i64NV(int location, long x, long y) => ((delegate* unmanaged[Cdecl]<int, long, long, void>)vtable.glUniform2i64NV)(location, x, y);
        public void glUniform2i64vARB(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform2i64vARB)(location, count, value);
        public void glUniform2i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform2i64vNV)(location, count, value);
        public void glUniform2iARB(int location, int v0, int v1) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glUniform2iARB)(location, v0, v1);
        public void glUniform2iv(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform2iv)(location, count, value);
        public void glUniform2ivARB(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform2ivARB)(location, count, value);
        public void glUniform2ui(int location, uint v0, uint v1) => ((delegate* unmanaged[Cdecl]<int, uint, uint, void>)vtable.glUniform2ui)(location, v0, v1);
        public void glUniform2ui64ARB(int location, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)vtable.glUniform2ui64ARB)(location, x, y);
        public void glUniform2ui64NV(int location, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)vtable.glUniform2ui64NV)(location, x, y);
        public void glUniform2ui64vARB(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform2ui64vARB)(location, count, value);
        public void glUniform2ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform2ui64vNV)(location, count, value);
        public void glUniform2uiEXT(int location, uint v0, uint v1) => ((delegate* unmanaged[Cdecl]<int, uint, uint, void>)vtable.glUniform2uiEXT)(location, v0, v1);
        public void glUniform2uiv(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform2uiv)(location, count, value);
        public void glUniform2uivEXT(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform2uivEXT)(location, count, value);
        public void glUniform3d(int location, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<int, double, double, double, void>)vtable.glUniform3d)(location, x, y, z);
        public void glUniform3dv(int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<int, int, double*, void>)vtable.glUniform3dv)(location, count, value);
        public void glUniform3f(int location, float v0, float v1, float v2) => ((delegate* unmanaged[Cdecl]<int, float, float, float, void>)vtable.glUniform3f)(location, v0, v1, v2);
        public void glUniform3fARB(int location, float v0, float v1, float v2) => ((delegate* unmanaged[Cdecl]<int, float, float, float, void>)vtable.glUniform3fARB)(location, v0, v1, v2);
        public void glUniform3fv(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform3fv)(location, count, value);
        public void glUniform3fvARB(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform3fvARB)(location, count, value);
        public void glUniform3i(int location, int v0, int v1, int v2) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glUniform3i)(location, v0, v1, v2);
        public void glUniform3i64ARB(int location, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<int, long, long, long, void>)vtable.glUniform3i64ARB)(location, x, y, z);
        public void glUniform3i64NV(int location, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<int, long, long, long, void>)vtable.glUniform3i64NV)(location, x, y, z);
        public void glUniform3i64vARB(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform3i64vARB)(location, count, value);
        public void glUniform3i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform3i64vNV)(location, count, value);
        public void glUniform3iARB(int location, int v0, int v1, int v2) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glUniform3iARB)(location, v0, v1, v2);
        public void glUniform3iv(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform3iv)(location, count, value);
        public void glUniform3ivARB(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform3ivARB)(location, count, value);
        public void glUniform3ui(int location, uint v0, uint v1, uint v2) => ((delegate* unmanaged[Cdecl]<int, uint, uint, uint, void>)vtable.glUniform3ui)(location, v0, v1, v2);
        public void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)vtable.glUniform3ui64ARB)(location, x, y, z);
        public void glUniform3ui64NV(int location, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)vtable.glUniform3ui64NV)(location, x, y, z);
        public void glUniform3ui64vARB(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform3ui64vARB)(location, count, value);
        public void glUniform3ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform3ui64vNV)(location, count, value);
        public void glUniform3uiEXT(int location, uint v0, uint v1, uint v2) => ((delegate* unmanaged[Cdecl]<int, uint, uint, uint, void>)vtable.glUniform3uiEXT)(location, v0, v1, v2);
        public void glUniform3uiv(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform3uiv)(location, count, value);
        public void glUniform3uivEXT(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform3uivEXT)(location, count, value);
        public void glUniform4d(int location, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<int, double, double, double, double, void>)vtable.glUniform4d)(location, x, y, z, w);
        public void glUniform4dv(int location, int count, double* value) => ((delegate* unmanaged[Cdecl]<int, int, double*, void>)vtable.glUniform4dv)(location, count, value);
        public void glUniform4f(int location, float v0, float v1, float v2, float v3) => ((delegate* unmanaged[Cdecl]<int, float, float, float, float, void>)vtable.glUniform4f)(location, v0, v1, v2, v3);
        public void glUniform4fARB(int location, float v0, float v1, float v2, float v3) => ((delegate* unmanaged[Cdecl]<int, float, float, float, float, void>)vtable.glUniform4fARB)(location, v0, v1, v2, v3);
        public void glUniform4fv(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform4fv)(location, count, value);
        public void glUniform4fvARB(int location, int count, float* value) => ((delegate* unmanaged[Cdecl]<int, int, float*, void>)vtable.glUniform4fvARB)(location, count, value);
        public void glUniform4i(int location, int v0, int v1, int v2, int v3) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)vtable.glUniform4i)(location, v0, v1, v2, v3);
        public void glUniform4i64ARB(int location, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)vtable.glUniform4i64ARB)(location, x, y, z, w);
        public void glUniform4i64NV(int location, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)vtable.glUniform4i64NV)(location, x, y, z, w);
        public void glUniform4i64vARB(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform4i64vARB)(location, count, value);
        public void glUniform4i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform4i64vNV)(location, count, value);
        public void glUniform4iARB(int location, int v0, int v1, int v2, int v3) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)vtable.glUniform4iARB)(location, v0, v1, v2, v3);
        public void glUniform4iv(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform4iv)(location, count, value);
        public void glUniform4ivARB(int location, int count, int* value) => ((delegate* unmanaged[Cdecl]<int, int, int*, void>)vtable.glUniform4ivARB)(location, count, value);
        public void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3) => ((delegate* unmanaged[Cdecl]<int, uint, uint, uint, uint, void>)vtable.glUniform4ui)(location, v0, v1, v2, v3);
        public void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)vtable.glUniform4ui64ARB)(location, x, y, z, w);
        public void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)vtable.glUniform4ui64NV)(location, x, y, z, w);
        public void glUniform4ui64vARB(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform4ui64vARB)(location, count, value);
        public void glUniform4ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform4ui64vNV)(location, count, value);
        public void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3) => ((delegate* unmanaged[Cdecl]<int, uint, uint, uint, uint, void>)vtable.glUniform4uiEXT)(location, v0, v1, v2, v3);
        public void glUniform4uiv(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform4uiv)(location, count, value);
        public void glUniform4uivEXT(int location, int count, uint* value) => ((delegate* unmanaged[Cdecl]<int, int, uint*, void>)vtable.glUniform4uivEXT)(location, count, value);
        public void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);
        public void glUniformBufferEXT(uint program, int location, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glUniformBufferEXT)(program, location, buffer);
        public void glUniformHandleui64ARB(int location, ulong value) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniformHandleui64ARB)(location, value);
        public void glUniformHandleui64IMG(int location, ulong value) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniformHandleui64IMG)(location, value);
        public void glUniformHandleui64NV(int location, ulong value) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniformHandleui64NV)(location, value);
        public void glUniformHandleui64vARB(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniformHandleui64vARB)(location, count, value);
        public void glUniformHandleui64vIMG(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniformHandleui64vIMG)(location, count, value);
        public void glUniformHandleui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniformHandleui64vNV)(location, count, value);
        public void glUniformMatrix2dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix2dv)(location, count, transpose, value);
        public void glUniformMatrix2fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2fv)(location, count, transpose, value);
        public void glUniformMatrix2fvARB(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2fvARB)(location, count, transpose, value);
        public void glUniformMatrix2x3dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix2x3dv)(location, count, transpose, value);
        public void glUniformMatrix2x3fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2x3fv)(location, count, transpose, value);
        public void glUniformMatrix2x3fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2x3fvNV)(location, count, transpose, value);
        public void glUniformMatrix2x4dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix2x4dv)(location, count, transpose, value);
        public void glUniformMatrix2x4fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2x4fv)(location, count, transpose, value);
        public void glUniformMatrix2x4fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2x4fvNV)(location, count, transpose, value);
        public void glUniformMatrix3dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix3dv)(location, count, transpose, value);
        public void glUniformMatrix3fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3fv)(location, count, transpose, value);
        public void glUniformMatrix3fvARB(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3fvARB)(location, count, transpose, value);
        public void glUniformMatrix3x2dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix3x2dv)(location, count, transpose, value);
        public void glUniformMatrix3x2fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3x2fv)(location, count, transpose, value);
        public void glUniformMatrix3x2fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3x2fvNV)(location, count, transpose, value);
        public void glUniformMatrix3x4dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix3x4dv)(location, count, transpose, value);
        public void glUniformMatrix3x4fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3x4fv)(location, count, transpose, value);
        public void glUniformMatrix3x4fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3x4fvNV)(location, count, transpose, value);
        public void glUniformMatrix4dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix4dv)(location, count, transpose, value);
        public void glUniformMatrix4fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4fv)(location, count, transpose, value);
        public void glUniformMatrix4fvARB(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4fvARB)(location, count, transpose, value);
        public void glUniformMatrix4x2dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix4x2dv)(location, count, transpose, value);
        public void glUniformMatrix4x2fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4x2fv)(location, count, transpose, value);
        public void glUniformMatrix4x2fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4x2fvNV)(location, count, transpose, value);
        public void glUniformMatrix4x3dv(int location, int count, byte transpose, double* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)vtable.glUniformMatrix4x3dv)(location, count, transpose, value);
        public void glUniformMatrix4x3fv(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4x3fv)(location, count, transpose, value);
        public void glUniformMatrix4x3fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4x3fvNV)(location, count, transpose, value);
        public void glUniformSubroutinesuiv(uint shadertype, int count, uint* indices) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)vtable.glUniformSubroutinesuiv)(shadertype, count, indices);
        public void glUniformui64NV(int location, ulong value) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniformui64NV)(location, value);
        public void glUniformui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniformui64vNV)(location, count, value);
        public void glUnlockArraysEXT() => ((delegate* unmanaged[Cdecl]<void>)vtable.glUnlockArraysEXT)();
        public byte glUnmapBuffer(uint target) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glUnmapBuffer)(target);
        public byte glUnmapBufferARB(uint target) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glUnmapBufferARB)(target);
        public byte glUnmapBufferOES(uint target) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glUnmapBufferOES)(target);
        public byte glUnmapNamedBuffer(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glUnmapNamedBuffer)(buffer);
        public byte glUnmapNamedBufferEXT(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glUnmapNamedBufferEXT)(buffer);
        public void glUnmapObjectBufferATI(uint buffer) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glUnmapObjectBufferATI)(buffer);
        public void glUnmapTexture2DINTEL(uint texture, int level) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glUnmapTexture2DINTEL)(texture, level);
        public void glUpdateObjectBufferATI(uint buffer, uint offset, int size, void* pointer, uint preserve) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void*, uint, void>)vtable.glUpdateObjectBufferATI)(buffer, offset, size, pointer, preserve);
        public void glUploadGpuMaskNVX(uint mask) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glUploadGpuMaskNVX)(mask);
        public void glUseProgram(uint program) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glUseProgram)(program);
        public void glUseProgramObjectARB(nint programObj) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glUseProgramObjectARB)(programObj);
        public void glUseProgramStages(uint pipeline, uint stages, uint program) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glUseProgramStages)(pipeline, stages, program);
        public void glUseProgramStagesEXT(uint pipeline, uint stages, uint program) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glUseProgramStagesEXT)(pipeline, stages, program);
        public void glUseShaderProgramEXT(uint type, uint program) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glUseShaderProgramEXT)(type, program);
        public void glVDPAUFiniNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glVDPAUFiniNV)();
        public void glVDPAUGetSurfaceivNV(nint surface, uint pname, int count, int* length, int* values) => ((delegate* unmanaged[Cdecl]<nint, uint, int, int*, int*, void>)vtable.glVDPAUGetSurfaceivNV)(surface, pname, count, length, values);
        public void glVDPAUInitNV(void* vdpDevice, void* getProcAddress) => ((delegate* unmanaged[Cdecl]<void*, void*, void>)vtable.glVDPAUInitNV)(vdpDevice, getProcAddress);
        public byte glVDPAUIsSurfaceNV(nint surface) => ((delegate* unmanaged[Cdecl]<nint, byte>)vtable.glVDPAUIsSurfaceNV)(surface);
        public void glVDPAUMapSurfacesNV(int numSurfaces, nint* surfaces) => ((delegate* unmanaged[Cdecl]<int, nint*, void>)vtable.glVDPAUMapSurfacesNV)(numSurfaces, surfaces);
        public nint glVDPAURegisterOutputSurfaceNV(void* vdpSurface, uint target, int numTextureNames, uint* textureNames) => ((delegate* unmanaged[Cdecl]<void*, uint, int, uint*, nint>)vtable.glVDPAURegisterOutputSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
        public nint glVDPAURegisterVideoSurfaceNV(void* vdpSurface, uint target, int numTextureNames, uint* textureNames) => ((delegate* unmanaged[Cdecl]<void*, uint, int, uint*, nint>)vtable.glVDPAURegisterVideoSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
        public nint glVDPAURegisterVideoSurfaceWithPictureStructureNV(void* vdpSurface, uint target, int numTextureNames, uint* textureNames, byte isFrameStructure) => ((delegate* unmanaged[Cdecl]<void*, uint, int, uint*, byte, nint>)vtable.glVDPAURegisterVideoSurfaceWithPictureStructureNV)(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
        public void glVDPAUSurfaceAccessNV(nint surface, uint access) => ((delegate* unmanaged[Cdecl]<nint, uint, void>)vtable.glVDPAUSurfaceAccessNV)(surface, access);
        public void glVDPAUUnmapSurfacesNV(int numSurface, nint* surfaces) => ((delegate* unmanaged[Cdecl]<int, nint*, void>)vtable.glVDPAUUnmapSurfacesNV)(numSurface, surfaces);
        public void glVDPAUUnregisterSurfaceNV(nint surface) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glVDPAUUnregisterSurfaceNV)(surface);
        public void glValidateProgram(uint program) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glValidateProgram)(program);
        public void glValidateProgramARB(nint programObj) => ((delegate* unmanaged[Cdecl]<nint, void>)vtable.glValidateProgramARB)(programObj);
        public void glValidateProgramPipeline(uint pipeline) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glValidateProgramPipeline)(pipeline);
        public void glValidateProgramPipelineEXT(uint pipeline) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glValidateProgramPipelineEXT)(pipeline);
        public void glVariantArrayObjectATI(uint id, uint type, int stride, uint buffer, uint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void>)vtable.glVariantArrayObjectATI)(id, type, stride, buffer, offset);
        public void glVariantPointerEXT(uint id, uint type, uint stride, void* addr) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)vtable.glVariantPointerEXT)(id, type, stride, addr);
        public void glVariantbvEXT(uint id, sbyte* addr) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVariantbvEXT)(id, addr);
        public void glVariantdvEXT(uint id, double* addr) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVariantdvEXT)(id, addr);
        public void glVariantfvEXT(uint id, float* addr) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVariantfvEXT)(id, addr);
        public void glVariantivEXT(uint id, int* addr) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVariantivEXT)(id, addr);
        public void glVariantsvEXT(uint id, short* addr) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVariantsvEXT)(id, addr);
        public void glVariantubvEXT(uint id, byte* addr) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVariantubvEXT)(id, addr);
        public void glVariantuivEXT(uint id, uint* addr) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVariantuivEXT)(id, addr);
        public void glVariantusvEXT(uint id, ushort* addr) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVariantusvEXT)(id, addr);
        public void glVertex2bOES(sbyte x, sbyte y) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, void>)vtable.glVertex2bOES)(x, y);
        public void glVertex2bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glVertex2bvOES)(coords);
        public void glVertex2d(double x, double y) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glVertex2d)(x, y);
        public void glVertex2dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glVertex2dv)(v);
        public void glVertex2f(float x, float y) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glVertex2f)(x, y);
        public void glVertex2fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glVertex2fv)(v);
        public void glVertex2hNV(Half x, Half y) => ((delegate* unmanaged[Cdecl]<Half, Half, void>)vtable.glVertex2hNV)(x, y);
        public void glVertex2hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glVertex2hvNV)(v);
        public void glVertex2i(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glVertex2i)(x, y);
        public void glVertex2iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glVertex2iv)(v);
        public void glVertex2s(short x, short y) => ((delegate* unmanaged[Cdecl]<short, short, void>)vtable.glVertex2s)(x, y);
        public void glVertex2sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glVertex2sv)(v);
        public void glVertex2xOES(int x) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glVertex2xOES)(x);
        public void glVertex2xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glVertex2xvOES)(coords);
        public void glVertex3bOES(sbyte x, sbyte y, sbyte z) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)vtable.glVertex3bOES)(x, y, z);
        public void glVertex3bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glVertex3bvOES)(coords);
        public void glVertex3d(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glVertex3d)(x, y, z);
        public void glVertex3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glVertex3dv)(v);
        public void glVertex3f(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glVertex3f)(x, y, z);
        public void glVertex3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glVertex3fv)(v);
        public void glVertex3hNV(Half x, Half y, Half z) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)vtable.glVertex3hNV)(x, y, z);
        public void glVertex3hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glVertex3hvNV)(v);
        public void glVertex3i(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glVertex3i)(x, y, z);
        public void glVertex3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glVertex3iv)(v);
        public void glVertex3s(short x, short y, short z) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glVertex3s)(x, y, z);
        public void glVertex3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glVertex3sv)(v);
        public void glVertex3xOES(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glVertex3xOES)(x, y);
        public void glVertex3xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glVertex3xvOES)(coords);
        public void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w) => ((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)vtable.glVertex4bOES)(x, y, z, w);
        public void glVertex4bvOES(sbyte* coords) => ((delegate* unmanaged[Cdecl]<sbyte*, void>)vtable.glVertex4bvOES)(coords);
        public void glVertex4d(double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glVertex4d)(x, y, z, w);
        public void glVertex4dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glVertex4dv)(v);
        public void glVertex4f(float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glVertex4f)(x, y, z, w);
        public void glVertex4fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glVertex4fv)(v);
        public void glVertex4hNV(Half x, Half y, Half z, Half w) => ((delegate* unmanaged[Cdecl]<Half, Half, Half, Half, void>)vtable.glVertex4hNV)(x, y, z, w);
        public void glVertex4hvNV(Half* v) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glVertex4hvNV)(v);
        public void glVertex4i(int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glVertex4i)(x, y, z, w);
        public void glVertex4iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glVertex4iv)(v);
        public void glVertex4s(short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<short, short, short, short, void>)vtable.glVertex4s)(x, y, z, w);
        public void glVertex4sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glVertex4sv)(v);
        public void glVertex4xOES(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glVertex4xOES)(x, y, z);
        public void glVertex4xvOES(int* coords) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glVertex4xvOES)(coords);
        public void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexArrayAttribBinding)(vaobj, attribindex, bindingindex);
        public void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, byte, uint, void>)vtable.glVertexArrayAttribFormat)(vaobj, attribindex, size, type, normalized, relativeoffset);
        public void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void>)vtable.glVertexArrayAttribIFormat)(vaobj, attribindex, size, type, relativeoffset);
        public void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void>)vtable.glVertexArrayAttribLFormat)(vaobj, attribindex, size, type, relativeoffset);
        public void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, int, void>)vtable.glVertexArrayBindVertexBufferEXT)(vaobj, bindingindex, buffer, offset, stride);
        public void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexArrayBindingDivisor)(vaobj, bindingindex, divisor);
        public void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, nint, void>)vtable.glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
        public void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, nint, void>)vtable.glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset);
        public void glVertexArrayElementBuffer(uint vaobj, uint buffer) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexArrayElementBuffer)(vaobj, buffer);
        public void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, nint, void>)vtable.glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset);
        public void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, nint, void>)vtable.glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset);
        public void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, uint texunit, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, int, nint, void>)vtable.glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset);
        public void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, nint, void>)vtable.glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset);
        public void glVertexArrayParameteriAPPLE(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glVertexArrayParameteriAPPLE)(pname, param);
        public void glVertexArrayRangeAPPLE(int length, void* pointer) => ((delegate* unmanaged[Cdecl]<int, void*, void>)vtable.glVertexArrayRangeAPPLE)(length, pointer);
        public void glVertexArrayRangeNV(int length, void* pointer) => ((delegate* unmanaged[Cdecl]<int, void*, void>)vtable.glVertexArrayRangeNV)(length, pointer);
        public void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, nint, void>)vtable.glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
        public void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, nint, void>)vtable.glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset);
        public void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexArrayVertexAttribBindingEXT)(vaobj, attribindex, bindingindex);
        public void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexArrayVertexAttribDivisorEXT)(vaobj, index, divisor);
        public void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, byte, uint, void>)vtable.glVertexArrayVertexAttribFormatEXT)(vaobj, attribindex, size, type, normalized, relativeoffset);
        public void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void>)vtable.glVertexArrayVertexAttribIFormatEXT)(vaobj, attribindex, size, type, relativeoffset);
        public void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, int, nint, void>)vtable.glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
        public void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void>)vtable.glVertexArrayVertexAttribLFormatEXT)(vaobj, attribindex, size, type, relativeoffset);
        public void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, int, nint, void>)vtable.glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
        public void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, byte normalized, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, byte, int, nint, void>)vtable.glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset);
        public void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexArrayVertexBindingDivisorEXT)(vaobj, bindingindex, divisor);
        public void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, int, void>)vtable.glVertexArrayVertexBuffer)(vaobj, bindingindex, buffer, offset, stride);
        public void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, nint*, int*, void>)vtable.glVertexArrayVertexBuffers)(vaobj, first, count, buffers, offsets, strides);
        public void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset) => ((delegate* unmanaged[Cdecl]<uint, uint, int, uint, int, nint, void>)vtable.glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset);
        public void glVertexAttrib1d(uint index, double x) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glVertexAttrib1d)(index, x);
        public void glVertexAttrib1dARB(uint index, double x) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glVertexAttrib1dARB)(index, x);
        public void glVertexAttrib1dNV(uint index, double x) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glVertexAttrib1dNV)(index, x);
        public void glVertexAttrib1dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib1dv)(index, v);
        public void glVertexAttrib1dvARB(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib1dvARB)(index, v);
        public void glVertexAttrib1dvNV(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib1dvNV)(index, v);
        public void glVertexAttrib1f(uint index, float x) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glVertexAttrib1f)(index, x);
        public void glVertexAttrib1fARB(uint index, float x) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glVertexAttrib1fARB)(index, x);
        public void glVertexAttrib1fNV(uint index, float x) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glVertexAttrib1fNV)(index, x);
        public void glVertexAttrib1fv(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib1fv)(index, v);
        public void glVertexAttrib1fvARB(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib1fvARB)(index, v);
        public void glVertexAttrib1fvNV(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib1fvNV)(index, v);
        public void glVertexAttrib1hNV(uint index, Half x) => ((delegate* unmanaged[Cdecl]<uint, Half, void>)vtable.glVertexAttrib1hNV)(index, x);
        public void glVertexAttrib1hvNV(uint index, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glVertexAttrib1hvNV)(index, v);
        public void glVertexAttrib1s(uint index, short x) => ((delegate* unmanaged[Cdecl]<uint, short, void>)vtable.glVertexAttrib1s)(index, x);
        public void glVertexAttrib1sARB(uint index, short x) => ((delegate* unmanaged[Cdecl]<uint, short, void>)vtable.glVertexAttrib1sARB)(index, x);
        public void glVertexAttrib1sNV(uint index, short x) => ((delegate* unmanaged[Cdecl]<uint, short, void>)vtable.glVertexAttrib1sNV)(index, x);
        public void glVertexAttrib1sv(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib1sv)(index, v);
        public void glVertexAttrib1svARB(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib1svARB)(index, v);
        public void glVertexAttrib1svNV(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib1svNV)(index, v);
        public void glVertexAttrib2d(uint index, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glVertexAttrib2d)(index, x, y);
        public void glVertexAttrib2dARB(uint index, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glVertexAttrib2dARB)(index, x, y);
        public void glVertexAttrib2dNV(uint index, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glVertexAttrib2dNV)(index, x, y);
        public void glVertexAttrib2dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib2dv)(index, v);
        public void glVertexAttrib2dvARB(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib2dvARB)(index, v);
        public void glVertexAttrib2dvNV(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib2dvNV)(index, v);
        public void glVertexAttrib2f(uint index, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glVertexAttrib2f)(index, x, y);
        public void glVertexAttrib2fARB(uint index, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glVertexAttrib2fARB)(index, x, y);
        public void glVertexAttrib2fNV(uint index, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glVertexAttrib2fNV)(index, x, y);
        public void glVertexAttrib2fv(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib2fv)(index, v);
        public void glVertexAttrib2fvARB(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib2fvARB)(index, v);
        public void glVertexAttrib2fvNV(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib2fvNV)(index, v);
        public void glVertexAttrib2hNV(uint index, Half x, Half y) => ((delegate* unmanaged[Cdecl]<uint, Half, Half, void>)vtable.glVertexAttrib2hNV)(index, x, y);
        public void glVertexAttrib2hvNV(uint index, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glVertexAttrib2hvNV)(index, v);
        public void glVertexAttrib2s(uint index, short x, short y) => ((delegate* unmanaged[Cdecl]<uint, short, short, void>)vtable.glVertexAttrib2s)(index, x, y);
        public void glVertexAttrib2sARB(uint index, short x, short y) => ((delegate* unmanaged[Cdecl]<uint, short, short, void>)vtable.glVertexAttrib2sARB)(index, x, y);
        public void glVertexAttrib2sNV(uint index, short x, short y) => ((delegate* unmanaged[Cdecl]<uint, short, short, void>)vtable.glVertexAttrib2sNV)(index, x, y);
        public void glVertexAttrib2sv(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib2sv)(index, v);
        public void glVertexAttrib2svARB(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib2svARB)(index, v);
        public void glVertexAttrib2svNV(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib2svNV)(index, v);
        public void glVertexAttrib3d(uint index, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glVertexAttrib3d)(index, x, y, z);
        public void glVertexAttrib3dARB(uint index, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glVertexAttrib3dARB)(index, x, y, z);
        public void glVertexAttrib3dNV(uint index, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glVertexAttrib3dNV)(index, x, y, z);
        public void glVertexAttrib3dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib3dv)(index, v);
        public void glVertexAttrib3dvARB(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib3dvARB)(index, v);
        public void glVertexAttrib3dvNV(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib3dvNV)(index, v);
        public void glVertexAttrib3f(uint index, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glVertexAttrib3f)(index, x, y, z);
        public void glVertexAttrib3fARB(uint index, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glVertexAttrib3fARB)(index, x, y, z);
        public void glVertexAttrib3fNV(uint index, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glVertexAttrib3fNV)(index, x, y, z);
        public void glVertexAttrib3fv(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib3fv)(index, v);
        public void glVertexAttrib3fvARB(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib3fvARB)(index, v);
        public void glVertexAttrib3fvNV(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib3fvNV)(index, v);
        public void glVertexAttrib3hNV(uint index, Half x, Half y, Half z) => ((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, void>)vtable.glVertexAttrib3hNV)(index, x, y, z);
        public void glVertexAttrib3hvNV(uint index, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glVertexAttrib3hvNV)(index, v);
        public void glVertexAttrib3s(uint index, short x, short y, short z) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glVertexAttrib3s)(index, x, y, z);
        public void glVertexAttrib3sARB(uint index, short x, short y, short z) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glVertexAttrib3sARB)(index, x, y, z);
        public void glVertexAttrib3sNV(uint index, short x, short y, short z) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glVertexAttrib3sNV)(index, x, y, z);
        public void glVertexAttrib3sv(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib3sv)(index, v);
        public void glVertexAttrib3svARB(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib3svARB)(index, v);
        public void glVertexAttrib3svNV(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib3svNV)(index, v);
        public void glVertexAttrib4Nbv(uint index, sbyte* v) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVertexAttrib4Nbv)(index, v);
        public void glVertexAttrib4NbvARB(uint index, sbyte* v) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVertexAttrib4NbvARB)(index, v);
        public void glVertexAttrib4Niv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttrib4Niv)(index, v);
        public void glVertexAttrib4NivARB(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttrib4NivARB)(index, v);
        public void glVertexAttrib4Nsv(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib4Nsv)(index, v);
        public void glVertexAttrib4NsvARB(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib4NsvARB)(index, v);
        public void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glVertexAttrib4Nub)(index, x, y, z, w);
        public void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glVertexAttrib4NubARB)(index, x, y, z, w);
        public void glVertexAttrib4Nubv(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttrib4Nubv)(index, v);
        public void glVertexAttrib4NubvARB(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttrib4NubvARB)(index, v);
        public void glVertexAttrib4Nuiv(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttrib4Nuiv)(index, v);
        public void glVertexAttrib4NuivARB(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttrib4NuivARB)(index, v);
        public void glVertexAttrib4Nusv(uint index, ushort* v) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVertexAttrib4Nusv)(index, v);
        public void glVertexAttrib4NusvARB(uint index, ushort* v) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVertexAttrib4NusvARB)(index, v);
        public void glVertexAttrib4bv(uint index, sbyte* v) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVertexAttrib4bv)(index, v);
        public void glVertexAttrib4bvARB(uint index, sbyte* v) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVertexAttrib4bvARB)(index, v);
        public void glVertexAttrib4d(uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glVertexAttrib4d)(index, x, y, z, w);
        public void glVertexAttrib4dARB(uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glVertexAttrib4dARB)(index, x, y, z, w);
        public void glVertexAttrib4dNV(uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glVertexAttrib4dNV)(index, x, y, z, w);
        public void glVertexAttrib4dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib4dv)(index, v);
        public void glVertexAttrib4dvARB(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib4dvARB)(index, v);
        public void glVertexAttrib4dvNV(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttrib4dvNV)(index, v);
        public void glVertexAttrib4f(uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glVertexAttrib4f)(index, x, y, z, w);
        public void glVertexAttrib4fARB(uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glVertexAttrib4fARB)(index, x, y, z, w);
        public void glVertexAttrib4fNV(uint index, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glVertexAttrib4fNV)(index, x, y, z, w);
        public void glVertexAttrib4fv(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib4fv)(index, v);
        public void glVertexAttrib4fvARB(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib4fvARB)(index, v);
        public void glVertexAttrib4fvNV(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexAttrib4fvNV)(index, v);
        public void glVertexAttrib4hNV(uint index, Half x, Half y, Half z, Half w) => ((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, Half, void>)vtable.glVertexAttrib4hNV)(index, x, y, z, w);
        public void glVertexAttrib4hvNV(uint index, Half* v) => ((delegate* unmanaged[Cdecl]<uint, Half*, void>)vtable.glVertexAttrib4hvNV)(index, v);
        public void glVertexAttrib4iv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttrib4iv)(index, v);
        public void glVertexAttrib4ivARB(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttrib4ivARB)(index, v);
        public void glVertexAttrib4s(uint index, short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)vtable.glVertexAttrib4s)(index, x, y, z, w);
        public void glVertexAttrib4sARB(uint index, short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)vtable.glVertexAttrib4sARB)(index, x, y, z, w);
        public void glVertexAttrib4sNV(uint index, short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)vtable.glVertexAttrib4sNV)(index, x, y, z, w);
        public void glVertexAttrib4sv(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib4sv)(index, v);
        public void glVertexAttrib4svARB(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib4svARB)(index, v);
        public void glVertexAttrib4svNV(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttrib4svNV)(index, v);
        public void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w) => ((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)vtable.glVertexAttrib4ubNV)(index, x, y, z, w);
        public void glVertexAttrib4ubv(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttrib4ubv)(index, v);
        public void glVertexAttrib4ubvARB(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttrib4ubvARB)(index, v);
        public void glVertexAttrib4ubvNV(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttrib4ubvNV)(index, v);
        public void glVertexAttrib4uiv(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttrib4uiv)(index, v);
        public void glVertexAttrib4uivARB(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttrib4uivARB)(index, v);
        public void glVertexAttrib4usv(uint index, ushort* v) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVertexAttrib4usv)(index, v);
        public void glVertexAttrib4usvARB(uint index, ushort* v) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVertexAttrib4usvARB)(index, v);
        public void glVertexAttribArrayObjectATI(uint index, int size, uint type, byte normalized, int stride, uint buffer, uint offset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, int, uint, uint, void>)vtable.glVertexAttribArrayObjectATI)(index, size, type, normalized, stride, buffer, offset);
        public void glVertexAttribBinding(uint attribindex, uint bindingindex) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribBinding)(attribindex, bindingindex);
        public void glVertexAttribDivisor(uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribDivisor)(index, divisor);
        public void glVertexAttribDivisorANGLE(uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribDivisorANGLE)(index, divisor);
        public void glVertexAttribDivisorARB(uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribDivisorARB)(index, divisor);
        public void glVertexAttribDivisorEXT(uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribDivisorEXT)(index, divisor);
        public void glVertexAttribDivisorNV(uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribDivisorNV)(index, divisor);
        public void glVertexAttribFormat(uint attribindex, int size, uint type, byte normalized, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, uint, void>)vtable.glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);
        public void glVertexAttribFormatNV(uint index, int size, uint type, byte normalized, int stride) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, int, void>)vtable.glVertexAttribFormatNV)(index, size, type, normalized, stride);
        public void glVertexAttribI1i(uint index, int x) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glVertexAttribI1i)(index, x);
        public void glVertexAttribI1iEXT(uint index, int x) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glVertexAttribI1iEXT)(index, x);
        public void glVertexAttribI1iv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI1iv)(index, v);
        public void glVertexAttribI1ivEXT(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI1ivEXT)(index, v);
        public void glVertexAttribI1ui(uint index, uint x) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribI1ui)(index, x);
        public void glVertexAttribI1uiEXT(uint index, uint x) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribI1uiEXT)(index, x);
        public void glVertexAttribI1uiv(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI1uiv)(index, v);
        public void glVertexAttribI1uivEXT(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI1uivEXT)(index, v);
        public void glVertexAttribI2i(uint index, int x, int y) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glVertexAttribI2i)(index, x, y);
        public void glVertexAttribI2iEXT(uint index, int x, int y) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glVertexAttribI2iEXT)(index, x, y);
        public void glVertexAttribI2iv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI2iv)(index, v);
        public void glVertexAttribI2ivEXT(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI2ivEXT)(index, v);
        public void glVertexAttribI2ui(uint index, uint x, uint y) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexAttribI2ui)(index, x, y);
        public void glVertexAttribI2uiEXT(uint index, uint x, uint y) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)vtable.glVertexAttribI2uiEXT)(index, x, y);
        public void glVertexAttribI2uiv(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI2uiv)(index, v);
        public void glVertexAttribI2uivEXT(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI2uivEXT)(index, v);
        public void glVertexAttribI3i(uint index, int x, int y, int z) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glVertexAttribI3i)(index, x, y, z);
        public void glVertexAttribI3iEXT(uint index, int x, int y, int z) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glVertexAttribI3iEXT)(index, x, y, z);
        public void glVertexAttribI3iv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI3iv)(index, v);
        public void glVertexAttribI3ivEXT(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI3ivEXT)(index, v);
        public void glVertexAttribI3ui(uint index, uint x, uint y, uint z) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glVertexAttribI3ui)(index, x, y, z);
        public void glVertexAttribI3uiEXT(uint index, uint x, uint y, uint z) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)vtable.glVertexAttribI3uiEXT)(index, x, y, z);
        public void glVertexAttribI3uiv(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI3uiv)(index, v);
        public void glVertexAttribI3uivEXT(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI3uivEXT)(index, v);
        public void glVertexAttribI4bv(uint index, sbyte* v) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVertexAttribI4bv)(index, v);
        public void glVertexAttribI4bvEXT(uint index, sbyte* v) => ((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)vtable.glVertexAttribI4bvEXT)(index, v);
        public void glVertexAttribI4i(uint index, int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glVertexAttribI4i)(index, x, y, z, w);
        public void glVertexAttribI4iEXT(uint index, int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glVertexAttribI4iEXT)(index, x, y, z, w);
        public void glVertexAttribI4iv(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI4iv)(index, v);
        public void glVertexAttribI4ivEXT(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexAttribI4ivEXT)(index, v);
        public void glVertexAttribI4sv(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttribI4sv)(index, v);
        public void glVertexAttribI4svEXT(uint index, short* v) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexAttribI4svEXT)(index, v);
        public void glVertexAttribI4ubv(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttribI4ubv)(index, v);
        public void glVertexAttribI4ubvEXT(uint index, byte* v) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glVertexAttribI4ubvEXT)(index, v);
        public void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glVertexAttribI4ui)(index, x, y, z, w);
        public void glVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glVertexAttribI4uiEXT)(index, x, y, z, w);
        public void glVertexAttribI4uiv(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI4uiv)(index, v);
        public void glVertexAttribI4uivEXT(uint index, uint* v) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexAttribI4uivEXT)(index, v);
        public void glVertexAttribI4usv(uint index, ushort* v) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVertexAttribI4usv)(index, v);
        public void glVertexAttribI4usvEXT(uint index, ushort* v) => ((delegate* unmanaged[Cdecl]<uint, ushort*, void>)vtable.glVertexAttribI4usvEXT)(index, v);
        public void glVertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)vtable.glVertexAttribIFormat)(attribindex, size, type, relativeoffset);
        public void glVertexAttribIFormatNV(uint index, int size, uint type, int stride) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void>)vtable.glVertexAttribIFormatNV)(index, size, type, stride);
        public void glVertexAttribIPointer(uint index, int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void*, void>)vtable.glVertexAttribIPointer)(index, size, type, stride, pointer);
        public void glVertexAttribIPointerEXT(uint index, int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void*, void>)vtable.glVertexAttribIPointerEXT)(index, size, type, stride, pointer);
        public void glVertexAttribL1d(uint index, double x) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glVertexAttribL1d)(index, x);
        public void glVertexAttribL1dEXT(uint index, double x) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glVertexAttribL1dEXT)(index, x);
        public void glVertexAttribL1dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL1dv)(index, v);
        public void glVertexAttribL1dvEXT(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL1dvEXT)(index, v);
        public void glVertexAttribL1i64NV(uint index, long x) => ((delegate* unmanaged[Cdecl]<uint, long, void>)vtable.glVertexAttribL1i64NV)(index, x);
        public void glVertexAttribL1i64vNV(uint index, long* v) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glVertexAttribL1i64vNV)(index, v);
        public void glVertexAttribL1ui64ARB(uint index, ulong x) => ((delegate* unmanaged[Cdecl]<uint, ulong, void>)vtable.glVertexAttribL1ui64ARB)(index, x);
        public void glVertexAttribL1ui64NV(uint index, ulong x) => ((delegate* unmanaged[Cdecl]<uint, ulong, void>)vtable.glVertexAttribL1ui64NV)(index, x);
        public void glVertexAttribL1ui64vARB(uint index, ulong* v) => ((delegate* unmanaged[Cdecl]<uint, ulong*, void>)vtable.glVertexAttribL1ui64vARB)(index, v);
        public void glVertexAttribL1ui64vNV(uint index, ulong* v) => ((delegate* unmanaged[Cdecl]<uint, ulong*, void>)vtable.glVertexAttribL1ui64vNV)(index, v);
        public void glVertexAttribL2d(uint index, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glVertexAttribL2d)(index, x, y);
        public void glVertexAttribL2dEXT(uint index, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glVertexAttribL2dEXT)(index, x, y);
        public void glVertexAttribL2dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL2dv)(index, v);
        public void glVertexAttribL2dvEXT(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL2dvEXT)(index, v);
        public void glVertexAttribL2i64NV(uint index, long x, long y) => ((delegate* unmanaged[Cdecl]<uint, long, long, void>)vtable.glVertexAttribL2i64NV)(index, x, y);
        public void glVertexAttribL2i64vNV(uint index, long* v) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glVertexAttribL2i64vNV)(index, v);
        public void glVertexAttribL2ui64NV(uint index, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<uint, ulong, ulong, void>)vtable.glVertexAttribL2ui64NV)(index, x, y);
        public void glVertexAttribL2ui64vNV(uint index, ulong* v) => ((delegate* unmanaged[Cdecl]<uint, ulong*, void>)vtable.glVertexAttribL2ui64vNV)(index, v);
        public void glVertexAttribL3d(uint index, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glVertexAttribL3d)(index, x, y, z);
        public void glVertexAttribL3dEXT(uint index, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glVertexAttribL3dEXT)(index, x, y, z);
        public void glVertexAttribL3dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL3dv)(index, v);
        public void glVertexAttribL3dvEXT(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL3dvEXT)(index, v);
        public void glVertexAttribL3i64NV(uint index, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<uint, long, long, long, void>)vtable.glVertexAttribL3i64NV)(index, x, y, z);
        public void glVertexAttribL3i64vNV(uint index, long* v) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glVertexAttribL3i64vNV)(index, v);
        public void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<uint, ulong, ulong, ulong, void>)vtable.glVertexAttribL3ui64NV)(index, x, y, z);
        public void glVertexAttribL3ui64vNV(uint index, ulong* v) => ((delegate* unmanaged[Cdecl]<uint, ulong*, void>)vtable.glVertexAttribL3ui64vNV)(index, v);
        public void glVertexAttribL4d(uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glVertexAttribL4d)(index, x, y, z, w);
        public void glVertexAttribL4dEXT(uint index, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glVertexAttribL4dEXT)(index, x, y, z, w);
        public void glVertexAttribL4dv(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL4dv)(index, v);
        public void glVertexAttribL4dvEXT(uint index, double* v) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexAttribL4dvEXT)(index, v);
        public void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<uint, long, long, long, long, void>)vtable.glVertexAttribL4i64NV)(index, x, y, z, w);
        public void glVertexAttribL4i64vNV(uint index, long* v) => ((delegate* unmanaged[Cdecl]<uint, long*, void>)vtable.glVertexAttribL4i64vNV)(index, v);
        public void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<uint, ulong, ulong, ulong, ulong, void>)vtable.glVertexAttribL4ui64NV)(index, x, y, z, w);
        public void glVertexAttribL4ui64vNV(uint index, ulong* v) => ((delegate* unmanaged[Cdecl]<uint, ulong*, void>)vtable.glVertexAttribL4ui64vNV)(index, v);
        public void glVertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset) => ((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)vtable.glVertexAttribLFormat)(attribindex, size, type, relativeoffset);
        public void glVertexAttribLFormatNV(uint index, int size, uint type, int stride) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void>)vtable.glVertexAttribLFormatNV)(index, size, type, stride);
        public void glVertexAttribLPointer(uint index, int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void*, void>)vtable.glVertexAttribLPointer)(index, size, type, stride, pointer);
        public void glVertexAttribLPointerEXT(uint index, int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void*, void>)vtable.glVertexAttribLPointerEXT)(index, size, type, stride, pointer);
        public void glVertexAttribP1ui(uint index, uint type, byte normalized, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint, void>)vtable.glVertexAttribP1ui)(index, type, normalized, value);
        public void glVertexAttribP1uiv(uint index, uint type, byte normalized, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint*, void>)vtable.glVertexAttribP1uiv)(index, type, normalized, value);
        public void glVertexAttribP2ui(uint index, uint type, byte normalized, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint, void>)vtable.glVertexAttribP2ui)(index, type, normalized, value);
        public void glVertexAttribP2uiv(uint index, uint type, byte normalized, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint*, void>)vtable.glVertexAttribP2uiv)(index, type, normalized, value);
        public void glVertexAttribP3ui(uint index, uint type, byte normalized, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint, void>)vtable.glVertexAttribP3ui)(index, type, normalized, value);
        public void glVertexAttribP3uiv(uint index, uint type, byte normalized, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint*, void>)vtable.glVertexAttribP3uiv)(index, type, normalized, value);
        public void glVertexAttribP4ui(uint index, uint type, byte normalized, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint, void>)vtable.glVertexAttribP4ui)(index, type, normalized, value);
        public void glVertexAttribP4uiv(uint index, uint type, byte normalized, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint, byte, uint*, void>)vtable.glVertexAttribP4uiv)(index, type, normalized, value);
        public void glVertexAttribParameteriAMD(uint index, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glVertexAttribParameteriAMD)(index, pname, param);
        public void glVertexAttribPointer(uint index, int size, uint type, byte normalized, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, int, void*, void>)vtable.glVertexAttribPointer)(index, size, type, normalized, stride, pointer);
        public void glVertexAttribPointerARB(uint index, int size, uint type, byte normalized, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, byte, int, void*, void>)vtable.glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);
        public void glVertexAttribPointerNV(uint index, int fsize, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<uint, int, uint, int, void*, void>)vtable.glVertexAttribPointerNV)(index, fsize, type, stride, pointer);
        public void glVertexAttribs1dvNV(uint index, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glVertexAttribs1dvNV)(index, count, v);
        public void glVertexAttribs1fvNV(uint index, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glVertexAttribs1fvNV)(index, count, v);
        public void glVertexAttribs1hvNV(uint index, int n, Half* v) => ((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)vtable.glVertexAttribs1hvNV)(index, n, v);
        public void glVertexAttribs1svNV(uint index, int count, short* v) => ((delegate* unmanaged[Cdecl]<uint, int, short*, void>)vtable.glVertexAttribs1svNV)(index, count, v);
        public void glVertexAttribs2dvNV(uint index, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glVertexAttribs2dvNV)(index, count, v);
        public void glVertexAttribs2fvNV(uint index, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glVertexAttribs2fvNV)(index, count, v);
        public void glVertexAttribs2hvNV(uint index, int n, Half* v) => ((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)vtable.glVertexAttribs2hvNV)(index, n, v);
        public void glVertexAttribs2svNV(uint index, int count, short* v) => ((delegate* unmanaged[Cdecl]<uint, int, short*, void>)vtable.glVertexAttribs2svNV)(index, count, v);
        public void glVertexAttribs3dvNV(uint index, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glVertexAttribs3dvNV)(index, count, v);
        public void glVertexAttribs3fvNV(uint index, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glVertexAttribs3fvNV)(index, count, v);
        public void glVertexAttribs3hvNV(uint index, int n, Half* v) => ((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)vtable.glVertexAttribs3hvNV)(index, n, v);
        public void glVertexAttribs3svNV(uint index, int count, short* v) => ((delegate* unmanaged[Cdecl]<uint, int, short*, void>)vtable.glVertexAttribs3svNV)(index, count, v);
        public void glVertexAttribs4dvNV(uint index, int count, double* v) => ((delegate* unmanaged[Cdecl]<uint, int, double*, void>)vtable.glVertexAttribs4dvNV)(index, count, v);
        public void glVertexAttribs4fvNV(uint index, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glVertexAttribs4fvNV)(index, count, v);
        public void glVertexAttribs4hvNV(uint index, int n, Half* v) => ((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)vtable.glVertexAttribs4hvNV)(index, n, v);
        public void glVertexAttribs4svNV(uint index, int count, short* v) => ((delegate* unmanaged[Cdecl]<uint, int, short*, void>)vtable.glVertexAttribs4svNV)(index, count, v);
        public void glVertexAttribs4ubvNV(uint index, int count, byte* v) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, void>)vtable.glVertexAttribs4ubvNV)(index, count, v);
        public void glVertexBindingDivisor(uint bindingindex, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexBindingDivisor)(bindingindex, divisor);
        public void glVertexBlendARB(int count) => ((delegate* unmanaged[Cdecl]<int, void>)vtable.glVertexBlendARB)(count);
        public void glVertexBlendEnvfATI(uint pname, float param) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glVertexBlendEnvfATI)(pname, param);
        public void glVertexBlendEnviATI(uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glVertexBlendEnviATI)(pname, param);
        public void glVertexFormatNV(int size, uint type, int stride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void>)vtable.glVertexFormatNV)(size, type, stride);
        public void glVertexP2ui(uint type, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexP2ui)(type, value);
        public void glVertexP2uiv(uint type, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexP2uiv)(type, value);
        public void glVertexP3ui(uint type, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexP3ui)(type, value);
        public void glVertexP3uiv(uint type, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexP3uiv)(type, value);
        public void glVertexP4ui(uint type, uint value) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexP4ui)(type, value);
        public void glVertexP4uiv(uint type, uint* value) => ((delegate* unmanaged[Cdecl]<uint, uint*, void>)vtable.glVertexP4uiv)(type, value);
        public void glVertexPointer(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glVertexPointer)(size, type, stride, pointer);
        public void glVertexPointerEXT(int size, uint type, int stride, int count, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, int, void*, void>)vtable.glVertexPointerEXT)(size, type, stride, count, pointer);
        public void glVertexPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride) => ((delegate* unmanaged[Cdecl]<int, uint, int, void**, int, void>)vtable.glVertexPointerListIBM)(size, type, stride, pointer, ptrstride);
        public void glVertexPointervINTEL(int size, uint type, void** pointer) => ((delegate* unmanaged[Cdecl]<int, uint, void**, void>)vtable.glVertexPointervINTEL)(size, type, pointer);
        public void glVertexStream1dATI(uint stream, double x) => ((delegate* unmanaged[Cdecl]<uint, double, void>)vtable.glVertexStream1dATI)(stream, x);
        public void glVertexStream1dvATI(uint stream, double* coords) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexStream1dvATI)(stream, coords);
        public void glVertexStream1fATI(uint stream, float x) => ((delegate* unmanaged[Cdecl]<uint, float, void>)vtable.glVertexStream1fATI)(stream, x);
        public void glVertexStream1fvATI(uint stream, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexStream1fvATI)(stream, coords);
        public void glVertexStream1iATI(uint stream, int x) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glVertexStream1iATI)(stream, x);
        public void glVertexStream1ivATI(uint stream, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexStream1ivATI)(stream, coords);
        public void glVertexStream1sATI(uint stream, short x) => ((delegate* unmanaged[Cdecl]<uint, short, void>)vtable.glVertexStream1sATI)(stream, x);
        public void glVertexStream1svATI(uint stream, short* coords) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexStream1svATI)(stream, coords);
        public void glVertexStream2dATI(uint stream, double x, double y) => ((delegate* unmanaged[Cdecl]<uint, double, double, void>)vtable.glVertexStream2dATI)(stream, x, y);
        public void glVertexStream2dvATI(uint stream, double* coords) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexStream2dvATI)(stream, coords);
        public void glVertexStream2fATI(uint stream, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glVertexStream2fATI)(stream, x, y);
        public void glVertexStream2fvATI(uint stream, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexStream2fvATI)(stream, coords);
        public void glVertexStream2iATI(uint stream, int x, int y) => ((delegate* unmanaged[Cdecl]<uint, int, int, void>)vtable.glVertexStream2iATI)(stream, x, y);
        public void glVertexStream2ivATI(uint stream, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexStream2ivATI)(stream, coords);
        public void glVertexStream2sATI(uint stream, short x, short y) => ((delegate* unmanaged[Cdecl]<uint, short, short, void>)vtable.glVertexStream2sATI)(stream, x, y);
        public void glVertexStream2svATI(uint stream, short* coords) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexStream2svATI)(stream, coords);
        public void glVertexStream3dATI(uint stream, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)vtable.glVertexStream3dATI)(stream, x, y, z);
        public void glVertexStream3dvATI(uint stream, double* coords) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexStream3dvATI)(stream, coords);
        public void glVertexStream3fATI(uint stream, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)vtable.glVertexStream3fATI)(stream, x, y, z);
        public void glVertexStream3fvATI(uint stream, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexStream3fvATI)(stream, coords);
        public void glVertexStream3iATI(uint stream, int x, int y, int z) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)vtable.glVertexStream3iATI)(stream, x, y, z);
        public void glVertexStream3ivATI(uint stream, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexStream3ivATI)(stream, coords);
        public void glVertexStream3sATI(uint stream, short x, short y, short z) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)vtable.glVertexStream3sATI)(stream, x, y, z);
        public void glVertexStream3svATI(uint stream, short* coords) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexStream3svATI)(stream, coords);
        public void glVertexStream4dATI(uint stream, double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)vtable.glVertexStream4dATI)(stream, x, y, z, w);
        public void glVertexStream4dvATI(uint stream, double* coords) => ((delegate* unmanaged[Cdecl]<uint, double*, void>)vtable.glVertexStream4dvATI)(stream, coords);
        public void glVertexStream4fATI(uint stream, float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glVertexStream4fATI)(stream, x, y, z, w);
        public void glVertexStream4fvATI(uint stream, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glVertexStream4fvATI)(stream, coords);
        public void glVertexStream4iATI(uint stream, int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glVertexStream4iATI)(stream, x, y, z, w);
        public void glVertexStream4ivATI(uint stream, int* coords) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glVertexStream4ivATI)(stream, coords);
        public void glVertexStream4sATI(uint stream, short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)vtable.glVertexStream4sATI)(stream, x, y, z, w);
        public void glVertexStream4svATI(uint stream, short* coords) => ((delegate* unmanaged[Cdecl]<uint, short*, void>)vtable.glVertexStream4svATI)(stream, coords);
        public void glVertexWeightPointerEXT(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glVertexWeightPointerEXT)(size, type, stride, pointer);
        public void glVertexWeightfEXT(float weight) => ((delegate* unmanaged[Cdecl]<float, void>)vtable.glVertexWeightfEXT)(weight);
        public void glVertexWeightfvEXT(float* weight) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glVertexWeightfvEXT)(weight);
        public void glVertexWeighthNV(Half weight) => ((delegate* unmanaged[Cdecl]<Half, void>)vtable.glVertexWeighthNV)(weight);
        public void glVertexWeighthvNV(Half* weight) => ((delegate* unmanaged[Cdecl]<Half*, void>)vtable.glVertexWeighthvNV)(weight);
        public uint glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong* capture_time) => ((delegate* unmanaged[Cdecl]<uint, uint*, ulong*, uint>)vtable.glVideoCaptureNV)(video_capture_slot, sequence_num, capture_time);
        public void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, uint pname, double* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, double*, void>)vtable.glVideoCaptureStreamParameterdvNV)(video_capture_slot, stream, pname, parameters);
        public void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, uint pname, float* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)vtable.glVideoCaptureStreamParameterfvNV)(video_capture_slot, stream, pname, parameters);
        public void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, int*, void>)vtable.glVideoCaptureStreamParameterivNV)(video_capture_slot, stream, pname, parameters);
        public void glViewport(int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glViewport)(x, y, width, height);
        public void glViewportArrayv(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glViewportArrayv)(first, count, v);
        public void glViewportArrayvNV(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glViewportArrayvNV)(first, count, v);
        public void glViewportArrayvOES(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glViewportArrayvOES)(first, count, v);
        public void glViewportIndexedf(uint index, float x, float y, float w, float h) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glViewportIndexedf)(index, x, y, w, h);
        public void glViewportIndexedfOES(uint index, float x, float y, float w, float h) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glViewportIndexedfOES)(index, x, y, w, h);
        public void glViewportIndexedfNV(uint index, float x, float y, float w, float h) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glViewportIndexedfNV)(index, x, y, w, h);
        public void glViewportIndexedfv(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glViewportIndexedfv)(index, v);
        public void glViewportIndexedfvOES(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glViewportIndexedfvOES)(index, v);
        public void glViewportIndexedfvNV(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glViewportIndexedfvNV)(index, v);
        public void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glViewportPositionWScaleNV)(index, xcoeff, ycoeff);
        public void glViewportSwizzleNV(uint index, uint swizzlex, uint swizzley, uint swizzlez, uint swizzlew) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)vtable.glViewportSwizzleNV)(index, swizzlex, swizzley, swizzlez, swizzlew);
        public void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* srcLayouts) => ((delegate* unmanaged[Cdecl]<uint, uint, uint*, uint, uint*, uint*, void>)vtable.glWaitSemaphoreEXT)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        public void glWaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, ulong*, void>)vtable.glWaitSemaphoreui64NVX)(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        public void glWaitSync(nint sync, uint flags, ulong timeout) => ((delegate* unmanaged[Cdecl]<nint, uint, ulong, void>)vtable.glWaitSync)(sync, flags, timeout);
        public void glWaitSyncAPPLE(nint sync, uint flags, ulong timeout) => ((delegate* unmanaged[Cdecl]<nint, uint, ulong, void>)vtable.glWaitSyncAPPLE)(sync, flags, timeout);
        public void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, float*, void>)vtable.glWeightPathsNV)(resultPath, numPaths, paths, weights);
        public void glWeightPointerARB(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glWeightPointerARB)(size, type, stride, pointer);
        public void glWeightPointerOES(int size, uint type, int stride, void* pointer) => ((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)vtable.glWeightPointerOES)(size, type, stride, pointer);
        public void glWeightbvARB(int size, sbyte* weights) => ((delegate* unmanaged[Cdecl]<int, sbyte*, void>)vtable.glWeightbvARB)(size, weights);
        public void glWeightdvARB(int size, double* weights) => ((delegate* unmanaged[Cdecl]<int, double*, void>)vtable.glWeightdvARB)(size, weights);
        public void glWeightfvARB(int size, float* weights) => ((delegate* unmanaged[Cdecl]<int, float*, void>)vtable.glWeightfvARB)(size, weights);
        public void glWeightivARB(int size, int* weights) => ((delegate* unmanaged[Cdecl]<int, int*, void>)vtable.glWeightivARB)(size, weights);
        public void glWeightsvARB(int size, short* weights) => ((delegate* unmanaged[Cdecl]<int, short*, void>)vtable.glWeightsvARB)(size, weights);
        public void glWeightubvARB(int size, byte* weights) => ((delegate* unmanaged[Cdecl]<int, byte*, void>)vtable.glWeightubvARB)(size, weights);
        public void glWeightuivARB(int size, uint* weights) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glWeightuivARB)(size, weights);
        public void glWeightusvARB(int size, ushort* weights) => ((delegate* unmanaged[Cdecl]<int, ushort*, void>)vtable.glWeightusvARB)(size, weights);
        public void glWindowPos2d(double x, double y) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glWindowPos2d)(x, y);
        public void glWindowPos2dARB(double x, double y) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glWindowPos2dARB)(x, y);
        public void glWindowPos2dMESA(double x, double y) => ((delegate* unmanaged[Cdecl]<double, double, void>)vtable.glWindowPos2dMESA)(x, y);
        public void glWindowPos2dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos2dv)(v);
        public void glWindowPos2dvARB(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos2dvARB)(v);
        public void glWindowPos2dvMESA(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos2dvMESA)(v);
        public void glWindowPos2f(float x, float y) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glWindowPos2f)(x, y);
        public void glWindowPos2fARB(float x, float y) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glWindowPos2fARB)(x, y);
        public void glWindowPos2fMESA(float x, float y) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glWindowPos2fMESA)(x, y);
        public void glWindowPos2fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos2fv)(v);
        public void glWindowPos2fvARB(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos2fvARB)(v);
        public void glWindowPos2fvMESA(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos2fvMESA)(v);
        public void glWindowPos2i(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glWindowPos2i)(x, y);
        public void glWindowPos2iARB(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glWindowPos2iARB)(x, y);
        public void glWindowPos2iMESA(int x, int y) => ((delegate* unmanaged[Cdecl]<int, int, void>)vtable.glWindowPos2iMESA)(x, y);
        public void glWindowPos2iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos2iv)(v);
        public void glWindowPos2ivARB(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos2ivARB)(v);
        public void glWindowPos2ivMESA(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos2ivMESA)(v);
        public void glWindowPos2s(short x, short y) => ((delegate* unmanaged[Cdecl]<short, short, void>)vtable.glWindowPos2s)(x, y);
        public void glWindowPos2sARB(short x, short y) => ((delegate* unmanaged[Cdecl]<short, short, void>)vtable.glWindowPos2sARB)(x, y);
        public void glWindowPos2sMESA(short x, short y) => ((delegate* unmanaged[Cdecl]<short, short, void>)vtable.glWindowPos2sMESA)(x, y);
        public void glWindowPos2sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos2sv)(v);
        public void glWindowPos2svARB(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos2svARB)(v);
        public void glWindowPos2svMESA(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos2svMESA)(v);
        public void glWindowPos3d(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glWindowPos3d)(x, y, z);
        public void glWindowPos3dARB(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glWindowPos3dARB)(x, y, z);
        public void glWindowPos3dMESA(double x, double y, double z) => ((delegate* unmanaged[Cdecl]<double, double, double, void>)vtable.glWindowPos3dMESA)(x, y, z);
        public void glWindowPos3dv(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos3dv)(v);
        public void glWindowPos3dvARB(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos3dvARB)(v);
        public void glWindowPos3dvMESA(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos3dvMESA)(v);
        public void glWindowPos3f(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glWindowPos3f)(x, y, z);
        public void glWindowPos3fARB(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glWindowPos3fARB)(x, y, z);
        public void glWindowPos3fMESA(float x, float y, float z) => ((delegate* unmanaged[Cdecl]<float, float, float, void>)vtable.glWindowPos3fMESA)(x, y, z);
        public void glWindowPos3fv(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos3fv)(v);
        public void glWindowPos3fvARB(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos3fvARB)(v);
        public void glWindowPos3fvMESA(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos3fvMESA)(v);
        public void glWindowPos3i(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glWindowPos3i)(x, y, z);
        public void glWindowPos3iARB(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glWindowPos3iARB)(x, y, z);
        public void glWindowPos3iMESA(int x, int y, int z) => ((delegate* unmanaged[Cdecl]<int, int, int, void>)vtable.glWindowPos3iMESA)(x, y, z);
        public void glWindowPos3iv(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos3iv)(v);
        public void glWindowPos3ivARB(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos3ivARB)(v);
        public void glWindowPos3ivMESA(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos3ivMESA)(v);
        public void glWindowPos3s(short x, short y, short z) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glWindowPos3s)(x, y, z);
        public void glWindowPos3sARB(short x, short y, short z) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glWindowPos3sARB)(x, y, z);
        public void glWindowPos3sMESA(short x, short y, short z) => ((delegate* unmanaged[Cdecl]<short, short, short, void>)vtable.glWindowPos3sMESA)(x, y, z);
        public void glWindowPos3sv(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos3sv)(v);
        public void glWindowPos3svARB(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos3svARB)(v);
        public void glWindowPos3svMESA(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos3svMESA)(v);
        public void glWindowPos4dMESA(double x, double y, double z, double w) => ((delegate* unmanaged[Cdecl]<double, double, double, double, void>)vtable.glWindowPos4dMESA)(x, y, z, w);
        public void glWindowPos4dvMESA(double* v) => ((delegate* unmanaged[Cdecl]<double*, void>)vtable.glWindowPos4dvMESA)(v);
        public void glWindowPos4fMESA(float x, float y, float z, float w) => ((delegate* unmanaged[Cdecl]<float, float, float, float, void>)vtable.glWindowPos4fMESA)(x, y, z, w);
        public void glWindowPos4fvMESA(float* v) => ((delegate* unmanaged[Cdecl]<float*, void>)vtable.glWindowPos4fvMESA)(v);
        public void glWindowPos4iMESA(int x, int y, int z, int w) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glWindowPos4iMESA)(x, y, z, w);
        public void glWindowPos4ivMESA(int* v) => ((delegate* unmanaged[Cdecl]<int*, void>)vtable.glWindowPos4ivMESA)(v);
        public void glWindowPos4sMESA(short x, short y, short z, short w) => ((delegate* unmanaged[Cdecl]<short, short, short, short, void>)vtable.glWindowPos4sMESA)(x, y, z, w);
        public void glWindowPos4svMESA(short* v) => ((delegate* unmanaged[Cdecl]<short*, void>)vtable.glWindowPos4svMESA)(v);
        public void glWindowRectanglesEXT(uint mode, int count, int* box) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glWindowRectanglesEXT)(mode, count, box);
        public void glWriteMaskEXT(uint res, uint input, uint outX, uint outY, uint outZ, uint outW) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, uint, void>)vtable.glWriteMaskEXT)(res, input, outX, outY, outZ, outW);
        public void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) => ((delegate* unmanaged[Cdecl]<ulong, uint, float, float, float, float, float, float, float, float, float, void>)vtable.glDrawVkImageNV)(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        public nint glGetVkProcAddrNV(byte* name) => ((delegate* unmanaged[Cdecl]<byte*, nint>)vtable.glGetVkProcAddrNV)(name);
        public void glWaitVkSemaphoreNV(ulong vkSemaphore) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glWaitVkSemaphoreNV)(vkSemaphore);
        public void glSignalVkSemaphoreNV(ulong vkSemaphore) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glSignalVkSemaphoreNV)(vkSemaphore);
        public void glSignalVkFenceNV(ulong vkFence) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glSignalVkFenceNV)(vkFence);
        public void glFramebufferParameteriMESA(uint target, uint pname, int param) => ((delegate* unmanaged[Cdecl]<uint, uint, int, void>)vtable.glFramebufferParameteriMESA)(target, pname, param);
        public void glGetFramebufferParameterivMESA(uint target, uint pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)vtable.glGetFramebufferParameterivMESA)(target, pname, parameters);
    }
}
#pragma warning restore IDE1006 // Naming Styles
