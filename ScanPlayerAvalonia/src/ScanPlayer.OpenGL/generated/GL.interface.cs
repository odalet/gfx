// This file is auto generated, do not edit.
using System;

#pragma warning disable IDE1006 // Naming Styles
namespace ScanPlayer.OpenGL;

unsafe partial interface IGLApi
{
    void glAccum(uint op, float value);
    void glAccumxOES(uint op, int value);
    void glActiveProgramEXT(uint program);
    void glActiveShaderProgram(uint pipeline, uint program);
    void glActiveShaderProgramEXT(uint pipeline, uint program);
    void glActiveStencilFaceEXT(uint face);
    void glActiveTexture(uint texture);
    void glActiveTextureARB(uint texture);
    void glActiveVaryingNV(uint program, byte* name);
    void glAlphaFragmentOp1ATI(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);
    void glAlphaFragmentOp2ATI(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);
    void glAlphaFragmentOp3ATI(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);
    void glAlphaFunc(uint func, float reference);
    void glAlphaFuncQCOM(uint func, float reference);
    void glAlphaFuncx(uint func, int reference);
    void glAlphaFuncxOES(uint func, int reference);
    void glAlphaToCoverageDitherControlNV(uint mode);
    void glApplyFramebufferAttachmentCMAAINTEL();
    void glApplyTextureEXT(uint mode);
    byte glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout);
    byte glAreProgramsResidentNV(int n, uint* programs, byte* residences);
    byte glAreTexturesResident(int n, uint* textures, byte* residences);
    byte glAreTexturesResidentEXT(int n, uint* textures, byte* residences);
    void glArrayElement(int i);
    void glArrayElementEXT(int i);
    void glArrayObjectATI(uint array, int size, uint type, int stride, uint buffer, uint offset);
    uint glAsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray);
    uint glAsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray);
    void glAsyncMarkerSGIX(uint marker);
    void glAttachObjectARB(nint containerObj, nint obj);
    void glAttachShader(uint program, uint shader);
    void glBegin(uint mode);
    void glBeginConditionalRender(uint id, uint mode);
    void glBeginConditionalRenderNV(uint id, uint mode);
    void glBeginConditionalRenderNVX(uint id);
    void glBeginFragmentShaderATI();
    void glBeginOcclusionQueryNV(uint id);
    void glBeginPerfMonitorAMD(uint monitor);
    void glBeginPerfQueryINTEL(uint queryHandle);
    void glBeginQuery(uint target, uint id);
    void glBeginQueryARB(uint target, uint id);
    void glBeginQueryEXT(uint target, uint id);
    void glBeginQueryIndexed(uint target, uint index, uint id);
    void glBeginTransformFeedback(uint primitiveMode);
    void glBeginTransformFeedbackEXT(uint primitiveMode);
    void glBeginTransformFeedbackNV(uint primitiveMode);
    void glBeginVertexShaderEXT();
    void glBeginVideoCaptureNV(uint video_capture_slot);
    void glBindAttribLocation(uint program, uint index, byte* name);
    void glBindAttribLocationARB(nint programObj, uint index, byte* name);
    void glBindBuffer(uint target, uint buffer);
    void glBindBufferARB(uint target, uint buffer);
    void glBindBufferBase(uint target, uint index, uint buffer);
    void glBindBufferBaseEXT(uint target, uint index, uint buffer);
    void glBindBufferBaseNV(uint target, uint index, uint buffer);
    void glBindBufferOffsetEXT(uint target, uint index, uint buffer, nint offset);
    void glBindBufferOffsetNV(uint target, uint index, uint buffer, nint offset);
    void glBindBufferRange(uint target, uint index, uint buffer, nint offset, nint size);
    void glBindBufferRangeEXT(uint target, uint index, uint buffer, nint offset, nint size);
    void glBindBufferRangeNV(uint target, uint index, uint buffer, nint offset, nint size);
    void glBindBuffersBase(uint target, uint first, int count, uint* buffers);
    void glBindBuffersRange(uint target, uint first, int count, uint* buffers, nint* offsets, nint* sizes);
    void glBindFragDataLocation(uint program, uint color, byte* name);
    void glBindFragDataLocationEXT(uint program, uint color, byte* name);
    void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte* name);
    void glBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, byte* name);
    void glBindFragmentShaderATI(uint id);
    void glBindFramebuffer(uint target, uint framebuffer);
    void glBindFramebufferEXT(uint target, uint framebuffer);
    void glBindFramebufferOES(uint target, uint framebuffer);
    void glBindImageTexture(uint unit, uint texture, int level, byte layered, int layer, uint access, uint format);
    void glBindImageTextureEXT(uint index, uint texture, int level, byte layered, int layer, uint access, int format);
    void glBindImageTextures(uint first, int count, uint* textures);
    uint glBindLightParameterEXT(uint light, uint value);
    uint glBindMaterialParameterEXT(uint face, uint value);
    void glBindMultiTextureEXT(uint texunit, uint target, uint texture);
    uint glBindParameterEXT(uint value);
    void glBindProgramARB(uint target, uint program);
    void glBindProgramNV(uint target, uint id);
    void glBindProgramPipeline(uint pipeline);
    void glBindProgramPipelineEXT(uint pipeline);
    void glBindRenderbuffer(uint target, uint renderbuffer);
    void glBindRenderbufferEXT(uint target, uint renderbuffer);
    void glBindRenderbufferOES(uint target, uint renderbuffer);
    void glBindSampler(uint unit, uint sampler);
    void glBindSamplers(uint first, int count, uint* samplers);
    void glBindShadingRateImageNV(uint texture);
    uint glBindTexGenParameterEXT(uint unit, uint coord, uint value);
    void glBindTexture(uint target, uint texture);
    void glBindTextureEXT(uint target, uint texture);
    void glBindTextureUnit(uint unit, uint texture);
    uint glBindTextureUnitParameterEXT(uint unit, uint value);
    void glBindTextures(uint first, int count, uint* textures);
    void glBindTransformFeedback(uint target, uint id);
    void glBindTransformFeedbackNV(uint target, uint id);
    void glBindVertexArray(uint array);
    void glBindVertexArrayAPPLE(uint array);
    void glBindVertexArrayOES(uint array);
    void glBindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride);
    void glBindVertexBuffers(uint first, int count, uint* buffers, nint* offsets, int* strides);
    void glBindVertexShaderEXT(uint id);
    void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, uint frame_region, nint offset);
    void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, uint frame_region, uint target, uint texture);
    void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz);
    void glBinormal3bvEXT(sbyte* v);
    void glBinormal3dEXT(double bx, double by, double bz);
    void glBinormal3dvEXT(double* v);
    void glBinormal3fEXT(float bx, float by, float bz);
    void glBinormal3fvEXT(float* v);
    void glBinormal3iEXT(int bx, int by, int bz);
    void glBinormal3ivEXT(int* v);
    void glBinormal3sEXT(short bx, short by, short bz);
    void glBinormal3svEXT(short* v);
    void glBinormalPointerEXT(uint type, int stride, void* pointer);
    void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap);
    void glBitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap);
    void glBlendBarrier();
    void glBlendBarrierKHR();
    void glBlendBarrierNV();
    void glBlendColor(float red, float green, float blue, float alpha);
    void glBlendColorEXT(float red, float green, float blue, float alpha);
    void glBlendColorxOES(int red, int green, int blue, int alpha);
    void glBlendEquation(uint mode);
    void glBlendEquationEXT(uint mode);
    void glBlendEquationIndexedAMD(uint buf, uint mode);
    void glBlendEquationOES(uint mode);
    void glBlendEquationSeparate(uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparateEXT(uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparateIndexedAMD(uint buf, uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparateOES(uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparateiARB(uint buf, uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparateiEXT(uint buf, uint modeRGB, uint modeAlpha);
    void glBlendEquationSeparateiOES(uint buf, uint modeRGB, uint modeAlpha);
    void glBlendEquationi(uint buf, uint mode);
    void glBlendEquationiARB(uint buf, uint mode);
    void glBlendEquationiEXT(uint buf, uint mode);
    void glBlendEquationiOES(uint buf, uint mode);
    void glBlendFunc(uint sfactor, uint dfactor);
    void glBlendFuncIndexedAMD(uint buf, uint src, uint dst);
    void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
    void glBlendFuncSeparateEXT(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
    void glBlendFuncSeparateINGR(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
    void glBlendFuncSeparateIndexedAMD(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
    void glBlendFuncSeparateOES(uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
    void glBlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
    void glBlendFuncSeparateiARB(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
    void glBlendFuncSeparateiEXT(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
    void glBlendFuncSeparateiOES(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
    void glBlendFunci(uint buf, uint src, uint dst);
    void glBlendFunciARB(uint buf, uint src, uint dst);
    void glBlendFunciEXT(uint buf, uint src, uint dst);
    void glBlendFunciOES(uint buf, uint src, uint dst);
    void glBlendParameteriNV(uint pname, int value);
    void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
    void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
    void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
    void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
    void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
    void glBufferAddressRangeNV(uint pname, uint index, ulong address, nint length);
    void glBufferAttachMemoryNV(uint target, uint memory, ulong offset);
    void glBufferData(uint target, nint size, void* data, uint usage);
    void glBufferDataARB(uint target, nint size, void* data, uint usage);
    void glBufferPageCommitmentARB(uint target, nint offset, nint size, byte commit);
    void glBufferPageCommitmentMemNV(uint target, nint offset, nint size, uint memory, ulong memOffset, byte commit);
    void glBufferParameteriAPPLE(uint target, uint pname, int param);
    void glBufferStorage(uint target, nint size, void* data, uint flags);
    void glBufferStorageEXT(uint target, nint size, void* data, uint flags);
    void glBufferStorageExternalEXT(uint target, nint offset, nint size, void* clientBuffer, uint flags);
    void glBufferStorageMemEXT(uint target, nint size, uint memory, ulong offset);
    void glBufferSubData(uint target, nint offset, nint size, void* data);
    void glBufferSubDataARB(uint target, nint offset, nint size, void* data);
    void glCallCommandListNV(uint list);
    void glCallList(uint list);
    void glCallLists(int n, uint type, void* lists);
    uint glCheckFramebufferStatus(uint target);
    uint glCheckFramebufferStatusEXT(uint target);
    uint glCheckFramebufferStatusOES(uint target);
    uint glCheckNamedFramebufferStatus(uint framebuffer, uint target);
    uint glCheckNamedFramebufferStatusEXT(uint framebuffer, uint target);
    void glClampColor(uint target, uint clamp);
    void glClampColorARB(uint target, uint clamp);
    void glClear(uint mask);
    void glClearAccum(float red, float green, float blue, float alpha);
    void glClearAccumxOES(int red, int green, int blue, int alpha);
    void glClearBufferData(uint target, uint internalformat, uint format, uint type, void* data);
    void glClearBufferSubData(uint target, uint internalformat, nint offset, nint size, uint format, uint type, void* data);
    void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil);
    void glClearBufferfv(uint buffer, int drawbuffer, float* value);
    void glClearBufferiv(uint buffer, int drawbuffer, int* value);
    void glClearBufferuiv(uint buffer, int drawbuffer, uint* value);
    void glClearColor(float red, float green, float blue, float alpha);
    void glClearColorIiEXT(int red, int green, int blue, int alpha);
    void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha);
    void glClearColorx(int red, int green, int blue, int alpha);
    void glClearColorxOES(int red, int green, int blue, int alpha);
    void glClearDepth(double depth);
    void glClearDepthdNV(double depth);
    void glClearDepthf(float d);
    void glClearDepthfOES(float depth);
    void glClearDepthx(int depth);
    void glClearDepthxOES(int depth);
    void glClearIndex(float c);
    void glClearNamedBufferData(uint buffer, uint internalformat, uint format, uint type, void* data);
    void glClearNamedBufferDataEXT(uint buffer, uint internalformat, uint format, uint type, void* data);
    void glClearNamedBufferSubData(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data);
    void glClearNamedBufferSubDataEXT(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data);
    void glClearNamedFramebufferfi(uint framebuffer, uint buffer, int drawbuffer, float depth, int stencil);
    void glClearNamedFramebufferfv(uint framebuffer, uint buffer, int drawbuffer, float* value);
    void glClearNamedFramebufferiv(uint framebuffer, uint buffer, int drawbuffer, int* value);
    void glClearNamedFramebufferuiv(uint framebuffer, uint buffer, int drawbuffer, uint* value);
    void glClearPixelLocalStorageuiEXT(int offset, int n, uint* values);
    void glClearStencil(int s);
    void glClearTexImage(uint texture, int level, uint format, uint type, void* data);
    void glClearTexImageEXT(uint texture, int level, uint format, uint type, void* data);
    void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data);
    void glClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data);
    void glClientActiveTexture(uint texture);
    void glClientActiveTextureARB(uint texture);
    void glClientActiveVertexStreamATI(uint stream);
    void glClientAttribDefaultEXT(uint mask);
    void glClientWaitSemaphoreui64NVX(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);
    uint glClientWaitSync(nint sync, uint flags, ulong timeout);
    uint glClientWaitSyncAPPLE(nint sync, uint flags, ulong timeout);
    void glClipControl(uint origin, uint depth);
    void glClipControlEXT(uint origin, uint depth);
    void glClipPlane(uint plane, double* equation);
    void glClipPlanef(uint p, float* eqn);
    void glClipPlanefIMG(uint p, float* eqn);
    void glClipPlanefOES(uint plane, float* equation);
    void glClipPlanex(uint plane, int* equation);
    void glClipPlanexIMG(uint p, int* eqn);
    void glClipPlanexOES(uint plane, int* equation);
    void glColor3b(sbyte red, sbyte green, sbyte blue);
    void glColor3bv(sbyte* v);
    void glColor3d(double red, double green, double blue);
    void glColor3dv(double* v);
    void glColor3f(float red, float green, float blue);
    void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z);
    void glColor3fVertex3fvSUN(float* c, float* v);
    void glColor3fv(float* v);
    void glColor3hNV(Half red, Half green, Half blue);
    void glColor3hvNV(Half* v);
    void glColor3i(int red, int green, int blue);
    void glColor3iv(int* v);
    void glColor3s(short red, short green, short blue);
    void glColor3sv(short* v);
    void glColor3ub(byte red, byte green, byte blue);
    void glColor3ubv(byte* v);
    void glColor3ui(uint red, uint green, uint blue);
    void glColor3uiv(uint* v);
    void glColor3us(ushort red, ushort green, ushort blue);
    void glColor3usv(ushort* v);
    void glColor3xOES(int red, int green, int blue);
    void glColor3xvOES(int* components);
    void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);
    void glColor4bv(sbyte* v);
    void glColor4d(double red, double green, double blue, double alpha);
    void glColor4dv(double* v);
    void glColor4f(float red, float green, float blue, float alpha);
    void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v);
    void glColor4fv(float* v);
    void glColor4hNV(Half red, Half green, Half blue, Half alpha);
    void glColor4hvNV(Half* v);
    void glColor4i(int red, int green, int blue, int alpha);
    void glColor4iv(int* v);
    void glColor4s(short red, short green, short blue, short alpha);
    void glColor4sv(short* v);
    void glColor4ub(byte red, byte green, byte blue, byte alpha);
    void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);
    void glColor4ubVertex2fvSUN(byte* c, float* v);
    void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);
    void glColor4ubVertex3fvSUN(byte* c, float* v);
    void glColor4ubv(byte* v);
    void glColor4ui(uint red, uint green, uint blue, uint alpha);
    void glColor4uiv(uint* v);
    void glColor4us(ushort red, ushort green, ushort blue, ushort alpha);
    void glColor4usv(ushort* v);
    void glColor4x(int red, int green, int blue, int alpha);
    void glColor4xOES(int red, int green, int blue, int alpha);
    void glColor4xvOES(int* components);
    void glColorFormatNV(int size, uint type, int stride);
    void glColorFragmentOp1ATI(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);
    void glColorFragmentOp2ATI(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);
    void glColorFragmentOp3ATI(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);
    void glColorMask(byte red, byte green, byte blue, byte alpha);
    void glColorMaskIndexedEXT(uint index, byte r, byte g, byte b, byte a);
    void glColorMaski(uint index, byte r, byte g, byte b, byte a);
    void glColorMaskiEXT(uint index, byte r, byte g, byte b, byte a);
    void glColorMaskiOES(uint index, byte r, byte g, byte b, byte a);
    void glColorMaterial(uint face, uint mode);
    void glColorP3ui(uint type, uint color);
    void glColorP3uiv(uint type, uint* color);
    void glColorP4ui(uint type, uint color);
    void glColorP4uiv(uint type, uint* color);
    void glColorPointer(int size, uint type, int stride, void* pointer);
    void glColorPointerEXT(int size, uint type, int stride, int count, void* pointer);
    void glColorPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride);
    void glColorPointervINTEL(int size, uint type, void** pointer);
    void glColorSubTable(uint target, int start, int count, uint format, uint type, void* data);
    void glColorSubTableEXT(uint target, int start, int count, uint format, uint type, void* data);
    void glColorTable(uint target, uint internalformat, int width, uint format, uint type, void* table);
    void glColorTableEXT(uint target, uint internalFormat, int width, uint format, uint type, void* table);
    void glColorTableParameterfv(uint target, uint pname, float* parameters);
    void glColorTableParameterfvSGI(uint target, uint pname, float* parameters);
    void glColorTableParameteriv(uint target, uint pname, int* parameters);
    void glColorTableParameterivSGI(uint target, uint pname, int* parameters);
    void glColorTableSGI(uint target, uint internalformat, int width, uint format, uint type, void* table);
    void glCombinerInputNV(uint stage, uint portion, uint variable, uint input, uint mapping, uint componentUsage);
    void glCombinerOutputNV(uint stage, uint portion, uint abOutput, uint cdOutput, uint sumOutput, uint scale, uint bias, byte abDotProduct, byte cdDotProduct, byte muxSum);
    void glCombinerParameterfNV(uint pname, float param);
    void glCombinerParameterfvNV(uint pname, float* parameters);
    void glCombinerParameteriNV(uint pname, int param);
    void glCombinerParameterivNV(uint pname, int* parameters);
    void glCombinerStageParameterfvNV(uint stage, uint pname, float* parameters);
    void glCommandListSegmentsNV(uint list, uint segments);
    void glCompileCommandListNV(uint list);
    void glCompileShader(uint shader);
    void glCompileShaderARB(nint shaderObj);
    void glCompileShaderIncludeARB(uint shader, int count, byte** path, int* length);
    void glCompressedMultiTexImage1DEXT(uint texunit, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits);
    void glCompressedMultiTexImage2DEXT(uint texunit, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits);
    void glCompressedMultiTexImage3DEXT(uint texunit, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits);
    void glCompressedMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits);
    void glCompressedMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits);
    void glCompressedMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits);
    void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data);
    void glCompressedTexImage1DARB(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data);
    void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data);
    void glCompressedTexImage2DARB(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data);
    void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data);
    void glCompressedTexImage3DARB(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data);
    void glCompressedTexImage3DOES(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data);
    void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data);
    void glCompressedTexSubImage1DARB(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data);
    void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data);
    void glCompressedTexSubImage2DARB(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data);
    void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data);
    void glCompressedTexSubImage3DARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data);
    void glCompressedTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data);
    void glCompressedTextureImage1DEXT(uint texture, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits);
    void glCompressedTextureImage2DEXT(uint texture, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits);
    void glCompressedTextureImage3DEXT(uint texture, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits);
    void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, int imageSize, void* data);
    void glCompressedTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits);
    void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data);
    void glCompressedTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits);
    void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data);
    void glCompressedTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits);
    void glConservativeRasterParameterfNV(uint pname, float value);
    void glConservativeRasterParameteriNV(uint pname, int param);
    void glConvolutionFilter1D(uint target, uint internalformat, int width, uint format, uint type, void* image);
    void glConvolutionFilter1DEXT(uint target, uint internalformat, int width, uint format, uint type, void* image);
    void glConvolutionFilter2D(uint target, uint internalformat, int width, int height, uint format, uint type, void* image);
    void glConvolutionFilter2DEXT(uint target, uint internalformat, int width, int height, uint format, uint type, void* image);
    void glConvolutionParameterf(uint target, uint pname, float parameters);
    void glConvolutionParameterfEXT(uint target, uint pname, float parameters);
    void glConvolutionParameterfv(uint target, uint pname, float* parameters);
    void glConvolutionParameterfvEXT(uint target, uint pname, float* parameters);
    void glConvolutionParameteri(uint target, uint pname, int parameters);
    void glConvolutionParameteriEXT(uint target, uint pname, int parameters);
    void glConvolutionParameteriv(uint target, uint pname, int* parameters);
    void glConvolutionParameterivEXT(uint target, uint pname, int* parameters);
    void glConvolutionParameterxOES(uint target, uint pname, int param);
    void glConvolutionParameterxvOES(uint target, uint pname, int* parameters);
    void glCopyBufferSubData(uint readTarget, uint writeTarget, nint readOffset, nint writeOffset, nint size);
    void glCopyBufferSubDataNV(uint readTarget, uint writeTarget, nint readOffset, nint writeOffset, nint size);
    void glCopyColorSubTable(uint target, int start, int x, int y, int width);
    void glCopyColorSubTableEXT(uint target, int start, int x, int y, int width);
    void glCopyColorTable(uint target, uint internalformat, int x, int y, int width);
    void glCopyColorTableSGI(uint target, uint internalformat, int x, int y, int width);
    void glCopyConvolutionFilter1D(uint target, uint internalformat, int x, int y, int width);
    void glCopyConvolutionFilter1DEXT(uint target, uint internalformat, int x, int y, int width);
    void glCopyConvolutionFilter2D(uint target, uint internalformat, int x, int y, int width, int height);
    void glCopyConvolutionFilter2DEXT(uint target, uint internalformat, int x, int y, int width, int height);
    void glCopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    void glCopyImageSubDataEXT(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    void glCopyImageSubDataNV(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
    void glCopyImageSubDataOES(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    void glCopyMultiTexImage1DEXT(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int border);
    void glCopyMultiTexImage2DEXT(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
    void glCopyMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int x, int y, int width);
    void glCopyMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    void glCopyMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);
    void glCopyPathNV(uint resultPath, uint srcPath);
    void glCopyPixels(int x, int y, int width, int height, uint type);
    void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border);
    void glCopyTexImage1DEXT(uint target, int level, uint internalformat, int x, int y, int width, int border);
    void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
    void glCopyTexImage2DEXT(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
    void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width);
    void glCopyTexSubImage1DEXT(uint target, int level, int xoffset, int x, int y, int width);
    void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    void glCopyTexSubImage2DEXT(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    void glCopyTexSubImage3DEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    void glCopyTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    void glCopyTextureImage1DEXT(uint texture, uint target, int level, uint internalformat, int x, int y, int width, int border);
    void glCopyTextureImage2DEXT(uint texture, uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
    void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount);
    void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);
    void glCopyTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int x, int y, int width);
    void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    void glCopyTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    void glCopyTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    void glCoverFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues);
    void glCoverFillPathNV(uint path, uint coverMode);
    void glCoverStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues);
    void glCoverStrokePathNV(uint path, uint coverMode);
    void glCoverageMaskNV(byte mask);
    void glCoverageModulationNV(uint components);
    void glCoverageModulationTableNV(int n, float* v);
    void glCoverageOperationNV(uint operation);
    void glCreateBuffers(int n, uint* buffers);
    void glCreateCommandListsNV(int n, uint* lists);
    void glCreateFramebuffers(int n, uint* framebuffers);
    void glCreateMemoryObjectsEXT(int n, uint* memoryObjects);
    void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle);
    uint glCreateProgram();
    nint glCreateProgramObjectARB();
    void glCreateProgramPipelines(int n, uint* pipelines);
    uint glCreateProgressFenceNVX();
    void glCreateQueries(uint target, int n, uint* ids);
    void glCreateRenderbuffers(int n, uint* renderbuffers);
    void glCreateSamplers(int n, uint* samplers);
    void glCreateSemaphoresNV(int n, uint* semaphores);
    uint glCreateShader(uint type);
    nint glCreateShaderObjectARB(uint shaderType);
    uint glCreateShaderProgramEXT(uint type, byte* str);
    uint glCreateShaderProgramv(uint type, int count, byte** strings);
    uint glCreateShaderProgramvEXT(uint type, int count, byte** strings);
    void glCreateStatesNV(int n, uint* states);
    nint glCreateSyncFromCLeventARB(nint* context, nint* @event, uint flags);
    void glCreateTextures(uint target, int n, uint* textures);
    void glCreateTransformFeedbacks(int n, uint* ids);
    void glCreateVertexArrays(int n, uint* arrays);
    void glCullFace(uint mode);
    void glCullParameterdvEXT(uint pname, double* parameters);
    void glCullParameterfvEXT(uint pname, float* parameters);
    void glCurrentPaletteMatrixARB(int index);
    void glCurrentPaletteMatrixOES(uint matrixpaletteindex);
    void glDebugMessageCallback(nint callback, void* userParam);
    void glDebugMessageCallbackAMD(nint callback, void* userParam);
    void glDebugMessageCallbackARB(nint callback, void* userParam);
    void glDebugMessageCallbackKHR(nint callback, void* userParam);
    void glDebugMessageControl(uint source, uint type, uint severity, int count, uint* ids, byte enabled);
    void glDebugMessageControlARB(uint source, uint type, uint severity, int count, uint* ids, byte enabled);
    void glDebugMessageControlKHR(uint source, uint type, uint severity, int count, uint* ids, byte enabled);
    void glDebugMessageEnableAMD(uint category, uint severity, int count, uint* ids, byte enabled);
    void glDebugMessageInsert(uint source, uint type, uint id, uint severity, int length, byte* buf);
    void glDebugMessageInsertAMD(uint category, uint severity, uint id, int length, byte* buf);
    void glDebugMessageInsertARB(uint source, uint type, uint id, uint severity, int length, byte* buf);
    void glDebugMessageInsertKHR(uint source, uint type, uint id, uint severity, int length, byte* buf);
    void glDeformSGIX(uint mask);
    void glDeformationMap3dSGIX(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points);
    void glDeformationMap3fSGIX(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points);
    void glDeleteAsyncMarkersSGIX(uint marker, int range);
    void glDeleteBuffers(int n, uint* buffers);
    void glDeleteBuffersARB(int n, uint* buffers);
    void glDeleteCommandListsNV(int n, uint* lists);
    void glDeleteFencesAPPLE(int n, uint* fences);
    void glDeleteFencesNV(int n, uint* fences);
    void glDeleteFragmentShaderATI(uint id);
    void glDeleteFramebuffers(int n, uint* framebuffers);
    void glDeleteFramebuffersEXT(int n, uint* framebuffers);
    void glDeleteFramebuffersOES(int n, uint* framebuffers);
    void glDeleteLists(uint list, int range);
    void glDeleteMemoryObjectsEXT(int n, uint* memoryObjects);
    void glDeleteNamedStringARB(int namelen, byte* name);
    void glDeleteNamesAMD(uint identifier, uint num, uint* names);
    void glDeleteObjectARB(nint obj);
    void glDeleteOcclusionQueriesNV(int n, uint* ids);
    void glDeletePathsNV(uint path, int range);
    void glDeletePerfMonitorsAMD(int n, uint* monitors);
    void glDeletePerfQueryINTEL(uint queryHandle);
    void glDeleteProgram(uint program);
    void glDeleteProgramPipelines(int n, uint* pipelines);
    void glDeleteProgramPipelinesEXT(int n, uint* pipelines);
    void glDeleteProgramsARB(int n, uint* programs);
    void glDeleteProgramsNV(int n, uint* programs);
    void glDeleteQueries(int n, uint* ids);
    void glDeleteQueriesARB(int n, uint* ids);
    void glDeleteQueriesEXT(int n, uint* ids);
    void glDeleteQueryResourceTagNV(int n, int* tagIds);
    void glDeleteRenderbuffers(int n, uint* renderbuffers);
    void glDeleteRenderbuffersEXT(int n, uint* renderbuffers);
    void glDeleteRenderbuffersOES(int n, uint* renderbuffers);
    void glDeleteSamplers(int count, uint* samplers);
    void glDeleteSemaphoresEXT(int n, uint* semaphores);
    void glDeleteShader(uint shader);
    void glDeleteStatesNV(int n, uint* states);
    void glDeleteSync(nint sync);
    void glDeleteSyncAPPLE(nint sync);
    void glDeleteTextures(int n, uint* textures);
    void glDeleteTexturesEXT(int n, uint* textures);
    void glDeleteTransformFeedbacks(int n, uint* ids);
    void glDeleteTransformFeedbacksNV(int n, uint* ids);
    void glDeleteVertexArrays(int n, uint* arrays);
    void glDeleteVertexArraysAPPLE(int n, uint* arrays);
    void glDeleteVertexArraysOES(int n, uint* arrays);
    void glDeleteVertexShaderEXT(uint id);
    void glDepthBoundsEXT(double zmin, double zmax);
    void glDepthBoundsdNV(double zmin, double zmax);
    void glDepthFunc(uint func);
    void glDepthMask(byte flag);
    void glDepthRange(double n, double f);
    void glDepthRangeArraydvNV(uint first, int count, double* v);
    void glDepthRangeArrayfvNV(uint first, int count, float* v);
    void glDepthRangeArrayfvOES(uint first, int count, float* v);
    void glDepthRangeArrayv(uint first, int count, double* v);
    void glDepthRangeIndexed(uint index, double n, double f);
    void glDepthRangeIndexeddNV(uint index, double n, double f);
    void glDepthRangeIndexedfNV(uint index, float n, float f);
    void glDepthRangeIndexedfOES(uint index, float n, float f);
    void glDepthRangedNV(double zNear, double zFar);
    void glDepthRangef(float n, float f);
    void glDepthRangefOES(float n, float f);
    void glDepthRangex(int n, int f);
    void glDepthRangexOES(int n, int f);
    void glDetachObjectARB(nint containerObj, nint attachedObj);
    void glDetachShader(uint program, uint shader);
    void glDetailTexFuncSGIS(uint target, int n, float* points);
    void glDisable(uint cap);
    void glDisableClientState(uint array);
    void glDisableClientStateIndexedEXT(uint array, uint index);
    void glDisableClientStateiEXT(uint array, uint index);
    void glDisableDriverControlQCOM(uint driverControl);
    void glDisableIndexedEXT(uint target, uint index);
    void glDisableVariantClientStateEXT(uint id);
    void glDisableVertexArrayAttrib(uint vaobj, uint index);
    void glDisableVertexArrayAttribEXT(uint vaobj, uint index);
    void glDisableVertexArrayEXT(uint vaobj, uint array);
    void glDisableVertexAttribAPPLE(uint index, uint pname);
    void glDisableVertexAttribArray(uint index);
    void glDisableVertexAttribArrayARB(uint index);
    void glDisablei(uint target, uint index);
    void glDisableiEXT(uint target, uint index);
    void glDisableiNV(uint target, uint index);
    void glDisableiOES(uint target, uint index);
    void glDiscardFramebufferEXT(uint target, int numAttachments, uint* attachments);
    void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
    void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z);
    void glDispatchComputeIndirect(nint indirect);
    void glDrawArrays(uint mode, int first, int count);
    void glDrawArraysEXT(uint mode, int first, int count);
    void glDrawArraysIndirect(uint mode, void* indirect);
    void glDrawArraysInstanced(uint mode, int first, int count, int instancecount);
    void glDrawArraysInstancedANGLE(uint mode, int first, int count, int primcount);
    void glDrawArraysInstancedARB(uint mode, int first, int count, int primcount);
    void glDrawArraysInstancedBaseInstance(uint mode, int first, int count, int instancecount, uint baseinstance);
    void glDrawArraysInstancedBaseInstanceEXT(uint mode, int first, int count, int instancecount, uint baseinstance);
    void glDrawArraysInstancedEXT(uint mode, int start, int count, int primcount);
    void glDrawArraysInstancedNV(uint mode, int first, int count, int primcount);
    void glDrawBuffer(uint buf);
    void glDrawBuffers(int n, uint* bufs);
    void glDrawBuffersARB(int n, uint* bufs);
    void glDrawBuffersATI(int n, uint* bufs);
    void glDrawBuffersEXT(int n, uint* bufs);
    void glDrawBuffersIndexedEXT(int n, uint* location, int* indices);
    void glDrawBuffersNV(int n, uint* bufs);
    void glDrawCommandsAddressNV(uint primitiveMode, ulong* indirects, int* sizes, uint count);
    void glDrawCommandsNV(uint primitiveMode, uint buffer, nint* indirects, int* sizes, uint count);
    void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count);
    void glDrawCommandsStatesNV(uint buffer, nint* indirects, int* sizes, uint* states, uint* fbos, uint count);
    void glDrawElementArrayAPPLE(uint mode, int first, int count);
    void glDrawElementArrayATI(uint mode, int count);
    void glDrawElements(uint mode, int count, uint type, void* indices);
    void glDrawElementsBaseVertex(uint mode, int count, uint type, void* indices, int basevertex);
    void glDrawElementsBaseVertexEXT(uint mode, int count, uint type, void* indices, int basevertex);
    void glDrawElementsBaseVertexOES(uint mode, int count, uint type, void* indices, int basevertex);
    void glDrawElementsIndirect(uint mode, uint type, void* indirect);
    void glDrawElementsInstanced(uint mode, int count, uint type, void* indices, int instancecount);
    void glDrawElementsInstancedANGLE(uint mode, int count, uint type, void* indices, int primcount);
    void glDrawElementsInstancedARB(uint mode, int count, uint type, void* indices, int primcount);
    void glDrawElementsInstancedBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance);
    void glDrawElementsInstancedBaseInstanceEXT(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance);
    void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, void* indices, int instancecount, int basevertex);
    void glDrawElementsInstancedBaseVertexBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance);
    void glDrawElementsInstancedBaseVertexBaseInstanceEXT(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance);
    void glDrawElementsInstancedBaseVertexEXT(uint mode, int count, uint type, void* indices, int instancecount, int basevertex);
    void glDrawElementsInstancedBaseVertexOES(uint mode, int count, uint type, void* indices, int instancecount, int basevertex);
    void glDrawElementsInstancedEXT(uint mode, int count, uint type, void* indices, int primcount);
    void glDrawElementsInstancedNV(uint mode, int count, uint type, void* indices, int primcount);
    void glDrawMeshArraysSUN(uint mode, int first, int count, int width);
    void glDrawMeshTasksNV(uint first, uint count);
    void glDrawMeshTasksIndirectNV(nint indirect);
    void glDrawPixels(int width, int height, uint format, uint type, void* pixels);
    void glDrawRangeElementArrayAPPLE(uint mode, uint start, uint end, int first, int count);
    void glDrawRangeElementArrayATI(uint mode, uint start, uint end, int count);
    void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, void* indices);
    void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex);
    void glDrawRangeElementsBaseVertexEXT(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex);
    void glDrawRangeElementsBaseVertexOES(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex);
    void glDrawRangeElementsEXT(uint mode, uint start, uint end, int count, uint type, void* indices);
    void glDrawTexfOES(float x, float y, float z, float width, float height);
    void glDrawTexfvOES(float* coords);
    void glDrawTexiOES(int x, int y, int z, int width, int height);
    void glDrawTexivOES(int* coords);
    void glDrawTexsOES(short x, short y, short z, short width, short height);
    void glDrawTexsvOES(short* coords);
    void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
    void glDrawTexxOES(int x, int y, int z, int width, int height);
    void glDrawTexxvOES(int* coords);
    void glDrawTransformFeedback(uint mode, uint id);
    void glDrawTransformFeedbackEXT(uint mode, uint id);
    void glDrawTransformFeedbackInstanced(uint mode, uint id, int instancecount);
    void glDrawTransformFeedbackInstancedEXT(uint mode, uint id, int instancecount);
    void glDrawTransformFeedbackNV(uint mode, uint id);
    void glDrawTransformFeedbackStream(uint mode, uint id, uint stream);
    void glDrawTransformFeedbackStreamInstanced(uint mode, uint id, uint stream, int instancecount);
    void glEGLImageTargetRenderbufferStorageOES(uint target, void* image);
    void glEGLImageTargetTexStorageEXT(uint target, void* image, int* attrib_list);
    void glEGLImageTargetTexture2DOES(uint target, void* image);
    void glEGLImageTargetTextureStorageEXT(uint texture, void* image, int* attrib_list);
    void glEdgeFlag(byte flag);
    void glEdgeFlagFormatNV(int stride);
    void glEdgeFlagPointer(int stride, void* pointer);
    void glEdgeFlagPointerEXT(int stride, int count, byte* pointer);
    void glEdgeFlagPointerListIBM(int stride, byte** pointer, int ptrstride);
    void glEdgeFlagv(byte* flag);
    void glElementPointerAPPLE(uint type, void* pointer);
    void glElementPointerATI(uint type, void* pointer);
    void glEnable(uint cap);
    void glEnableClientState(uint array);
    void glEnableClientStateIndexedEXT(uint array, uint index);
    void glEnableClientStateiEXT(uint array, uint index);
    void glEnableDriverControlQCOM(uint driverControl);
    void glEnableIndexedEXT(uint target, uint index);
    void glEnableVariantClientStateEXT(uint id);
    void glEnableVertexArrayAttrib(uint vaobj, uint index);
    void glEnableVertexArrayAttribEXT(uint vaobj, uint index);
    void glEnableVertexArrayEXT(uint vaobj, uint array);
    void glEnableVertexAttribAPPLE(uint index, uint pname);
    void glEnableVertexAttribArray(uint index);
    void glEnableVertexAttribArrayARB(uint index);
    void glEnablei(uint target, uint index);
    void glEnableiEXT(uint target, uint index);
    void glEnableiNV(uint target, uint index);
    void glEnableiOES(uint target, uint index);
    void glEnd();
    void glEndConditionalRender();
    void glEndConditionalRenderNV();
    void glEndConditionalRenderNVX();
    void glEndFragmentShaderATI();
    void glEndList();
    void glEndOcclusionQueryNV();
    void glEndPerfMonitorAMD(uint monitor);
    void glEndPerfQueryINTEL(uint queryHandle);
    void glEndQuery(uint target);
    void glEndQueryARB(uint target);
    void glEndQueryEXT(uint target);
    void glEndQueryIndexed(uint target, uint index);
    void glEndTilingQCOM(uint preserveMask);
    void glEndTransformFeedback();
    void glEndTransformFeedbackEXT();
    void glEndTransformFeedbackNV();
    void glEndVertexShaderEXT();
    void glEndVideoCaptureNV(uint video_capture_slot);
    void glEvalCoord1d(double u);
    void glEvalCoord1dv(double* u);
    void glEvalCoord1f(float u);
    void glEvalCoord1fv(float* u);
    void glEvalCoord1xOES(int u);
    void glEvalCoord1xvOES(int* coords);
    void glEvalCoord2d(double u, double v);
    void glEvalCoord2dv(double* u);
    void glEvalCoord2f(float u, float v);
    void glEvalCoord2fv(float* u);
    void glEvalCoord2xOES(int u, int v);
    void glEvalCoord2xvOES(int* coords);
    void glEvalMapsNV(uint target, uint mode);
    void glEvalMesh1(uint mode, int i1, int i2);
    void glEvalMesh2(uint mode, int i1, int i2, int j1, int j2);
    void glEvalPoint1(int i);
    void glEvalPoint2(int i, int j);
    void glEvaluateDepthValuesARB();
    void glExecuteProgramNV(uint target, uint id, float* parameters);
    void glExtGetBufferPointervQCOM(uint target, void** parameters);
    void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers);
    void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers);
    void glExtGetProgramBinarySourceQCOM(uint program, uint shadertype, byte* source, int* length);
    void glExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms);
    void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers);
    void glExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders);
    void glExtGetTexLevelParameterivQCOM(uint texture, uint face, int level, uint pname, int* parameters);
    void glExtGetTexSubImageQCOM(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* texels);
    void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures);
    byte glExtIsProgramBinaryQCOM(uint program);
    void glExtTexObjectStateOverrideiQCOM(uint target, uint pname, int param);
    void glExtractComponentEXT(uint res, uint src, uint num);
    void glFeedbackBuffer(int size, uint type, float* buffer);
    void glFeedbackBufferxOES(int n, uint type, int* buffer);
    nint glFenceSync(uint condition, uint flags);
    nint glFenceSyncAPPLE(uint condition, uint flags);
    void glFinalCombinerInputNV(uint variable, uint input, uint mapping, uint componentUsage);
    void glFinish();
    int glFinishAsyncSGIX(uint* markerp);
    void glFinishFenceAPPLE(uint fence);
    void glFinishFenceNV(uint fence);
    void glFinishObjectAPPLE(uint obj, int name);
    void glFinishTextureSUNX();
    void glFlush();
    void glFlushMappedBufferRange(uint target, nint offset, nint length);
    void glFlushMappedBufferRangeAPPLE(uint target, nint offset, nint size);
    void glFlushMappedBufferRangeEXT(uint target, nint offset, nint length);
    void glFlushMappedNamedBufferRange(uint buffer, nint offset, nint length);
    void glFlushMappedNamedBufferRangeEXT(uint buffer, nint offset, nint length);
    void glFlushPixelDataRangeNV(uint target);
    void glFlushRasterSGIX();
    void glFlushStaticDataIBM(uint target);
    void glFlushVertexArrayRangeAPPLE(int length, void* pointer);
    void glFlushVertexArrayRangeNV();
    void glFogCoordFormatNV(uint type, int stride);
    void glFogCoordPointer(uint type, int stride, void* pointer);
    void glFogCoordPointerEXT(uint type, int stride, void* pointer);
    void glFogCoordPointerListIBM(uint type, int stride, void** pointer, int ptrstride);
    void glFogCoordd(double coord);
    void glFogCoorddEXT(double coord);
    void glFogCoorddv(double* coord);
    void glFogCoorddvEXT(double* coord);
    void glFogCoordf(float coord);
    void glFogCoordfEXT(float coord);
    void glFogCoordfv(float* coord);
    void glFogCoordfvEXT(float* coord);
    void glFogCoordhNV(Half fog);
    void glFogCoordhvNV(Half* fog);
    void glFogFuncSGIS(int n, float* points);
    void glFogf(uint pname, float param);
    void glFogfv(uint pname, float* parameters);
    void glFogi(uint pname, int param);
    void glFogiv(uint pname, int* parameters);
    void glFogx(uint pname, int param);
    void glFogxOES(uint pname, int param);
    void glFogxv(uint pname, int* param);
    void glFogxvOES(uint pname, int* param);
    void glFragmentColorMaterialSGIX(uint face, uint mode);
    void glFragmentCoverageColorNV(uint color);
    void glFragmentLightModelfSGIX(uint pname, float param);
    void glFragmentLightModelfvSGIX(uint pname, float* parameters);
    void glFragmentLightModeliSGIX(uint pname, int param);
    void glFragmentLightModelivSGIX(uint pname, int* parameters);
    void glFragmentLightfSGIX(uint light, uint pname, float param);
    void glFragmentLightfvSGIX(uint light, uint pname, float* parameters);
    void glFragmentLightiSGIX(uint light, uint pname, int param);
    void glFragmentLightivSGIX(uint light, uint pname, int* parameters);
    void glFragmentMaterialfSGIX(uint face, uint pname, float param);
    void glFragmentMaterialfvSGIX(uint face, uint pname, float* parameters);
    void glFragmentMaterialiSGIX(uint face, uint pname, int param);
    void glFragmentMaterialivSGIX(uint face, uint pname, int* parameters);
    void glFrameTerminatorGREMEDY();
    void glFrameZoomSGIX(int factor);
    void glFramebufferDrawBufferEXT(uint framebuffer, uint mode);
    void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint* bufs);
    void glFramebufferFetchBarrierEXT();
    void glFramebufferFetchBarrierQCOM();
    void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures);
    void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
    void glFramebufferParameteri(uint target, uint pname, int param);
    void glFramebufferPixelLocalStorageSizeEXT(uint target, int size);
    void glFramebufferReadBufferEXT(uint framebuffer, uint mode);
    void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
    void glFramebufferRenderbufferEXT(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
    void glFramebufferRenderbufferOES(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
    void glFramebufferSampleLocationsfvARB(uint target, uint start, int count, float* v);
    void glFramebufferSampleLocationsfvNV(uint target, uint start, int count, float* v);
    void glFramebufferSamplePositionsfvAMD(uint target, uint numsamples, uint pixelindex, float* values);
    void glFramebufferTexture(uint target, uint attachment, uint texture, int level);
    void glFramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level);
    void glFramebufferTexture1DEXT(uint target, uint attachment, uint textarget, uint texture, int level);
    void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);
    void glFramebufferTexture2DEXT(uint target, uint attachment, uint textarget, uint texture, int level);
    void glFramebufferTexture2DDownsampleIMG(uint target, uint attachment, uint textarget, uint texture, int level, int xscale, int yscale);
    void glFramebufferTexture2DMultisampleEXT(uint target, uint attachment, uint textarget, uint texture, int level, int samples);
    void glFramebufferTexture2DMultisampleIMG(uint target, uint attachment, uint textarget, uint texture, int level, int samples);
    void glFramebufferTexture2DOES(uint target, uint attachment, uint textarget, uint texture, int level);
    void glFramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
    void glFramebufferTexture3DEXT(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
    void glFramebufferTexture3DOES(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
    void glFramebufferTextureARB(uint target, uint attachment, uint texture, int level);
    void glFramebufferTextureEXT(uint target, uint attachment, uint texture, int level);
    void glFramebufferTextureFaceARB(uint target, uint attachment, uint texture, int level, uint face);
    void glFramebufferTextureFaceEXT(uint target, uint attachment, uint texture, int level, uint face);
    void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer);
    void glFramebufferTextureLayerARB(uint target, uint attachment, uint texture, int level, int layer);
    void glFramebufferTextureLayerEXT(uint target, uint attachment, uint texture, int level, int layer);
    void glFramebufferTextureLayerDownsampleIMG(uint target, uint attachment, uint texture, int level, int layer, int xscale, int yscale);
    void glFramebufferTextureMultisampleMultiviewOVR(uint target, uint attachment, uint texture, int level, int samples, int baseViewIndex, int numViews);
    void glFramebufferTextureMultiviewOVR(uint target, uint attachment, uint texture, int level, int baseViewIndex, int numViews);
    void glFramebufferTextureOES(uint target, uint attachment, uint texture, int level);
    void glFreeObjectBufferATI(uint buffer);
    void glFrontFace(uint mode);
    void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);
    void glFrustumf(float l, float r, float b, float t, float n, float f);
    void glFrustumfOES(float l, float r, float b, float t, float n, float f);
    void glFrustumx(int l, int r, int b, int t, int n, int f);
    void glFrustumxOES(int l, int r, int b, int t, int n, int f);
    uint glGenAsyncMarkersSGIX(int range);
    void glGenBuffers(int n, uint* buffers);
    void glGenBuffersARB(int n, uint* buffers);
    void glGenFencesAPPLE(int n, uint* fences);
    void glGenFencesNV(int n, uint* fences);
    uint glGenFragmentShadersATI(uint range);
    void glGenFramebuffers(int n, uint* framebuffers);
    void glGenFramebuffersEXT(int n, uint* framebuffers);
    void glGenFramebuffersOES(int n, uint* framebuffers);
    uint glGenLists(int range);
    void glGenNamesAMD(uint identifier, uint num, uint* names);
    void glGenOcclusionQueriesNV(int n, uint* ids);
    uint glGenPathsNV(int range);
    void glGenPerfMonitorsAMD(int n, uint* monitors);
    void glGenProgramPipelines(int n, uint* pipelines);
    void glGenProgramPipelinesEXT(int n, uint* pipelines);
    void glGenProgramsARB(int n, uint* programs);
    void glGenProgramsNV(int n, uint* programs);
    void glGenQueries(int n, uint* ids);
    void glGenQueriesARB(int n, uint* ids);
    void glGenQueriesEXT(int n, uint* ids);
    void glGenQueryResourceTagNV(int n, int* tagIds);
    void glGenRenderbuffers(int n, uint* renderbuffers);
    void glGenRenderbuffersEXT(int n, uint* renderbuffers);
    void glGenRenderbuffersOES(int n, uint* renderbuffers);
    void glGenSamplers(int count, uint* samplers);
    void glGenSemaphoresEXT(int n, uint* semaphores);
    uint glGenSymbolsEXT(uint datatype, uint storagetype, uint range, uint components);
    void glGenTextures(int n, uint* textures);
    void glGenTexturesEXT(int n, uint* textures);
    void glGenTransformFeedbacks(int n, uint* ids);
    void glGenTransformFeedbacksNV(int n, uint* ids);
    void glGenVertexArrays(int n, uint* arrays);
    void glGenVertexArraysAPPLE(int n, uint* arrays);
    void glGenVertexArraysOES(int n, uint* arrays);
    uint glGenVertexShadersEXT(uint range);
    void glGenerateMipmap(uint target);
    void glGenerateMipmapEXT(uint target);
    void glGenerateMipmapOES(uint target);
    void glGenerateMultiTexMipmapEXT(uint texunit, uint target);
    void glGenerateTextureMipmap(uint texture);
    void glGenerateTextureMipmapEXT(uint texture, uint target);
    void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int* parameters);
    void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);
    void glGetActiveAttribARB(nint programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name);
    void glGetActiveSubroutineName(uint program, uint shadertype, uint index, int bufSize, int* length, byte* name);
    void glGetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufSize, int* length, byte* name);
    void glGetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, int* values);
    void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);
    void glGetActiveUniformARB(nint programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name);
    void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName);
    void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int* parameters);
    void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, byte* uniformName);
    void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, uint pname, int* parameters);
    void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);
    void glGetArrayObjectfvATI(uint array, uint pname, float* parameters);
    void glGetArrayObjectivATI(uint array, uint pname, int* parameters);
    void glGetAttachedObjectsARB(nint containerObj, int maxCount, int* count, nint* obj);
    void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders);
    int glGetAttribLocation(uint program, byte* name);
    int glGetAttribLocationARB(nint programObj, byte* name);
    void glGetBooleanIndexedvEXT(uint target, uint index, byte* data);
    void glGetBooleani_v(uint target, uint index, byte* data);
    void glGetBooleanv(uint pname, byte* data);
    void glGetBufferParameteri64v(uint target, uint pname, long* parameters);
    void glGetBufferParameteriv(uint target, uint pname, int* parameters);
    void glGetBufferParameterivARB(uint target, uint pname, int* parameters);
    void glGetBufferParameterui64vNV(uint target, uint pname, ulong* parameters);
    void glGetBufferPointerv(uint target, uint pname, void** parameters);
    void glGetBufferPointervARB(uint target, uint pname, void** parameters);
    void glGetBufferPointervOES(uint target, uint pname, void** parameters);
    void glGetBufferSubData(uint target, nint offset, nint size, void* data);
    void glGetBufferSubDataARB(uint target, nint offset, nint size, void* data);
    void glGetClipPlane(uint plane, double* equation);
    void glGetClipPlanef(uint plane, float* equation);
    void glGetClipPlanefOES(uint plane, float* equation);
    void glGetClipPlanex(uint plane, int* equation);
    void glGetClipPlanexOES(uint plane, int* equation);
    void glGetColorTable(uint target, uint format, uint type, void* table);
    void glGetColorTableEXT(uint target, uint format, uint type, void* data);
    void glGetColorTableParameterfv(uint target, uint pname, float* parameters);
    void glGetColorTableParameterfvEXT(uint target, uint pname, float* parameters);
    void glGetColorTableParameterfvSGI(uint target, uint pname, float* parameters);
    void glGetColorTableParameteriv(uint target, uint pname, int* parameters);
    void glGetColorTableParameterivEXT(uint target, uint pname, int* parameters);
    void glGetColorTableParameterivSGI(uint target, uint pname, int* parameters);
    void glGetColorTableSGI(uint target, uint format, uint type, void* table);
    void glGetCombinerInputParameterfvNV(uint stage, uint portion, uint variable, uint pname, float* parameters);
    void glGetCombinerInputParameterivNV(uint stage, uint portion, uint variable, uint pname, int* parameters);
    void glGetCombinerOutputParameterfvNV(uint stage, uint portion, uint pname, float* parameters);
    void glGetCombinerOutputParameterivNV(uint stage, uint portion, uint pname, int* parameters);
    void glGetCombinerStageParameterfvNV(uint stage, uint pname, float* parameters);
    uint glGetCommandHeaderNV(uint tokenID, uint size);
    void glGetCompressedMultiTexImageEXT(uint texunit, uint target, int lod, void* img);
    void glGetCompressedTexImage(uint target, int level, void* img);
    void glGetCompressedTexImageARB(uint target, int level, void* img);
    void glGetCompressedTextureImage(uint texture, int level, int bufSize, void* pixels);
    void glGetCompressedTextureImageEXT(uint texture, uint target, int lod, void* img);
    void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels);
    void glGetConvolutionFilter(uint target, uint format, uint type, void* image);
    void glGetConvolutionFilterEXT(uint target, uint format, uint type, void* image);
    void glGetConvolutionParameterfv(uint target, uint pname, float* parameters);
    void glGetConvolutionParameterfvEXT(uint target, uint pname, float* parameters);
    void glGetConvolutionParameteriv(uint target, uint pname, int* parameters);
    void glGetConvolutionParameterivEXT(uint target, uint pname, int* parameters);
    void glGetConvolutionParameterxvOES(uint target, uint pname, int* parameters);
    void glGetCoverageModulationTableNV(int bufSize, float* v);
    uint glGetDebugMessageLog(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog);
    uint glGetDebugMessageLogAMD(uint count, int bufSize, uint* categories, uint* severities, uint* ids, int* lengths, byte* message);
    uint glGetDebugMessageLogARB(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog);
    uint glGetDebugMessageLogKHR(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog);
    void glGetDetailTexFuncSGIS(uint target, float* points);
    void glGetDoubleIndexedvEXT(uint target, uint index, double* data);
    void glGetDoublei_v(uint target, uint index, double* data);
    void glGetDoublei_vEXT(uint pname, uint index, double* parameters);
    void glGetDoublev(uint pname, double* data);
    void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, byte* driverControlString);
    void glGetDriverControlsQCOM(int* num, int size, uint* driverControls);
    uint glGetError();
    void glGetFenceivNV(uint fence, uint pname, int* parameters);
    void glGetFinalCombinerInputParameterfvNV(uint variable, uint pname, float* parameters);
    void glGetFinalCombinerInputParameterivNV(uint variable, uint pname, int* parameters);
    void glGetFirstPerfQueryIdINTEL(uint* queryId);
    void glGetFixedv(uint pname, int* parameters);
    void glGetFixedvOES(uint pname, int* parameters);
    void glGetFloatIndexedvEXT(uint target, uint index, float* data);
    void glGetFloati_v(uint target, uint index, float* data);
    void glGetFloati_vEXT(uint pname, uint index, float* parameters);
    void glGetFloati_vNV(uint target, uint index, float* data);
    void glGetFloati_vOES(uint target, uint index, float* data);
    void glGetFloatv(uint pname, float* data);
    void glGetFogFuncSGIS(float* points);
    int glGetFragDataIndex(uint program, byte* name);
    int glGetFragDataIndexEXT(uint program, byte* name);
    int glGetFragDataLocation(uint program, byte* name);
    int glGetFragDataLocationEXT(uint program, byte* name);
    void glGetFragmentLightfvSGIX(uint light, uint pname, float* parameters);
    void glGetFragmentLightivSGIX(uint light, uint pname, int* parameters);
    void glGetFragmentMaterialfvSGIX(uint face, uint pname, float* parameters);
    void glGetFragmentMaterialivSGIX(uint face, uint pname, int* parameters);
    void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, int* parameters);
    void glGetFramebufferAttachmentParameterivEXT(uint target, uint attachment, uint pname, int* parameters);
    void glGetFramebufferAttachmentParameterivOES(uint target, uint attachment, uint pname, int* parameters);
    void glGetFramebufferParameterfvAMD(uint target, uint pname, uint numsamples, uint pixelindex, int size, float* values);
    void glGetFramebufferParameteriv(uint target, uint pname, int* parameters);
    void glGetFramebufferParameterivEXT(uint framebuffer, uint pname, int* parameters);
    int glGetFramebufferPixelLocalStorageSizeEXT(uint target);
    uint glGetGraphicsResetStatus();
    uint glGetGraphicsResetStatusARB();
    uint glGetGraphicsResetStatusEXT();
    uint glGetGraphicsResetStatusKHR();
    nint glGetHandleARB(uint pname);
    void glGetHistogram(uint target, byte reset, uint format, uint type, void* values);
    void glGetHistogramEXT(uint target, byte reset, uint format, uint type, void* values);
    void glGetHistogramParameterfv(uint target, uint pname, float* parameters);
    void glGetHistogramParameterfvEXT(uint target, uint pname, float* parameters);
    void glGetHistogramParameteriv(uint target, uint pname, int* parameters);
    void glGetHistogramParameterivEXT(uint target, uint pname, int* parameters);
    void glGetHistogramParameterxvOES(uint target, uint pname, int* parameters);
    ulong glGetImageHandleARB(uint texture, int level, byte layered, int layer, uint format);
    ulong glGetImageHandleNV(uint texture, int level, byte layered, int layer, uint format);
    void glGetImageTransformParameterfvHP(uint target, uint pname, float* parameters);
    void glGetImageTransformParameterivHP(uint target, uint pname, int* parameters);
    void glGetInfoLogARB(nint obj, int maxLength, int* length, byte* infoLog);
    int glGetInstrumentsSGIX();
    void glGetInteger64i_v(uint target, uint index, long* data);
    void glGetInteger64v(uint pname, long* data);
    void glGetInteger64vAPPLE(uint pname, long* parameters);
    void glGetInteger64vEXT(uint pname, long* data);
    void glGetIntegerIndexedvEXT(uint target, uint index, int* data);
    void glGetIntegeri_v(uint target, uint index, int* data);
    void glGetIntegeri_vEXT(uint target, uint index, int* data);
    void glGetIntegerui64i_vNV(uint value, uint index, ulong* result);
    void glGetIntegerui64vNV(uint value, ulong* result);
    void glGetIntegerv(uint pname, int* data);
    void glGetInternalformatSampleivNV(uint target, uint internalformat, int samples, uint pname, int count, int* parameters);
    void glGetInternalformati64v(uint target, uint internalformat, uint pname, int count, long* parameters);
    void glGetInternalformativ(uint target, uint internalformat, uint pname, int count, int* parameters);
    void glGetInvariantBooleanvEXT(uint id, uint value, byte* data);
    void glGetInvariantFloatvEXT(uint id, uint value, float* data);
    void glGetInvariantIntegervEXT(uint id, uint value, int* data);
    void glGetLightfv(uint light, uint pname, float* parameters);
    void glGetLightiv(uint light, uint pname, int* parameters);
    void glGetLightxOES(uint light, uint pname, int* parameters);
    void glGetLightxv(uint light, uint pname, int* parameters);
    void glGetLightxvOES(uint light, uint pname, int* parameters);
    void glGetListParameterfvSGIX(uint list, uint pname, float* parameters);
    void glGetListParameterivSGIX(uint list, uint pname, int* parameters);
    void glGetLocalConstantBooleanvEXT(uint id, uint value, byte* data);
    void glGetLocalConstantFloatvEXT(uint id, uint value, float* data);
    void glGetLocalConstantIntegervEXT(uint id, uint value, int* data);
    void glGetMapAttribParameterfvNV(uint target, uint index, uint pname, float* parameters);
    void glGetMapAttribParameterivNV(uint target, uint index, uint pname, int* parameters);
    void glGetMapControlPointsNV(uint target, uint index, uint type, int ustride, int vstride, byte packed, void* points);
    void glGetMapParameterfvNV(uint target, uint pname, float* parameters);
    void glGetMapParameterivNV(uint target, uint pname, int* parameters);
    void glGetMapdv(uint target, uint query, double* v);
    void glGetMapfv(uint target, uint query, float* v);
    void glGetMapiv(uint target, uint query, int* v);
    void glGetMapxvOES(uint target, uint query, int* v);
    void glGetMaterialfv(uint face, uint pname, float* parameters);
    void glGetMaterialiv(uint face, uint pname, int* parameters);
    void glGetMaterialxOES(uint face, uint pname, int param);
    void glGetMaterialxv(uint face, uint pname, int* parameters);
    void glGetMaterialxvOES(uint face, uint pname, int* parameters);
    void glGetMemoryObjectDetachedResourcesuivNV(uint memory, uint pname, int first, int count, uint* parameters);
    void glGetMemoryObjectParameterivEXT(uint memoryObject, uint pname, int* parameters);
    void glGetMinmax(uint target, byte reset, uint format, uint type, void* values);
    void glGetMinmaxEXT(uint target, byte reset, uint format, uint type, void* values);
    void glGetMinmaxParameterfv(uint target, uint pname, float* parameters);
    void glGetMinmaxParameterfvEXT(uint target, uint pname, float* parameters);
    void glGetMinmaxParameteriv(uint target, uint pname, int* parameters);
    void glGetMinmaxParameterivEXT(uint target, uint pname, int* parameters);
    void glGetMultiTexEnvfvEXT(uint texunit, uint target, uint pname, float* parameters);
    void glGetMultiTexEnvivEXT(uint texunit, uint target, uint pname, int* parameters);
    void glGetMultiTexGendvEXT(uint texunit, uint coord, uint pname, double* parameters);
    void glGetMultiTexGenfvEXT(uint texunit, uint coord, uint pname, float* parameters);
    void glGetMultiTexGenivEXT(uint texunit, uint coord, uint pname, int* parameters);
    void glGetMultiTexImageEXT(uint texunit, uint target, int level, uint format, uint type, void* pixels);
    void glGetMultiTexLevelParameterfvEXT(uint texunit, uint target, int level, uint pname, float* parameters);
    void glGetMultiTexLevelParameterivEXT(uint texunit, uint target, int level, uint pname, int* parameters);
    void glGetMultiTexParameterIivEXT(uint texunit, uint target, uint pname, int* parameters);
    void glGetMultiTexParameterIuivEXT(uint texunit, uint target, uint pname, uint* parameters);
    void glGetMultiTexParameterfvEXT(uint texunit, uint target, uint pname, float* parameters);
    void glGetMultiTexParameterivEXT(uint texunit, uint target, uint pname, int* parameters);
    void glGetMultisamplefv(uint pname, uint index, float* val);
    void glGetMultisamplefvNV(uint pname, uint index, float* val);
    void glGetNamedBufferParameteri64v(uint buffer, uint pname, long* parameters);
    void glGetNamedBufferParameteriv(uint buffer, uint pname, int* parameters);
    void glGetNamedBufferParameterivEXT(uint buffer, uint pname, int* parameters);
    void glGetNamedBufferParameterui64vNV(uint buffer, uint pname, ulong* parameters);
    void glGetNamedBufferPointerv(uint buffer, uint pname, void** parameters);
    void glGetNamedBufferPointervEXT(uint buffer, uint pname, void** parameters);
    void glGetNamedBufferSubData(uint buffer, nint offset, nint size, void* data);
    void glGetNamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data);
    void glGetNamedFramebufferParameterfvAMD(uint framebuffer, uint pname, uint numsamples, uint pixelindex, int size, float* values);
    void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, uint attachment, uint pname, int* parameters);
    void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, uint attachment, uint pname, int* parameters);
    void glGetNamedFramebufferParameteriv(uint framebuffer, uint pname, int* param);
    void glGetNamedFramebufferParameterivEXT(uint framebuffer, uint pname, int* parameters);
    void glGetNamedProgramLocalParameterIivEXT(uint program, uint target, uint index, int* parameters);
    void glGetNamedProgramLocalParameterIuivEXT(uint program, uint target, uint index, uint* parameters);
    void glGetNamedProgramLocalParameterdvEXT(uint program, uint target, uint index, double* parameters);
    void glGetNamedProgramLocalParameterfvEXT(uint program, uint target, uint index, float* parameters);
    void glGetNamedProgramStringEXT(uint program, uint target, uint pname, void* str);
    void glGetNamedProgramivEXT(uint program, uint target, uint pname, int* parameters);
    void glGetNamedRenderbufferParameteriv(uint renderbuffer, uint pname, int* parameters);
    void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, uint pname, int* parameters);
    void glGetNamedStringARB(int namelen, byte* name, int bufSize, int* stringlen, byte* str);
    void glGetNamedStringivARB(int namelen, byte* name, uint pname, int* parameters);
    void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId);
    void glGetObjectBufferfvATI(uint buffer, uint pname, float* parameters);
    void glGetObjectBufferivATI(uint buffer, uint pname, int* parameters);
    void glGetObjectLabel(uint identifier, uint name, int bufSize, int* length, byte* label);
    void glGetObjectLabelEXT(uint type, uint obj, int bufSize, int* length, byte* label);
    void glGetObjectLabelKHR(uint identifier, uint name, int bufSize, int* length, byte* label);
    void glGetObjectParameterfvARB(nint obj, uint pname, float* parameters);
    void glGetObjectParameterivAPPLE(uint objectType, uint name, uint pname, int* parameters);
    void glGetObjectParameterivARB(nint obj, uint pname, int* parameters);
    void glGetObjectPtrLabel(void* ptr, int bufSize, int* length, byte* label);
    void glGetObjectPtrLabelKHR(void* ptr, int bufSize, int* length, byte* label);
    void glGetOcclusionQueryivNV(uint id, uint pname, int* parameters);
    void glGetOcclusionQueryuivNV(uint id, uint pname, uint* parameters);
    void glGetPathColorGenfvNV(uint color, uint pname, float* value);
    void glGetPathColorGenivNV(uint color, uint pname, int* value);
    void glGetPathCommandsNV(uint path, byte* commands);
    void glGetPathCoordsNV(uint path, float* coords);
    void glGetPathDashArrayNV(uint path, float* dashArray);
    float glGetPathLengthNV(uint path, int startSegment, int numSegments);
    void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics);
    void glGetPathMetricsNV(uint metricQueryMask, int numPaths, uint pathNameType, void* paths, uint pathBase, int stride, float* metrics);
    void glGetPathParameterfvNV(uint path, uint pname, float* value);
    void glGetPathParameterivNV(uint path, uint pname, int* value);
    void glGetPathSpacingNV(uint pathListMode, int numPaths, uint pathNameType, void* paths, uint pathBase, float advanceScale, float kerningScale, uint transformType, float* returnedSpacing);
    void glGetPathTexGenfvNV(uint texCoordSet, uint pname, float* value);
    void glGetPathTexGenivNV(uint texCoordSet, uint pname, int* value);
    void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue);
    void glGetPerfMonitorCounterDataAMD(uint monitor, uint pname, int dataSize, uint* data, int* bytesWritten);
    void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, uint pname, void* data);
    void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, byte* counterString);
    void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters);
    void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, byte* groupString);
    void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups);
    void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, void* data, uint* bytesWritten);
    void glGetPerfQueryIdByNameINTEL(byte* queryName, uint* queryId);
    void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask);
    void glGetPixelMapfv(uint map, float* values);
    void glGetPixelMapuiv(uint map, uint* values);
    void glGetPixelMapusv(uint map, ushort* values);
    void glGetPixelMapxv(uint map, int size, int* values);
    void glGetPixelTexGenParameterfvSGIS(uint pname, float* parameters);
    void glGetPixelTexGenParameterivSGIS(uint pname, int* parameters);
    void glGetPixelTransformParameterfvEXT(uint target, uint pname, float* parameters);
    void glGetPixelTransformParameterivEXT(uint target, uint pname, int* parameters);
    void glGetPointerIndexedvEXT(uint target, uint index, void** data);
    void glGetPointeri_vEXT(uint pname, uint index, void** parameters);
    void glGetPointerv(uint pname, void** parameters);
    void glGetPointervEXT(uint pname, void** parameters);
    void glGetPointervKHR(uint pname, void** parameters);
    void glGetPolygonStipple(byte* mask);
    void glGetProgramBinary(uint program, int bufSize, int* length, uint* binaryFormat, void* binary);
    void glGetProgramBinaryOES(uint program, int bufSize, int* length, uint* binaryFormat, void* binary);
    void glGetProgramEnvParameterIivNV(uint target, uint index, int* parameters);
    void glGetProgramEnvParameterIuivNV(uint target, uint index, uint* parameters);
    void glGetProgramEnvParameterdvARB(uint target, uint index, double* parameters);
    void glGetProgramEnvParameterfvARB(uint target, uint index, float* parameters);
    void glGetProgramInfoLog(uint program, int bufSize, int* length, byte* infoLog);
    void glGetProgramInterfaceiv(uint program, uint programInterface, uint pname, int* parameters);
    void glGetProgramLocalParameterIivNV(uint target, uint index, int* parameters);
    void glGetProgramLocalParameterIuivNV(uint target, uint index, uint* parameters);
    void glGetProgramLocalParameterdvARB(uint target, uint index, double* parameters);
    void glGetProgramLocalParameterfvARB(uint target, uint index, float* parameters);
    void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double* parameters);
    void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float* parameters);
    void glGetProgramParameterdvNV(uint target, uint index, uint pname, double* parameters);
    void glGetProgramParameterfvNV(uint target, uint index, uint pname, float* parameters);
    void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, byte* infoLog);
    void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, int* length, byte* infoLog);
    void glGetProgramPipelineiv(uint pipeline, uint pname, int* parameters);
    void glGetProgramPipelineivEXT(uint pipeline, uint pname, int* parameters);
    uint glGetProgramResourceIndex(uint program, uint programInterface, byte* name);
    int glGetProgramResourceLocation(uint program, uint programInterface, byte* name);
    int glGetProgramResourceLocationIndex(uint program, uint programInterface, byte* name);
    int glGetProgramResourceLocationIndexEXT(uint program, uint programInterface, byte* name);
    void glGetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, int* length, byte* name);
    void glGetProgramResourcefvNV(uint program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, float* parameters);
    void glGetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, int* parameters);
    void glGetProgramStageiv(uint program, uint shadertype, uint pname, int* values);
    void glGetProgramStringARB(uint target, uint pname, void* str);
    void glGetProgramStringNV(uint id, uint pname, byte* program);
    void glGetProgramSubroutineParameteruivNV(uint target, uint index, uint* param);
    void glGetProgramiv(uint program, uint pname, int* parameters);
    void glGetProgramivARB(uint target, uint pname, int* parameters);
    void glGetProgramivNV(uint id, uint pname, int* parameters);
    void glGetQueryBufferObjecti64v(uint id, uint buffer, uint pname, nint offset);
    void glGetQueryBufferObjectiv(uint id, uint buffer, uint pname, nint offset);
    void glGetQueryBufferObjectui64v(uint id, uint buffer, uint pname, nint offset);
    void glGetQueryBufferObjectuiv(uint id, uint buffer, uint pname, nint offset);
    void glGetQueryIndexediv(uint target, uint index, uint pname, int* parameters);
    void glGetQueryObjecti64v(uint id, uint pname, long* parameters);
    void glGetQueryObjecti64vEXT(uint id, uint pname, long* parameters);
    void glGetQueryObjectiv(uint id, uint pname, int* parameters);
    void glGetQueryObjectivARB(uint id, uint pname, int* parameters);
    void glGetQueryObjectivEXT(uint id, uint pname, int* parameters);
    void glGetQueryObjectui64v(uint id, uint pname, ulong* parameters);
    void glGetQueryObjectui64vEXT(uint id, uint pname, ulong* parameters);
    void glGetQueryObjectuiv(uint id, uint pname, uint* parameters);
    void glGetQueryObjectuivARB(uint id, uint pname, uint* parameters);
    void glGetQueryObjectuivEXT(uint id, uint pname, uint* parameters);
    void glGetQueryiv(uint target, uint pname, int* parameters);
    void glGetQueryivARB(uint target, uint pname, int* parameters);
    void glGetQueryivEXT(uint target, uint pname, int* parameters);
    void glGetRenderbufferParameteriv(uint target, uint pname, int* parameters);
    void glGetRenderbufferParameterivEXT(uint target, uint pname, int* parameters);
    void glGetRenderbufferParameterivOES(uint target, uint pname, int* parameters);
    void glGetSamplerParameterIiv(uint sampler, uint pname, int* parameters);
    void glGetSamplerParameterIivEXT(uint sampler, uint pname, int* parameters);
    void glGetSamplerParameterIivOES(uint sampler, uint pname, int* parameters);
    void glGetSamplerParameterIuiv(uint sampler, uint pname, uint* parameters);
    void glGetSamplerParameterIuivEXT(uint sampler, uint pname, uint* parameters);
    void glGetSamplerParameterIuivOES(uint sampler, uint pname, uint* parameters);
    void glGetSamplerParameterfv(uint sampler, uint pname, float* parameters);
    void glGetSamplerParameteriv(uint sampler, uint pname, int* parameters);
    void glGetSemaphoreParameterivNV(uint semaphore, uint pname, int* parameters);
    void glGetSemaphoreParameterui64vEXT(uint semaphore, uint pname, ulong* parameters);
    void glGetSeparableFilter(uint target, uint format, uint type, void* row, void* column, void* span);
    void glGetSeparableFilterEXT(uint target, uint format, uint type, void* row, void* column, void* span);
    void glGetShaderInfoLog(uint shader, int bufSize, int* length, byte* infoLog);
    void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, int* range, int* precision);
    void glGetShaderSource(uint shader, int bufSize, int* length, byte* source);
    void glGetShaderSourceARB(nint obj, int maxLength, int* length, byte* source);
    void glGetShaderiv(uint shader, uint pname, int* parameters);
    void glGetShadingRateImagePaletteNV(uint viewport, uint entry, uint* rate);
    void glGetShadingRateSampleLocationivNV(uint rate, uint samples, uint index, int* location);
    void glGetSharpenTexFuncSGIS(uint target, float* points);
    ushort glGetStageIndexNV(uint shadertype);
    byte* glGetString(uint name);
    byte* glGetStringi(uint name, uint index);
    uint glGetSubroutineIndex(uint program, uint shadertype, byte* name);
    int glGetSubroutineUniformLocation(uint program, uint shadertype, byte* name);
    void glGetSynciv(nint sync, uint pname, int count, int* length, int* values);
    void glGetSyncivAPPLE(nint sync, uint pname, int count, int* length, int* values);
    void glGetTexBumpParameterfvATI(uint pname, float* param);
    void glGetTexBumpParameterivATI(uint pname, int* param);
    void glGetTexEnvfv(uint target, uint pname, float* parameters);
    void glGetTexEnviv(uint target, uint pname, int* parameters);
    void glGetTexEnvxv(uint target, uint pname, int* parameters);
    void glGetTexEnvxvOES(uint target, uint pname, int* parameters);
    void glGetTexFilterFuncSGIS(uint target, uint filter, float* weights);
    void glGetTexGendv(uint coord, uint pname, double* parameters);
    void glGetTexGenfv(uint coord, uint pname, float* parameters);
    void glGetTexGenfvOES(uint coord, uint pname, float* parameters);
    void glGetTexGeniv(uint coord, uint pname, int* parameters);
    void glGetTexGenivOES(uint coord, uint pname, int* parameters);
    void glGetTexGenxvOES(uint coord, uint pname, int* parameters);
    void glGetTexImage(uint target, int level, uint format, uint type, void* pixels);
    void glGetTexLevelParameterfv(uint target, int level, uint pname, float* parameters);
    void glGetTexLevelParameteriv(uint target, int level, uint pname, int* parameters);
    void glGetTexLevelParameterxvOES(uint target, int level, uint pname, int* parameters);
    void glGetTexParameterIiv(uint target, uint pname, int* parameters);
    void glGetTexParameterIivEXT(uint target, uint pname, int* parameters);
    void glGetTexParameterIivOES(uint target, uint pname, int* parameters);
    void glGetTexParameterIuiv(uint target, uint pname, uint* parameters);
    void glGetTexParameterIuivEXT(uint target, uint pname, uint* parameters);
    void glGetTexParameterIuivOES(uint target, uint pname, uint* parameters);
    void glGetTexParameterPointervAPPLE(uint target, uint pname, void** parameters);
    void glGetTexParameterfv(uint target, uint pname, float* parameters);
    void glGetTexParameteriv(uint target, uint pname, int* parameters);
    void glGetTexParameterxv(uint target, uint pname, int* parameters);
    void glGetTexParameterxvOES(uint target, uint pname, int* parameters);
    ulong glGetTextureHandleARB(uint texture);
    ulong glGetTextureHandleIMG(uint texture);
    ulong glGetTextureHandleNV(uint texture);
    void glGetTextureImage(uint texture, int level, uint format, uint type, int bufSize, void* pixels);
    void glGetTextureImageEXT(uint texture, uint target, int level, uint format, uint type, void* pixels);
    void glGetTextureLevelParameterfv(uint texture, int level, uint pname, float* parameters);
    void glGetTextureLevelParameterfvEXT(uint texture, uint target, int level, uint pname, float* parameters);
    void glGetTextureLevelParameteriv(uint texture, int level, uint pname, int* parameters);
    void glGetTextureLevelParameterivEXT(uint texture, uint target, int level, uint pname, int* parameters);
    void glGetTextureParameterIiv(uint texture, uint pname, int* parameters);
    void glGetTextureParameterIivEXT(uint texture, uint target, uint pname, int* parameters);
    void glGetTextureParameterIuiv(uint texture, uint pname, uint* parameters);
    void glGetTextureParameterIuivEXT(uint texture, uint target, uint pname, uint* parameters);
    void glGetTextureParameterfv(uint texture, uint pname, float* parameters);
    void glGetTextureParameterfvEXT(uint texture, uint target, uint pname, float* parameters);
    void glGetTextureParameteriv(uint texture, uint pname, int* parameters);
    void glGetTextureParameterivEXT(uint texture, uint target, uint pname, int* parameters);
    ulong glGetTextureSamplerHandleARB(uint texture, uint sampler);
    ulong glGetTextureSamplerHandleIMG(uint texture, uint sampler);
    ulong glGetTextureSamplerHandleNV(uint texture, uint sampler);
    void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, int bufSize, void* pixels);
    void glGetTrackMatrixivNV(uint target, uint address, uint pname, int* parameters);
    void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);
    void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);
    void glGetTransformFeedbackVaryingNV(uint program, uint index, int* location);
    void glGetTransformFeedbacki64_v(uint xfb, uint pname, uint index, long* param);
    void glGetTransformFeedbacki_v(uint xfb, uint pname, uint index, int* param);
    void glGetTransformFeedbackiv(uint xfb, uint pname, int* param);
    void glGetTranslatedShaderSourceANGLE(uint shader, int bufSize, int* length, byte* source);
    uint glGetUniformBlockIndex(uint program, byte* uniformBlockName);
    int glGetUniformBufferSizeEXT(uint program, int location);
    void glGetUniformIndices(uint program, int uniformCount, byte** uniformNames, uint* uniformIndices);
    int glGetUniformLocation(uint program, byte* name);
    int glGetUniformLocationARB(nint programObj, byte* name);
    nint glGetUniformOffsetEXT(uint program, int location);
    void glGetUniformSubroutineuiv(uint shadertype, int location, uint* parameters);
    void glGetUniformdv(uint program, int location, double* parameters);
    void glGetUniformfv(uint program, int location, float* parameters);
    void glGetUniformfvARB(nint programObj, int location, float* parameters);
    void glGetUniformi64vARB(uint program, int location, long* parameters);
    void glGetUniformi64vNV(uint program, int location, long* parameters);
    void glGetUniformiv(uint program, int location, int* parameters);
    void glGetUniformivARB(nint programObj, int location, int* parameters);
    void glGetUniformui64vARB(uint program, int location, ulong* parameters);
    void glGetUniformui64vNV(uint program, int location, ulong* parameters);
    void glGetUniformuiv(uint program, int location, uint* parameters);
    void glGetUniformuivEXT(uint program, int location, uint* parameters);
    void glGetUnsignedBytevEXT(uint pname, byte* data);
    void glGetUnsignedBytei_vEXT(uint target, uint index, byte* data);
    void glGetVariantArrayObjectfvATI(uint id, uint pname, float* parameters);
    void glGetVariantArrayObjectivATI(uint id, uint pname, int* parameters);
    void glGetVariantBooleanvEXT(uint id, uint value, byte* data);
    void glGetVariantFloatvEXT(uint id, uint value, float* data);
    void glGetVariantIntegervEXT(uint id, uint value, int* data);
    void glGetVariantPointervEXT(uint id, uint value, void** data);
    int glGetVaryingLocationNV(uint program, byte* name);
    void glGetVertexArrayIndexed64iv(uint vaobj, uint index, uint pname, long* param);
    void glGetVertexArrayIndexediv(uint vaobj, uint index, uint pname, int* param);
    void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, uint pname, int* param);
    void glGetVertexArrayIntegervEXT(uint vaobj, uint pname, int* param);
    void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, uint pname, void** param);
    void glGetVertexArrayPointervEXT(uint vaobj, uint pname, void** param);
    void glGetVertexArrayiv(uint vaobj, uint pname, int* param);
    void glGetVertexAttribArrayObjectfvATI(uint index, uint pname, float* parameters);
    void glGetVertexAttribArrayObjectivATI(uint index, uint pname, int* parameters);
    void glGetVertexAttribIiv(uint index, uint pname, int* parameters);
    void glGetVertexAttribIivEXT(uint index, uint pname, int* parameters);
    void glGetVertexAttribIuiv(uint index, uint pname, uint* parameters);
    void glGetVertexAttribIuivEXT(uint index, uint pname, uint* parameters);
    void glGetVertexAttribLdv(uint index, uint pname, double* parameters);
    void glGetVertexAttribLdvEXT(uint index, uint pname, double* parameters);
    void glGetVertexAttribLi64vNV(uint index, uint pname, long* parameters);
    void glGetVertexAttribLui64vARB(uint index, uint pname, ulong* parameters);
    void glGetVertexAttribLui64vNV(uint index, uint pname, ulong* parameters);
    void glGetVertexAttribPointerv(uint index, uint pname, void** pointer);
    void glGetVertexAttribPointervARB(uint index, uint pname, void** pointer);
    void glGetVertexAttribPointervNV(uint index, uint pname, void** pointer);
    void glGetVertexAttribdv(uint index, uint pname, double* parameters);
    void glGetVertexAttribdvARB(uint index, uint pname, double* parameters);
    void glGetVertexAttribdvNV(uint index, uint pname, double* parameters);
    void glGetVertexAttribfv(uint index, uint pname, float* parameters);
    void glGetVertexAttribfvARB(uint index, uint pname, float* parameters);
    void glGetVertexAttribfvNV(uint index, uint pname, float* parameters);
    void glGetVertexAttribiv(uint index, uint pname, int* parameters);
    void glGetVertexAttribivARB(uint index, uint pname, int* parameters);
    void glGetVertexAttribivNV(uint index, uint pname, int* parameters);
    void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, uint pname, double* parameters);
    void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, uint pname, float* parameters);
    void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, uint pname, int* parameters);
    void glGetVideoCaptureivNV(uint video_capture_slot, uint pname, int* parameters);
    void glGetVideoi64vNV(uint video_slot, uint pname, long* parameters);
    void glGetVideoivNV(uint video_slot, uint pname, int* parameters);
    void glGetVideoui64vNV(uint video_slot, uint pname, ulong* parameters);
    void glGetVideouivNV(uint video_slot, uint pname, uint* parameters);
    void glGetnColorTable(uint target, uint format, uint type, int bufSize, void* table);
    void glGetnColorTableARB(uint target, uint format, uint type, int bufSize, void* table);
    void glGetnCompressedTexImage(uint target, int lod, int bufSize, void* pixels);
    void glGetnCompressedTexImageARB(uint target, int lod, int bufSize, void* img);
    void glGetnConvolutionFilter(uint target, uint format, uint type, int bufSize, void* image);
    void glGetnConvolutionFilterARB(uint target, uint format, uint type, int bufSize, void* image);
    void glGetnHistogram(uint target, byte reset, uint format, uint type, int bufSize, void* values);
    void glGetnHistogramARB(uint target, byte reset, uint format, uint type, int bufSize, void* values);
    void glGetnMapdv(uint target, uint query, int bufSize, double* v);
    void glGetnMapdvARB(uint target, uint query, int bufSize, double* v);
    void glGetnMapfv(uint target, uint query, int bufSize, float* v);
    void glGetnMapfvARB(uint target, uint query, int bufSize, float* v);
    void glGetnMapiv(uint target, uint query, int bufSize, int* v);
    void glGetnMapivARB(uint target, uint query, int bufSize, int* v);
    void glGetnMinmax(uint target, byte reset, uint format, uint type, int bufSize, void* values);
    void glGetnMinmaxARB(uint target, byte reset, uint format, uint type, int bufSize, void* values);
    void glGetnPixelMapfv(uint map, int bufSize, float* values);
    void glGetnPixelMapfvARB(uint map, int bufSize, float* values);
    void glGetnPixelMapuiv(uint map, int bufSize, uint* values);
    void glGetnPixelMapuivARB(uint map, int bufSize, uint* values);
    void glGetnPixelMapusv(uint map, int bufSize, ushort* values);
    void glGetnPixelMapusvARB(uint map, int bufSize, ushort* values);
    void glGetnPolygonStipple(int bufSize, byte* pattern);
    void glGetnPolygonStippleARB(int bufSize, byte* pattern);
    void glGetnSeparableFilter(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span);
    void glGetnSeparableFilterARB(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span);
    void glGetnTexImage(uint target, int level, uint format, uint type, int bufSize, void* pixels);
    void glGetnTexImageARB(uint target, int level, uint format, uint type, int bufSize, void* img);
    void glGetnUniformdv(uint program, int location, int bufSize, double* parameters);
    void glGetnUniformdvARB(uint program, int location, int bufSize, double* parameters);
    void glGetnUniformfv(uint program, int location, int bufSize, float* parameters);
    void glGetnUniformfvARB(uint program, int location, int bufSize, float* parameters);
    void glGetnUniformfvEXT(uint program, int location, int bufSize, float* parameters);
    void glGetnUniformfvKHR(uint program, int location, int bufSize, float* parameters);
    void glGetnUniformi64vARB(uint program, int location, int bufSize, long* parameters);
    void glGetnUniformiv(uint program, int location, int bufSize, int* parameters);
    void glGetnUniformivARB(uint program, int location, int bufSize, int* parameters);
    void glGetnUniformivEXT(uint program, int location, int bufSize, int* parameters);
    void glGetnUniformivKHR(uint program, int location, int bufSize, int* parameters);
    void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong* parameters);
    void glGetnUniformuiv(uint program, int location, int bufSize, uint* parameters);
    void glGetnUniformuivARB(uint program, int location, int bufSize, uint* parameters);
    void glGetnUniformuivKHR(uint program, int location, int bufSize, uint* parameters);
    void glGlobalAlphaFactorbSUN(sbyte factor);
    void glGlobalAlphaFactordSUN(double factor);
    void glGlobalAlphaFactorfSUN(float factor);
    void glGlobalAlphaFactoriSUN(int factor);
    void glGlobalAlphaFactorsSUN(short factor);
    void glGlobalAlphaFactorubSUN(byte factor);
    void glGlobalAlphaFactoruiSUN(uint factor);
    void glGlobalAlphaFactorusSUN(ushort factor);
    void glHint(uint target, uint mode);
    void glHintPGI(uint target, int mode);
    void glHistogram(uint target, int width, uint internalformat, byte sink);
    void glHistogramEXT(uint target, int width, uint internalformat, byte sink);
    void glIglooInterfaceSGIX(uint pname, void* parameters);
    void glImageTransformParameterfHP(uint target, uint pname, float param);
    void glImageTransformParameterfvHP(uint target, uint pname, float* parameters);
    void glImageTransformParameteriHP(uint target, uint pname, int param);
    void glImageTransformParameterivHP(uint target, uint pname, int* parameters);
    void glImportMemoryFdEXT(uint memory, ulong size, uint handleType, int fd);
    void glImportMemoryWin32HandleEXT(uint memory, ulong size, uint handleType, void* handle);
    void glImportMemoryWin32NameEXT(uint memory, ulong size, uint handleType, void* name);
    void glImportSemaphoreFdEXT(uint semaphore, uint handleType, int fd);
    void glImportSemaphoreWin32HandleEXT(uint semaphore, uint handleType, void* handle);
    void glImportSemaphoreWin32NameEXT(uint semaphore, uint handleType, void* name);
    nint glImportSyncEXT(uint external_sync_type, nint external_sync, uint flags);
    void glIndexFormatNV(uint type, int stride);
    void glIndexFuncEXT(uint func, float reference);
    void glIndexMask(uint mask);
    void glIndexMaterialEXT(uint face, uint mode);
    void glIndexPointer(uint type, int stride, void* pointer);
    void glIndexPointerEXT(uint type, int stride, int count, void* pointer);
    void glIndexPointerListIBM(uint type, int stride, void** pointer, int ptrstride);
    void glIndexd(double c);
    void glIndexdv(double* c);
    void glIndexf(float c);
    void glIndexfv(float* c);
    void glIndexi(int c);
    void glIndexiv(int* c);
    void glIndexs(short c);
    void glIndexsv(short* c);
    void glIndexub(byte c);
    void glIndexubv(byte* c);
    void glIndexxOES(int component);
    void glIndexxvOES(int* component);
    void glInitNames();
    void glInsertComponentEXT(uint res, uint src, uint num);
    void glInsertEventMarkerEXT(int length, byte* marker);
    void glInstrumentsBufferSGIX(int size, int* buffer);
    void glInterleavedArrays(uint format, int stride, void* pointer);
    void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);
    void glInvalidateBufferData(uint buffer);
    void glInvalidateBufferSubData(uint buffer, nint offset, nint length);
    void glInvalidateFramebuffer(uint target, int numAttachments, uint* attachments);
    void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments);
    void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height);
    void glInvalidateSubFramebuffer(uint target, int numAttachments, uint* attachments, int x, int y, int width, int height);
    void glInvalidateTexImage(uint texture, int level);
    void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
    byte glIsAsyncMarkerSGIX(uint marker);
    byte glIsBuffer(uint buffer);
    byte glIsBufferARB(uint buffer);
    byte glIsBufferResidentNV(uint target);
    byte glIsCommandListNV(uint list);
    byte glIsEnabled(uint cap);
    byte glIsEnabledIndexedEXT(uint target, uint index);
    byte glIsEnabledi(uint target, uint index);
    byte glIsEnablediEXT(uint target, uint index);
    byte glIsEnablediNV(uint target, uint index);
    byte glIsEnablediOES(uint target, uint index);
    byte glIsFenceAPPLE(uint fence);
    byte glIsFenceNV(uint fence);
    byte glIsFramebuffer(uint framebuffer);
    byte glIsFramebufferEXT(uint framebuffer);
    byte glIsFramebufferOES(uint framebuffer);
    byte glIsImageHandleResidentARB(ulong handle);
    byte glIsImageHandleResidentNV(ulong handle);
    byte glIsList(uint list);
    byte glIsMemoryObjectEXT(uint memoryObject);
    byte glIsNameAMD(uint identifier, uint name);
    byte glIsNamedBufferResidentNV(uint buffer);
    byte glIsNamedStringARB(int namelen, byte* name);
    byte glIsObjectBufferATI(uint buffer);
    byte glIsOcclusionQueryNV(uint id);
    byte glIsPathNV(uint path);
    byte glIsPointInFillPathNV(uint path, uint mask, float x, float y);
    byte glIsPointInStrokePathNV(uint path, float x, float y);
    byte glIsProgram(uint program);
    byte glIsProgramARB(uint program);
    byte glIsProgramNV(uint id);
    byte glIsProgramPipeline(uint pipeline);
    byte glIsProgramPipelineEXT(uint pipeline);
    byte glIsQuery(uint id);
    byte glIsQueryARB(uint id);
    byte glIsQueryEXT(uint id);
    byte glIsRenderbuffer(uint renderbuffer);
    byte glIsRenderbufferEXT(uint renderbuffer);
    byte glIsRenderbufferOES(uint renderbuffer);
    byte glIsSemaphoreEXT(uint semaphore);
    byte glIsSampler(uint sampler);
    byte glIsShader(uint shader);
    byte glIsStateNV(uint state);
    byte glIsSync(nint sync);
    byte glIsSyncAPPLE(nint sync);
    byte glIsTexture(uint texture);
    byte glIsTextureEXT(uint texture);
    byte glIsTextureHandleResidentARB(ulong handle);
    byte glIsTextureHandleResidentNV(ulong handle);
    byte glIsTransformFeedback(uint id);
    byte glIsTransformFeedbackNV(uint id);
    byte glIsVariantEnabledEXT(uint id, uint cap);
    byte glIsVertexArray(uint array);
    byte glIsVertexArrayAPPLE(uint array);
    byte glIsVertexArrayOES(uint array);
    byte glIsVertexAttribEnabledAPPLE(uint index, uint pname);
    void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
    void glLGPUInterlockNVX();
    void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, nint size, void* data);
    void glLabelObjectEXT(uint type, uint obj, int length, byte* label);
    void glLightEnviSGIX(uint pname, int param);
    void glLightModelf(uint pname, float param);
    void glLightModelfv(uint pname, float* parameters);
    void glLightModeli(uint pname, int param);
    void glLightModeliv(uint pname, int* parameters);
    void glLightModelx(uint pname, int param);
    void glLightModelxOES(uint pname, int param);
    void glLightModelxv(uint pname, int* param);
    void glLightModelxvOES(uint pname, int* param);
    void glLightf(uint light, uint pname, float param);
    void glLightfv(uint light, uint pname, float* parameters);
    void glLighti(uint light, uint pname, int param);
    void glLightiv(uint light, uint pname, int* parameters);
    void glLightx(uint light, uint pname, int param);
    void glLightxOES(uint light, uint pname, int param);
    void glLightxv(uint light, uint pname, int* parameters);
    void glLightxvOES(uint light, uint pname, int* parameters);
    void glLineStipple(int factor, ushort pattern);
    void glLineWidth(float width);
    void glLineWidthx(int width);
    void glLineWidthxOES(int width);
    void glLinkProgram(uint program);
    void glLinkProgramARB(nint programObj);
    void glListBase(uint @base);
    void glListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, int* sizes, uint* states, uint* fbos, uint count);
    void glListParameterfSGIX(uint list, uint pname, float param);
    void glListParameterfvSGIX(uint list, uint pname, float* parameters);
    void glListParameteriSGIX(uint list, uint pname, int param);
    void glListParameterivSGIX(uint list, uint pname, int* parameters);
    void glLoadIdentity();
    void glLoadIdentityDeformationMapSGIX(uint mask);
    void glLoadMatrixd(double* m);
    void glLoadMatrixf(float* m);
    void glLoadMatrixx(int* m);
    void glLoadMatrixxOES(int* m);
    void glLoadName(uint name);
    void glLoadPaletteFromModelViewMatrixOES();
    void glLoadProgramNV(uint target, uint id, int len, byte* program);
    void glLoadTransposeMatrixd(double* m);
    void glLoadTransposeMatrixdARB(double* m);
    void glLoadTransposeMatrixf(float* m);
    void glLoadTransposeMatrixfARB(float* m);
    void glLoadTransposeMatrixxOES(int* m);
    void glLockArraysEXT(int first, int count);
    void glLogicOp(uint opcode);
    void glMakeBufferNonResidentNV(uint target);
    void glMakeBufferResidentNV(uint target, uint access);
    void glMakeImageHandleNonResidentARB(ulong handle);
    void glMakeImageHandleNonResidentNV(ulong handle);
    void glMakeImageHandleResidentARB(ulong handle, uint access);
    void glMakeImageHandleResidentNV(ulong handle, uint access);
    void glMakeNamedBufferNonResidentNV(uint buffer);
    void glMakeNamedBufferResidentNV(uint buffer, uint access);
    void glMakeTextureHandleNonResidentARB(ulong handle);
    void glMakeTextureHandleNonResidentNV(ulong handle);
    void glMakeTextureHandleResidentARB(ulong handle);
    void glMakeTextureHandleResidentNV(ulong handle);
    void glMap1d(uint target, double u1, double u2, int stride, int order, double* points);
    void glMap1f(uint target, float u1, float u2, int stride, int order, float* points);
    void glMap1xOES(uint target, int u1, int u2, int stride, int order, int points);
    void glMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);
    void glMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);
    void glMap2xOES(uint target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points);
    void* glMapBuffer(uint target, uint access);
    void* glMapBufferARB(uint target, uint access);
    void* glMapBufferOES(uint target, uint access);
    void* glMapBufferRange(uint target, nint offset, nint length, uint access);
    void* glMapBufferRangeEXT(uint target, nint offset, nint length, uint access);
    void glMapControlPointsNV(uint target, uint index, uint type, int ustride, int vstride, int uorder, int vorder, byte packed, void* points);
    void glMapGrid1d(int un, double u1, double u2);
    void glMapGrid1f(int un, float u1, float u2);
    void glMapGrid1xOES(int n, int u1, int u2);
    void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);
    void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);
    void glMapGrid2xOES(int n, int u1, int u2, int v1, int v2);
    void* glMapNamedBuffer(uint buffer, uint access);
    void* glMapNamedBufferEXT(uint buffer, uint access);
    void* glMapNamedBufferRange(uint buffer, nint offset, nint length, uint access);
    void* glMapNamedBufferRangeEXT(uint buffer, nint offset, nint length, uint access);
    void* glMapObjectBufferATI(uint buffer);
    void glMapParameterfvNV(uint target, uint pname, float* parameters);
    void glMapParameterivNV(uint target, uint pname, int* parameters);
    void* glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, uint* layout);
    void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points);
    void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points);
    void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);
    void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);
    void glMaterialf(uint face, uint pname, float param);
    void glMaterialfv(uint face, uint pname, float* parameters);
    void glMateriali(uint face, uint pname, int param);
    void glMaterialiv(uint face, uint pname, int* parameters);
    void glMaterialx(uint face, uint pname, int param);
    void glMaterialxOES(uint face, uint pname, int param);
    void glMaterialxv(uint face, uint pname, int* param);
    void glMaterialxvOES(uint face, uint pname, int* param);
    void glMatrixFrustumEXT(uint mode, double left, double right, double bottom, double top, double zNear, double zFar);
    void glMatrixIndexPointerARB(int size, uint type, int stride, void* pointer);
    void glMatrixIndexPointerOES(int size, uint type, int stride, void* pointer);
    void glMatrixIndexubvARB(int size, byte* indices);
    void glMatrixIndexuivARB(int size, uint* indices);
    void glMatrixIndexusvARB(int size, ushort* indices);
    void glMatrixLoad3x2fNV(uint matrixMode, float* m);
    void glMatrixLoad3x3fNV(uint matrixMode, float* m);
    void glMatrixLoadIdentityEXT(uint mode);
    void glMatrixLoadTranspose3x3fNV(uint matrixMode, float* m);
    void glMatrixLoadTransposedEXT(uint mode, double* m);
    void glMatrixLoadTransposefEXT(uint mode, float* m);
    void glMatrixLoaddEXT(uint mode, double* m);
    void glMatrixLoadfEXT(uint mode, float* m);
    void glMatrixMode(uint mode);
    void glMatrixMult3x2fNV(uint matrixMode, float* m);
    void glMatrixMult3x3fNV(uint matrixMode, float* m);
    void glMatrixMultTranspose3x3fNV(uint matrixMode, float* m);
    void glMatrixMultTransposedEXT(uint mode, double* m);
    void glMatrixMultTransposefEXT(uint mode, float* m);
    void glMatrixMultdEXT(uint mode, double* m);
    void glMatrixMultfEXT(uint mode, float* m);
    void glMatrixOrthoEXT(uint mode, double left, double right, double bottom, double top, double zNear, double zFar);
    void glMatrixPopEXT(uint mode);
    void glMatrixPushEXT(uint mode);
    void glMatrixRotatedEXT(uint mode, double angle, double x, double y, double z);
    void glMatrixRotatefEXT(uint mode, float angle, float x, float y, float z);
    void glMatrixScaledEXT(uint mode, double x, double y, double z);
    void glMatrixScalefEXT(uint mode, float x, float y, float z);
    void glMatrixTranslatedEXT(uint mode, double x, double y, double z);
    void glMatrixTranslatefEXT(uint mode, float x, float y, float z);
    void glMaxShaderCompilerThreadsKHR(uint count);
    void glMaxShaderCompilerThreadsARB(uint count);
    void glMemoryBarrier(uint barriers);
    void glMemoryBarrierByRegion(uint barriers);
    void glMemoryBarrierEXT(uint barriers);
    void glMemoryObjectParameterivEXT(uint memoryObject, uint pname, int* parameters);
    void glMinSampleShading(float value);
    void glMinSampleShadingARB(float value);
    void glMinSampleShadingOES(float value);
    void glMinmax(uint target, uint internalformat, byte sink);
    void glMinmaxEXT(uint target, uint internalformat, byte sink);
    void glMultMatrixd(double* m);
    void glMultMatrixf(float* m);
    void glMultMatrixx(int* m);
    void glMultMatrixxOES(int* m);
    void glMultTransposeMatrixd(double* m);
    void glMultTransposeMatrixdARB(double* m);
    void glMultTransposeMatrixf(float* m);
    void glMultTransposeMatrixfARB(float* m);
    void glMultTransposeMatrixxOES(int* m);
    void glMultiDrawArrays(uint mode, int* first, int* count, int drawcount);
    void glMultiDrawArraysEXT(uint mode, int* first, int* count, int primcount);
    void glMultiDrawArraysIndirect(uint mode, void* indirect, int drawcount, int stride);
    void glMultiDrawArraysIndirectAMD(uint mode, void* indirect, int primcount, int stride);
    void glMultiDrawArraysIndirectBindlessCountNV(uint mode, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
    void glMultiDrawArraysIndirectBindlessNV(uint mode, void* indirect, int drawCount, int stride, int vertexBufferCount);
    void glMultiDrawArraysIndirectCount(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride);
    void glMultiDrawArraysIndirectCountARB(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride);
    void glMultiDrawArraysIndirectEXT(uint mode, void* indirect, int drawcount, int stride);
    void glMultiDrawElementArrayAPPLE(uint mode, int* first, int* count, int primcount);
    void glMultiDrawElements(uint mode, int* count, uint type, void** indices, int drawcount);
    void glMultiDrawElementsBaseVertex(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex);
    void glMultiDrawElementsBaseVertexEXT(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex);
    void glMultiDrawElementsEXT(uint mode, int* count, uint type, void** indices, int primcount);
    void glMultiDrawElementsIndirect(uint mode, uint type, void* indirect, int drawcount, int stride);
    void glMultiDrawElementsIndirectAMD(uint mode, uint type, void* indirect, int primcount, int stride);
    void glMultiDrawElementsIndirectBindlessCountNV(uint mode, uint type, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
    void glMultiDrawElementsIndirectBindlessNV(uint mode, uint type, void* indirect, int drawCount, int stride, int vertexBufferCount);
    void glMultiDrawElementsIndirectCount(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride);
    void glMultiDrawElementsIndirectCountARB(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride);
    void glMultiDrawElementsIndirectEXT(uint mode, uint type, void* indirect, int drawcount, int stride);
    void glMultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride);
    void glMultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride);
    void glMultiDrawRangeElementArrayAPPLE(uint mode, uint start, uint end, int* first, int* count, int primcount);
    void glMultiModeDrawArraysIBM(uint* mode, int* first, int* count, int primcount, int modestride);
    void glMultiModeDrawElementsIBM(uint* mode, int* count, uint type, void** indices, int primcount, int modestride);
    void glMultiTexBufferEXT(uint texunit, uint target, uint internalformat, uint buffer);
    void glMultiTexCoord1bOES(uint texture, sbyte s);
    void glMultiTexCoord1bvOES(uint texture, sbyte* coords);
    void glMultiTexCoord1d(uint target, double s);
    void glMultiTexCoord1dARB(uint target, double s);
    void glMultiTexCoord1dv(uint target, double* v);
    void glMultiTexCoord1dvARB(uint target, double* v);
    void glMultiTexCoord1f(uint target, float s);
    void glMultiTexCoord1fARB(uint target, float s);
    void glMultiTexCoord1fv(uint target, float* v);
    void glMultiTexCoord1fvARB(uint target, float* v);
    void glMultiTexCoord1hNV(uint target, Half s);
    void glMultiTexCoord1hvNV(uint target, Half* v);
    void glMultiTexCoord1i(uint target, int s);
    void glMultiTexCoord1iARB(uint target, int s);
    void glMultiTexCoord1iv(uint target, int* v);
    void glMultiTexCoord1ivARB(uint target, int* v);
    void glMultiTexCoord1s(uint target, short s);
    void glMultiTexCoord1sARB(uint target, short s);
    void glMultiTexCoord1sv(uint target, short* v);
    void glMultiTexCoord1svARB(uint target, short* v);
    void glMultiTexCoord1xOES(uint texture, int s);
    void glMultiTexCoord1xvOES(uint texture, int* coords);
    void glMultiTexCoord2bOES(uint texture, sbyte s, sbyte t);
    void glMultiTexCoord2bvOES(uint texture, sbyte* coords);
    void glMultiTexCoord2d(uint target, double s, double t);
    void glMultiTexCoord2dARB(uint target, double s, double t);
    void glMultiTexCoord2dv(uint target, double* v);
    void glMultiTexCoord2dvARB(uint target, double* v);
    void glMultiTexCoord2f(uint target, float s, float t);
    void glMultiTexCoord2fARB(uint target, float s, float t);
    void glMultiTexCoord2fv(uint target, float* v);
    void glMultiTexCoord2fvARB(uint target, float* v);
    void glMultiTexCoord2hNV(uint target, Half s, Half t);
    void glMultiTexCoord2hvNV(uint target, Half* v);
    void glMultiTexCoord2i(uint target, int s, int t);
    void glMultiTexCoord2iARB(uint target, int s, int t);
    void glMultiTexCoord2iv(uint target, int* v);
    void glMultiTexCoord2ivARB(uint target, int* v);
    void glMultiTexCoord2s(uint target, short s, short t);
    void glMultiTexCoord2sARB(uint target, short s, short t);
    void glMultiTexCoord2sv(uint target, short* v);
    void glMultiTexCoord2svARB(uint target, short* v);
    void glMultiTexCoord2xOES(uint texture, int s, int t);
    void glMultiTexCoord2xvOES(uint texture, int* coords);
    void glMultiTexCoord3bOES(uint texture, sbyte s, sbyte t, sbyte r);
    void glMultiTexCoord3bvOES(uint texture, sbyte* coords);
    void glMultiTexCoord3d(uint target, double s, double t, double r);
    void glMultiTexCoord3dARB(uint target, double s, double t, double r);
    void glMultiTexCoord3dv(uint target, double* v);
    void glMultiTexCoord3dvARB(uint target, double* v);
    void glMultiTexCoord3f(uint target, float s, float t, float r);
    void glMultiTexCoord3fARB(uint target, float s, float t, float r);
    void glMultiTexCoord3fv(uint target, float* v);
    void glMultiTexCoord3fvARB(uint target, float* v);
    void glMultiTexCoord3hNV(uint target, Half s, Half t, Half r);
    void glMultiTexCoord3hvNV(uint target, Half* v);
    void glMultiTexCoord3i(uint target, int s, int t, int r);
    void glMultiTexCoord3iARB(uint target, int s, int t, int r);
    void glMultiTexCoord3iv(uint target, int* v);
    void glMultiTexCoord3ivARB(uint target, int* v);
    void glMultiTexCoord3s(uint target, short s, short t, short r);
    void glMultiTexCoord3sARB(uint target, short s, short t, short r);
    void glMultiTexCoord3sv(uint target, short* v);
    void glMultiTexCoord3svARB(uint target, short* v);
    void glMultiTexCoord3xOES(uint texture, int s, int t, int r);
    void glMultiTexCoord3xvOES(uint texture, int* coords);
    void glMultiTexCoord4bOES(uint texture, sbyte s, sbyte t, sbyte r, sbyte q);
    void glMultiTexCoord4bvOES(uint texture, sbyte* coords);
    void glMultiTexCoord4d(uint target, double s, double t, double r, double q);
    void glMultiTexCoord4dARB(uint target, double s, double t, double r, double q);
    void glMultiTexCoord4dv(uint target, double* v);
    void glMultiTexCoord4dvARB(uint target, double* v);
    void glMultiTexCoord4f(uint target, float s, float t, float r, float q);
    void glMultiTexCoord4fARB(uint target, float s, float t, float r, float q);
    void glMultiTexCoord4fv(uint target, float* v);
    void glMultiTexCoord4fvARB(uint target, float* v);
    void glMultiTexCoord4hNV(uint target, Half s, Half t, Half r, Half q);
    void glMultiTexCoord4hvNV(uint target, Half* v);
    void glMultiTexCoord4i(uint target, int s, int t, int r, int q);
    void glMultiTexCoord4iARB(uint target, int s, int t, int r, int q);
    void glMultiTexCoord4iv(uint target, int* v);
    void glMultiTexCoord4ivARB(uint target, int* v);
    void glMultiTexCoord4s(uint target, short s, short t, short r, short q);
    void glMultiTexCoord4sARB(uint target, short s, short t, short r, short q);
    void glMultiTexCoord4sv(uint target, short* v);
    void glMultiTexCoord4svARB(uint target, short* v);
    void glMultiTexCoord4x(uint texture, int s, int t, int r, int q);
    void glMultiTexCoord4xOES(uint texture, int s, int t, int r, int q);
    void glMultiTexCoord4xvOES(uint texture, int* coords);
    void glMultiTexCoordP1ui(uint texture, uint type, uint coords);
    void glMultiTexCoordP1uiv(uint texture, uint type, uint* coords);
    void glMultiTexCoordP2ui(uint texture, uint type, uint coords);
    void glMultiTexCoordP2uiv(uint texture, uint type, uint* coords);
    void glMultiTexCoordP3ui(uint texture, uint type, uint coords);
    void glMultiTexCoordP3uiv(uint texture, uint type, uint* coords);
    void glMultiTexCoordP4ui(uint texture, uint type, uint coords);
    void glMultiTexCoordP4uiv(uint texture, uint type, uint* coords);
    void glMultiTexCoordPointerEXT(uint texunit, int size, uint type, int stride, void* pointer);
    void glMultiTexEnvfEXT(uint texunit, uint target, uint pname, float param);
    void glMultiTexEnvfvEXT(uint texunit, uint target, uint pname, float* parameters);
    void glMultiTexEnviEXT(uint texunit, uint target, uint pname, int param);
    void glMultiTexEnvivEXT(uint texunit, uint target, uint pname, int* parameters);
    void glMultiTexGendEXT(uint texunit, uint coord, uint pname, double param);
    void glMultiTexGendvEXT(uint texunit, uint coord, uint pname, double* parameters);
    void glMultiTexGenfEXT(uint texunit, uint coord, uint pname, float param);
    void glMultiTexGenfvEXT(uint texunit, uint coord, uint pname, float* parameters);
    void glMultiTexGeniEXT(uint texunit, uint coord, uint pname, int param);
    void glMultiTexGenivEXT(uint texunit, uint coord, uint pname, int* parameters);
    void glMultiTexImage1DEXT(uint texunit, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels);
    void glMultiTexImage2DEXT(uint texunit, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels);
    void glMultiTexImage3DEXT(uint texunit, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);
    void glMultiTexParameterIivEXT(uint texunit, uint target, uint pname, int* parameters);
    void glMultiTexParameterIuivEXT(uint texunit, uint target, uint pname, uint* parameters);
    void glMultiTexParameterfEXT(uint texunit, uint target, uint pname, float param);
    void glMultiTexParameterfvEXT(uint texunit, uint target, uint pname, float* parameters);
    void glMultiTexParameteriEXT(uint texunit, uint target, uint pname, int param);
    void glMultiTexParameterivEXT(uint texunit, uint target, uint pname, int* parameters);
    void glMultiTexRenderbufferEXT(uint texunit, uint target, uint renderbuffer);
    void glMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);
    void glMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);
    void glMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);
    void glMulticastBarrierNV();
    void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
    void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, nint size, void* data);
    void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);
    void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float* v);
    void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, uint pname, long* parameters);
    void glMulticastGetQueryObjectivNV(uint gpu, uint id, uint pname, int* parameters);
    void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, uint pname, ulong* parameters);
    void glMulticastGetQueryObjectuivNV(uint gpu, uint id, uint pname, uint* parameters);
    void glMulticastScissorArrayvNVX(uint gpu, uint first, int count, int* v);
    void glMulticastViewportArrayvNVX(uint gpu, uint first, int count, float* v);
    void glMulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff);
    void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask);
    void glNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset);
    void glNamedBufferData(uint buffer, nint size, void* data, uint usage);
    void glNamedBufferDataEXT(uint buffer, nint size, void* data, uint usage);
    void glNamedBufferPageCommitmentARB(uint buffer, nint offset, nint size, byte commit);
    void glNamedBufferPageCommitmentEXT(uint buffer, nint offset, nint size, byte commit);
    void glNamedBufferPageCommitmentMemNV(uint buffer, nint offset, nint size, uint memory, ulong memOffset, byte commit);
    void glNamedBufferStorage(uint buffer, nint size, void* data, uint flags);
    void glNamedBufferStorageExternalEXT(uint buffer, nint offset, nint size, void* clientBuffer, uint flags);
    void glNamedBufferStorageEXT(uint buffer, nint size, void* data, uint flags);
    void glNamedBufferStorageMemEXT(uint buffer, nint size, uint memory, ulong offset);
    void glNamedBufferSubData(uint buffer, nint offset, nint size, void* data);
    void glNamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data);
    void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);
    void glNamedFramebufferDrawBuffer(uint framebuffer, uint buf);
    void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs);
    void glNamedFramebufferParameteri(uint framebuffer, uint pname, int param);
    void glNamedFramebufferParameteriEXT(uint framebuffer, uint pname, int param);
    void glNamedFramebufferReadBuffer(uint framebuffer, uint src);
    void glNamedFramebufferRenderbuffer(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer);
    void glNamedFramebufferRenderbufferEXT(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer);
    void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v);
    void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v);
    void glNamedFramebufferTexture(uint framebuffer, uint attachment, uint texture, int level);
    void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values);
    void glNamedFramebufferTexture1DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level);
    void glNamedFramebufferTexture2DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level);
    void glNamedFramebufferTexture3DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level, int zoffset);
    void glNamedFramebufferTextureEXT(uint framebuffer, uint attachment, uint texture, int level);
    void glNamedFramebufferTextureFaceEXT(uint framebuffer, uint attachment, uint texture, int level, uint face);
    void glNamedFramebufferTextureLayer(uint framebuffer, uint attachment, uint texture, int level, int layer);
    void glNamedFramebufferTextureLayerEXT(uint framebuffer, uint attachment, uint texture, int level, int layer);
    void glNamedProgramLocalParameter4dEXT(uint program, uint target, uint index, double x, double y, double z, double w);
    void glNamedProgramLocalParameter4dvEXT(uint program, uint target, uint index, double* parameters);
    void glNamedProgramLocalParameter4fEXT(uint program, uint target, uint index, float x, float y, float z, float w);
    void glNamedProgramLocalParameter4fvEXT(uint program, uint target, uint index, float* parameters);
    void glNamedProgramLocalParameterI4iEXT(uint program, uint target, uint index, int x, int y, int z, int w);
    void glNamedProgramLocalParameterI4ivEXT(uint program, uint target, uint index, int* parameters);
    void glNamedProgramLocalParameterI4uiEXT(uint program, uint target, uint index, uint x, uint y, uint z, uint w);
    void glNamedProgramLocalParameterI4uivEXT(uint program, uint target, uint index, uint* parameters);
    void glNamedProgramLocalParameters4fvEXT(uint program, uint target, uint index, int count, float* parameters);
    void glNamedProgramLocalParametersI4ivEXT(uint program, uint target, uint index, int count, int* parameters);
    void glNamedProgramLocalParametersI4uivEXT(uint program, uint target, uint index, int count, uint* parameters);
    void glNamedProgramStringEXT(uint program, uint target, uint format, int len, void* str);
    void glNamedRenderbufferStorage(uint renderbuffer, uint internalformat, int width, int height);
    void glNamedRenderbufferStorageEXT(uint renderbuffer, uint internalformat, int width, int height);
    void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, uint internalformat, int width, int height);
    void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, uint internalformat, int width, int height);
    void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, uint internalformat, int width, int height);
    void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, uint internalformat, int width, int height);
    void glNamedStringARB(uint type, int namelen, byte* name, int stringlen, byte* str);
    void glNewList(uint list, uint mode);
    uint glNewObjectBufferATI(int size, void* pointer, uint usage);
    void glNormal3b(sbyte nx, sbyte ny, sbyte nz);
    void glNormal3bv(sbyte* v);
    void glNormal3d(double nx, double ny, double nz);
    void glNormal3dv(double* v);
    void glNormal3f(float nx, float ny, float nz);
    void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z);
    void glNormal3fVertex3fvSUN(float* n, float* v);
    void glNormal3fv(float* v);
    void glNormal3hNV(Half nx, Half ny, Half nz);
    void glNormal3hvNV(Half* v);
    void glNormal3i(int nx, int ny, int nz);
    void glNormal3iv(int* v);
    void glNormal3s(short nx, short ny, short nz);
    void glNormal3sv(short* v);
    void glNormal3x(int nx, int ny, int nz);
    void glNormal3xOES(int nx, int ny, int nz);
    void glNormal3xvOES(int* coords);
    void glNormalFormatNV(uint type, int stride);
    void glNormalP3ui(uint type, uint coords);
    void glNormalP3uiv(uint type, uint* coords);
    void glNormalPointer(uint type, int stride, void* pointer);
    void glNormalPointerEXT(uint type, int stride, int count, void* pointer);
    void glNormalPointerListIBM(uint type, int stride, void** pointer, int ptrstride);
    void glNormalPointervINTEL(uint type, void** pointer);
    void glNormalStream3bATI(uint stream, sbyte nx, sbyte ny, sbyte nz);
    void glNormalStream3bvATI(uint stream, sbyte* coords);
    void glNormalStream3dATI(uint stream, double nx, double ny, double nz);
    void glNormalStream3dvATI(uint stream, double* coords);
    void glNormalStream3fATI(uint stream, float nx, float ny, float nz);
    void glNormalStream3fvATI(uint stream, float* coords);
    void glNormalStream3iATI(uint stream, int nx, int ny, int nz);
    void glNormalStream3ivATI(uint stream, int* coords);
    void glNormalStream3sATI(uint stream, short nx, short ny, short nz);
    void glNormalStream3svATI(uint stream, short* coords);
    void glObjectLabel(uint identifier, uint name, int length, byte* label);
    void glObjectLabelKHR(uint identifier, uint name, int length, byte* label);
    void glObjectPtrLabel(void* ptr, int length, byte* label);
    void glObjectPtrLabelKHR(void* ptr, int length, byte* label);
    uint glObjectPurgeableAPPLE(uint objectType, uint name, uint option);
    uint glObjectUnpurgeableAPPLE(uint objectType, uint name, uint option);
    void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);
    void glOrthof(float l, float r, float b, float t, float n, float f);
    void glOrthofOES(float l, float r, float b, float t, float n, float f);
    void glOrthox(int l, int r, int b, int t, int n, int f);
    void glOrthoxOES(int l, int r, int b, int t, int n, int f);
    void glPNTrianglesfATI(uint pname, float param);
    void glPNTrianglesiATI(uint pname, int param);
    void glPassTexCoordATI(uint dst, uint coord, uint swizzle);
    void glPassThrough(float token);
    void glPassThroughxOES(int token);
    void glPatchParameterfv(uint pname, float* values);
    void glPatchParameteri(uint pname, int value);
    void glPatchParameteriEXT(uint pname, int value);
    void glPatchParameteriOES(uint pname, int value);
    void glPathColorGenNV(uint color, uint genMode, uint colorFormat, float* coeffs);
    void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, uint coordType, void* coords);
    void glPathCoordsNV(uint path, int numCoords, uint coordType, void* coords);
    void glPathCoverDepthFuncNV(uint func);
    void glPathDashArrayNV(uint path, int dashCount, float* dashArray);
    void glPathFogGenNV(uint genMode);
    uint glPathGlyphIndexArrayNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
    uint glPathGlyphIndexRangeNV(uint fontTarget, void* fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount);
    void glPathGlyphRangeNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyph, int numGlyphs, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale);
    void glPathGlyphsNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, int numGlyphs, uint type, void* charcodes, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale);
    uint glPathMemoryGlyphIndexArrayNV(uint firstPathName, uint fontTarget, nint fontSize, void* fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
    void glPathParameterfNV(uint path, uint pname, float value);
    void glPathParameterfvNV(uint path, uint pname, float* value);
    void glPathParameteriNV(uint path, uint pname, int value);
    void glPathParameterivNV(uint path, uint pname, int* value);
    void glPathStencilDepthOffsetNV(float factor, float units);
    void glPathStencilFuncNV(uint func, int reference, uint mask);
    void glPathStringNV(uint path, uint format, int length, void* pathString);
    void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, uint coordType, void* coords);
    void glPathSubCoordsNV(uint path, int coordStart, int numCoords, uint coordType, void* coords);
    void glPathTexGenNV(uint texCoordSet, uint genMode, int components, float* coeffs);
    void glPauseTransformFeedback();
    void glPauseTransformFeedbackNV();
    void glPixelDataRangeNV(uint target, int length, void* pointer);
    void glPixelMapfv(uint map, int mapsize, float* values);
    void glPixelMapuiv(uint map, int mapsize, uint* values);
    void glPixelMapusv(uint map, int mapsize, ushort* values);
    void glPixelMapx(uint map, int size, int* values);
    void glPixelStoref(uint pname, float param);
    void glPixelStorei(uint pname, int param);
    void glPixelStorex(uint pname, int param);
    void glPixelTexGenParameterfSGIS(uint pname, float param);
    void glPixelTexGenParameterfvSGIS(uint pname, float* parameters);
    void glPixelTexGenParameteriSGIS(uint pname, int param);
    void glPixelTexGenParameterivSGIS(uint pname, int* parameters);
    void glPixelTexGenSGIX(uint mode);
    void glPixelTransferf(uint pname, float param);
    void glPixelTransferi(uint pname, int param);
    void glPixelTransferxOES(uint pname, int param);
    void glPixelTransformParameterfEXT(uint target, uint pname, float param);
    void glPixelTransformParameterfvEXT(uint target, uint pname, float* parameters);
    void glPixelTransformParameteriEXT(uint target, uint pname, int param);
    void glPixelTransformParameterivEXT(uint target, uint pname, int* parameters);
    void glPixelZoom(float xfactor, float yfactor);
    void glPixelZoomxOES(int xfactor, int yfactor);
    byte glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY);
    void glPointParameterf(uint pname, float param);
    void glPointParameterfARB(uint pname, float param);
    void glPointParameterfEXT(uint pname, float param);
    void glPointParameterfSGIS(uint pname, float param);
    void glPointParameterfv(uint pname, float* parameters);
    void glPointParameterfvARB(uint pname, float* parameters);
    void glPointParameterfvEXT(uint pname, float* parameters);
    void glPointParameterfvSGIS(uint pname, float* parameters);
    void glPointParameteri(uint pname, int param);
    void glPointParameteriNV(uint pname, int param);
    void glPointParameteriv(uint pname, int* parameters);
    void glPointParameterivNV(uint pname, int* parameters);
    void glPointParameterx(uint pname, int param);
    void glPointParameterxOES(uint pname, int param);
    void glPointParameterxv(uint pname, int* parameters);
    void glPointParameterxvOES(uint pname, int* parameters);
    void glPointSize(float size);
    void glPointSizePointerOES(uint type, int stride, void* pointer);
    void glPointSizex(int size);
    void glPointSizexOES(int size);
    int glPollAsyncSGIX(uint* markerp);
    int glPollInstrumentsSGIX(int* marker_p);
    void glPolygonMode(uint face, uint mode);
    void glPolygonModeNV(uint face, uint mode);
    void glPolygonOffset(float factor, float units);
    void glPolygonOffsetClamp(float factor, float units, float clamp);
    void glPolygonOffsetClampEXT(float factor, float units, float clamp);
    void glPolygonOffsetEXT(float factor, float bias);
    void glPolygonOffsetx(int factor, int units);
    void glPolygonOffsetxOES(int factor, int units);
    void glPolygonStipple(byte* mask);
    void glPopAttrib();
    void glPopClientAttrib();
    void glPopDebugGroup();
    void glPopDebugGroupKHR();
    void glPopGroupMarkerEXT();
    void glPopMatrix();
    void glPopName();
    void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint target1, uint fill1, uint target2, uint fill2, uint target3, uint fill3);
    void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint key0, uint target1, uint fill1, uint key1);
    void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
    void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
    void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
    void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
    void glPrimitiveRestartIndex(uint index);
    void glPrimitiveRestartIndexNV(uint index);
    void glPrimitiveRestartNV();
    void glPrioritizeTextures(int n, uint* textures, float* priorities);
    void glPrioritizeTexturesEXT(int n, uint* textures, float* priorities);
    void glPrioritizeTexturesxOES(int n, uint* textures, int* priorities);
    void glProgramBinary(uint program, uint binaryFormat, void* binary, int length);
    void glProgramBinaryOES(uint program, uint binaryFormat, void* binary, int length);
    void glProgramBufferParametersIivNV(uint target, uint bindingIndex, uint wordIndex, int count, int* parameters);
    void glProgramBufferParametersIuivNV(uint target, uint bindingIndex, uint wordIndex, int count, uint* parameters);
    void glProgramBufferParametersfvNV(uint target, uint bindingIndex, uint wordIndex, int count, float* parameters);
    void glProgramEnvParameter4dARB(uint target, uint index, double x, double y, double z, double w);
    void glProgramEnvParameter4dvARB(uint target, uint index, double* parameters);
    void glProgramEnvParameter4fARB(uint target, uint index, float x, float y, float z, float w);
    void glProgramEnvParameter4fvARB(uint target, uint index, float* parameters);
    void glProgramEnvParameterI4iNV(uint target, uint index, int x, int y, int z, int w);
    void glProgramEnvParameterI4ivNV(uint target, uint index, int* parameters);
    void glProgramEnvParameterI4uiNV(uint target, uint index, uint x, uint y, uint z, uint w);
    void glProgramEnvParameterI4uivNV(uint target, uint index, uint* parameters);
    void glProgramEnvParameters4fvEXT(uint target, uint index, int count, float* parameters);
    void glProgramEnvParametersI4ivNV(uint target, uint index, int count, int* parameters);
    void glProgramEnvParametersI4uivNV(uint target, uint index, int count, uint* parameters);
    void glProgramLocalParameter4dARB(uint target, uint index, double x, double y, double z, double w);
    void glProgramLocalParameter4dvARB(uint target, uint index, double* parameters);
    void glProgramLocalParameter4fARB(uint target, uint index, float x, float y, float z, float w);
    void glProgramLocalParameter4fvARB(uint target, uint index, float* parameters);
    void glProgramLocalParameterI4iNV(uint target, uint index, int x, int y, int z, int w);
    void glProgramLocalParameterI4ivNV(uint target, uint index, int* parameters);
    void glProgramLocalParameterI4uiNV(uint target, uint index, uint x, uint y, uint z, uint w);
    void glProgramLocalParameterI4uivNV(uint target, uint index, uint* parameters);
    void glProgramLocalParameters4fvEXT(uint target, uint index, int count, float* parameters);
    void glProgramLocalParametersI4ivNV(uint target, uint index, int count, int* parameters);
    void glProgramLocalParametersI4uivNV(uint target, uint index, int count, uint* parameters);
    void glProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w);
    void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v);
    void glProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w);
    void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v);
    void glProgramParameter4dNV(uint target, uint index, double x, double y, double z, double w);
    void glProgramParameter4dvNV(uint target, uint index, double* v);
    void glProgramParameter4fNV(uint target, uint index, float x, float y, float z, float w);
    void glProgramParameter4fvNV(uint target, uint index, float* v);
    void glProgramParameteri(uint program, uint pname, int value);
    void glProgramParameteriARB(uint program, uint pname, int value);
    void glProgramParameteriEXT(uint program, uint pname, int value);
    void glProgramParameters4dvNV(uint target, uint index, int count, double* v);
    void glProgramParameters4fvNV(uint target, uint index, int count, float* v);
    void glProgramPathFragmentInputGenNV(uint program, int location, uint genMode, int components, float* coeffs);
    void glProgramStringARB(uint target, uint format, int len, void* str);
    void glProgramSubroutineParametersuivNV(uint target, int count, uint* parameters);
    void glProgramUniform1d(uint program, int location, double v0);
    void glProgramUniform1dEXT(uint program, int location, double x);
    void glProgramUniform1dv(uint program, int location, int count, double* value);
    void glProgramUniform1dvEXT(uint program, int location, int count, double* value);
    void glProgramUniform1f(uint program, int location, float v0);
    void glProgramUniform1fEXT(uint program, int location, float v0);
    void glProgramUniform1fv(uint program, int location, int count, float* value);
    void glProgramUniform1fvEXT(uint program, int location, int count, float* value);
    void glProgramUniform1i(uint program, int location, int v0);
    void glProgramUniform1i64ARB(uint program, int location, long x);
    void glProgramUniform1i64NV(uint program, int location, long x);
    void glProgramUniform1i64vARB(uint program, int location, int count, long* value);
    void glProgramUniform1i64vNV(uint program, int location, int count, long* value);
    void glProgramUniform1iEXT(uint program, int location, int v0);
    void glProgramUniform1iv(uint program, int location, int count, int* value);
    void glProgramUniform1ivEXT(uint program, int location, int count, int* value);
    void glProgramUniform1ui(uint program, int location, uint v0);
    void glProgramUniform1ui64ARB(uint program, int location, ulong x);
    void glProgramUniform1ui64NV(uint program, int location, ulong x);
    void glProgramUniform1ui64vARB(uint program, int location, int count, ulong* value);
    void glProgramUniform1ui64vNV(uint program, int location, int count, ulong* value);
    void glProgramUniform1uiEXT(uint program, int location, uint v0);
    void glProgramUniform1uiv(uint program, int location, int count, uint* value);
    void glProgramUniform1uivEXT(uint program, int location, int count, uint* value);
    void glProgramUniform2d(uint program, int location, double v0, double v1);
    void glProgramUniform2dEXT(uint program, int location, double x, double y);
    void glProgramUniform2dv(uint program, int location, int count, double* value);
    void glProgramUniform2dvEXT(uint program, int location, int count, double* value);
    void glProgramUniform2f(uint program, int location, float v0, float v1);
    void glProgramUniform2fEXT(uint program, int location, float v0, float v1);
    void glProgramUniform2fv(uint program, int location, int count, float* value);
    void glProgramUniform2fvEXT(uint program, int location, int count, float* value);
    void glProgramUniform2i(uint program, int location, int v0, int v1);
    void glProgramUniform2i64ARB(uint program, int location, long x, long y);
    void glProgramUniform2i64NV(uint program, int location, long x, long y);
    void glProgramUniform2i64vARB(uint program, int location, int count, long* value);
    void glProgramUniform2i64vNV(uint program, int location, int count, long* value);
    void glProgramUniform2iEXT(uint program, int location, int v0, int v1);
    void glProgramUniform2iv(uint program, int location, int count, int* value);
    void glProgramUniform2ivEXT(uint program, int location, int count, int* value);
    void glProgramUniform2ui(uint program, int location, uint v0, uint v1);
    void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y);
    void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);
    void glProgramUniform2ui64vARB(uint program, int location, int count, ulong* value);
    void glProgramUniform2ui64vNV(uint program, int location, int count, ulong* value);
    void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);
    void glProgramUniform2uiv(uint program, int location, int count, uint* value);
    void glProgramUniform2uivEXT(uint program, int location, int count, uint* value);
    void glProgramUniform3d(uint program, int location, double v0, double v1, double v2);
    void glProgramUniform3dEXT(uint program, int location, double x, double y, double z);
    void glProgramUniform3dv(uint program, int location, int count, double* value);
    void glProgramUniform3dvEXT(uint program, int location, int count, double* value);
    void glProgramUniform3f(uint program, int location, float v0, float v1, float v2);
    void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);
    void glProgramUniform3fv(uint program, int location, int count, float* value);
    void glProgramUniform3fvEXT(uint program, int location, int count, float* value);
    void glProgramUniform3i(uint program, int location, int v0, int v1, int v2);
    void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z);
    void glProgramUniform3i64NV(uint program, int location, long x, long y, long z);
    void glProgramUniform3i64vARB(uint program, int location, int count, long* value);
    void glProgramUniform3i64vNV(uint program, int location, int count, long* value);
    void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);
    void glProgramUniform3iv(uint program, int location, int count, int* value);
    void glProgramUniform3ivEXT(uint program, int location, int count, int* value);
    void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);
    void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z);
    void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);
    void glProgramUniform3ui64vARB(uint program, int location, int count, ulong* value);
    void glProgramUniform3ui64vNV(uint program, int location, int count, ulong* value);
    void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);
    void glProgramUniform3uiv(uint program, int location, int count, uint* value);
    void glProgramUniform3uivEXT(uint program, int location, int count, uint* value);
    void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);
    void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);
    void glProgramUniform4dv(uint program, int location, int count, double* value);
    void glProgramUniform4dvEXT(uint program, int location, int count, double* value);
    void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);
    void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);
    void glProgramUniform4fv(uint program, int location, int count, float* value);
    void glProgramUniform4fvEXT(uint program, int location, int count, float* value);
    void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);
    void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w);
    void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);
    void glProgramUniform4i64vARB(uint program, int location, int count, long* value);
    void glProgramUniform4i64vNV(uint program, int location, int count, long* value);
    void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);
    void glProgramUniform4iv(uint program, int location, int count, int* value);
    void glProgramUniform4ivEXT(uint program, int location, int count, int* value);
    void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);
    void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w);
    void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);
    void glProgramUniform4ui64vARB(uint program, int location, int count, ulong* value);
    void glProgramUniform4ui64vNV(uint program, int location, int count, ulong* value);
    void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);
    void glProgramUniform4uiv(uint program, int location, int count, uint* value);
    void glProgramUniform4uivEXT(uint program, int location, int count, uint* value);
    void glProgramUniformHandleui64ARB(uint program, int location, ulong value);
    void glProgramUniformHandleui64IMG(uint program, int location, ulong value);
    void glProgramUniformHandleui64NV(uint program, int location, ulong value);
    void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values);
    void glProgramUniformHandleui64vIMG(uint program, int location, int count, ulong* values);
    void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong* values);
    void glProgramUniformMatrix2dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix2dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix2fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix2fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix2x3dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix2x3fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix2x4dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix2x4fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix3dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix3dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix3fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix3fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix3x2dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix3x2fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix3x4dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix3x4fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix4dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix4dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix4fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix4fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix4x2dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix4x2fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix4x3dv(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, byte transpose, double* value);
    void glProgramUniformMatrix4x3fv(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, byte transpose, float* value);
    void glProgramUniformui64NV(uint program, int location, ulong value);
    void glProgramUniformui64vNV(uint program, int location, int count, ulong* value);
    void glProgramVertexLimitNV(uint target, int limit);
    void glProvokingVertex(uint mode);
    void glProvokingVertexEXT(uint mode);
    void glPushAttrib(uint mask);
    void glPushClientAttrib(uint mask);
    void glPushClientAttribDefaultEXT(uint mask);
    void glPushDebugGroup(uint source, uint id, int length, byte* message);
    void glPushDebugGroupKHR(uint source, uint id, int length, byte* message);
    void glPushGroupMarkerEXT(int length, byte* marker);
    void glPushMatrix();
    void glPushName(uint name);
    void glQueryCounter(uint id, uint target);
    void glQueryCounterEXT(uint id, uint target);
    uint glQueryMatrixxOES(int* mantissa, int* exponent);
    void glQueryObjectParameteruiAMD(uint target, uint id, uint pname, uint param);
    int glQueryResourceNV(uint queryType, int tagId, uint count, int* buffer);
    void glQueryResourceTagNV(int tagId, byte* tagString);
    void glRasterPos2d(double x, double y);
    void glRasterPos2dv(double* v);
    void glRasterPos2f(float x, float y);
    void glRasterPos2fv(float* v);
    void glRasterPos2i(int x, int y);
    void glRasterPos2iv(int* v);
    void glRasterPos2s(short x, short y);
    void glRasterPos2sv(short* v);
    void glRasterPos2xOES(int x, int y);
    void glRasterPos2xvOES(int* coords);
    void glRasterPos3d(double x, double y, double z);
    void glRasterPos3dv(double* v);
    void glRasterPos3f(float x, float y, float z);
    void glRasterPos3fv(float* v);
    void glRasterPos3i(int x, int y, int z);
    void glRasterPos3iv(int* v);
    void glRasterPos3s(short x, short y, short z);
    void glRasterPos3sv(short* v);
    void glRasterPos3xOES(int x, int y, int z);
    void glRasterPos3xvOES(int* coords);
    void glRasterPos4d(double x, double y, double z, double w);
    void glRasterPos4dv(double* v);
    void glRasterPos4f(float x, float y, float z, float w);
    void glRasterPos4fv(float* v);
    void glRasterPos4i(int x, int y, int z, int w);
    void glRasterPos4iv(int* v);
    void glRasterPos4s(short x, short y, short z, short w);
    void glRasterPos4sv(short* v);
    void glRasterPos4xOES(int x, int y, int z, int w);
    void glRasterPos4xvOES(int* coords);
    void glRasterSamplesEXT(uint samples, byte fixedsamplelocations);
    void glReadBuffer(uint src);
    void glReadBufferIndexedEXT(uint src, int index);
    void glReadBufferNV(uint mode);
    void glReadInstrumentsSGIX(int marker);
    void glReadPixels(int x, int y, int width, int height, uint format, uint type, void* pixels);
    void glReadnPixels(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data);
    void glReadnPixelsARB(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data);
    void glReadnPixelsEXT(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data);
    void glReadnPixelsKHR(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data);
    byte glReleaseKeyedMutexWin32EXT(uint memory, ulong key);
    void glRectd(double x1, double y1, double x2, double y2);
    void glRectdv(double* v1, double* v2);
    void glRectf(float x1, float y1, float x2, float y2);
    void glRectfv(float* v1, float* v2);
    void glRecti(int x1, int y1, int x2, int y2);
    void glRectiv(int* v1, int* v2);
    void glRects(short x1, short y1, short x2, short y2);
    void glRectsv(short* v1, short* v2);
    void glRectxOES(int x1, int y1, int x2, int y2);
    void glRectxvOES(int* v1, int* v2);
    void glReferencePlaneSGIX(double* equation);
    void glReleaseShaderCompiler();
    void glRenderGpuMaskNV(uint mask);
    int glRenderMode(uint mode);
    void glRenderbufferStorage(uint target, uint internalformat, int width, int height);
    void glRenderbufferStorageEXT(uint target, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleANGLE(uint target, int samples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleAPPLE(uint target, int samples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleAdvancedAMD(uint target, int samples, int storageSamples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleEXT(uint target, int samples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleIMG(uint target, int samples, uint internalformat, int width, int height);
    void glRenderbufferStorageMultisampleNV(uint target, int samples, uint internalformat, int width, int height);
    void glRenderbufferStorageOES(uint target, uint internalformat, int width, int height);
    void glReplacementCodePointerSUN(uint type, int stride, void** pointer);
    void glReplacementCodeubSUN(byte code);
    void glReplacementCodeubvSUN(byte* code);
    void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z);
    void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v);
    void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v);
    void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z);
    void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v);
    void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z);
    void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v);
    void glReplacementCodeuiSUN(uint code);
    void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v);
    void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);
    void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v);
    void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z);
    void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v);
    void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z);
    void glReplacementCodeuiVertex3fvSUN(uint* rc, float* v);
    void glReplacementCodeuivSUN(uint* code);
    void glReplacementCodeusSUN(ushort code);
    void glReplacementCodeusvSUN(ushort* code);
    void glRequestResidentProgramsNV(int n, uint* programs);
    void glResetHistogram(uint target);
    void glResetHistogramEXT(uint target);
    void glResetMemoryObjectParameterNV(uint memory, uint pname);
    void glResetMinmax(uint target);
    void glResetMinmaxEXT(uint target);
    void glResizeBuffersMESA();
    void glResolveDepthValuesNV();
    void glResolveMultisampleFramebufferAPPLE();
    void glResumeTransformFeedback();
    void glResumeTransformFeedbackNV();
    void glRotated(double angle, double x, double y, double z);
    void glRotatef(float angle, float x, float y, float z);
    void glRotatex(int angle, int x, int y, int z);
    void glRotatexOES(int angle, int x, int y, int z);
    void glSampleCoverage(float value, byte invert);
    void glSampleCoverageARB(float value, byte invert);
    void glSampleCoveragex(int value, byte invert);
    void glSampleCoveragexOES(int value, byte invert);
    void glSampleMapATI(uint dst, uint interp, uint swizzle);
    void glSampleMaskEXT(float value, byte invert);
    void glSampleMaskIndexedNV(uint index, uint mask);
    void glSampleMaskSGIS(float value, byte invert);
    void glSampleMaski(uint maskNumber, uint mask);
    void glSamplePatternEXT(uint pattern);
    void glSamplePatternSGIS(uint pattern);
    void glSamplerParameterIiv(uint sampler, uint pname, int* param);
    void glSamplerParameterIivEXT(uint sampler, uint pname, int* param);
    void glSamplerParameterIivOES(uint sampler, uint pname, int* param);
    void glSamplerParameterIuiv(uint sampler, uint pname, uint* param);
    void glSamplerParameterIuivEXT(uint sampler, uint pname, uint* param);
    void glSamplerParameterIuivOES(uint sampler, uint pname, uint* param);
    void glSamplerParameterf(uint sampler, uint pname, float param);
    void glSamplerParameterfv(uint sampler, uint pname, float* param);
    void glSamplerParameteri(uint sampler, uint pname, int param);
    void glSamplerParameteriv(uint sampler, uint pname, int* param);
    void glScaled(double x, double y, double z);
    void glScalef(float x, float y, float z);
    void glScalex(int x, int y, int z);
    void glScalexOES(int x, int y, int z);
    void glScissor(int x, int y, int width, int height);
    void glScissorArrayv(uint first, int count, int* v);
    void glScissorArrayvNV(uint first, int count, int* v);
    void glScissorArrayvOES(uint first, int count, int* v);
    void glScissorExclusiveArrayvNV(uint first, int count, int* v);
    void glScissorExclusiveNV(int x, int y, int width, int height);
    void glScissorIndexed(uint index, int left, int bottom, int width, int height);
    void glScissorIndexedNV(uint index, int left, int bottom, int width, int height);
    void glScissorIndexedOES(uint index, int left, int bottom, int width, int height);
    void glScissorIndexedv(uint index, int* v);
    void glScissorIndexedvNV(uint index, int* v);
    void glScissorIndexedvOES(uint index, int* v);
    void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue);
    void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue);
    void glSecondaryColor3bv(sbyte* v);
    void glSecondaryColor3bvEXT(sbyte* v);
    void glSecondaryColor3d(double red, double green, double blue);
    void glSecondaryColor3dEXT(double red, double green, double blue);
    void glSecondaryColor3dv(double* v);
    void glSecondaryColor3dvEXT(double* v);
    void glSecondaryColor3f(float red, float green, float blue);
    void glSecondaryColor3fEXT(float red, float green, float blue);
    void glSecondaryColor3fv(float* v);
    void glSecondaryColor3fvEXT(float* v);
    void glSecondaryColor3hNV(Half red, Half green, Half blue);
    void glSecondaryColor3hvNV(Half* v);
    void glSecondaryColor3i(int red, int green, int blue);
    void glSecondaryColor3iEXT(int red, int green, int blue);
    void glSecondaryColor3iv(int* v);
    void glSecondaryColor3ivEXT(int* v);
    void glSecondaryColor3s(short red, short green, short blue);
    void glSecondaryColor3sEXT(short red, short green, short blue);
    void glSecondaryColor3sv(short* v);
    void glSecondaryColor3svEXT(short* v);
    void glSecondaryColor3ub(byte red, byte green, byte blue);
    void glSecondaryColor3ubEXT(byte red, byte green, byte blue);
    void glSecondaryColor3ubv(byte* v);
    void glSecondaryColor3ubvEXT(byte* v);
    void glSecondaryColor3ui(uint red, uint green, uint blue);
    void glSecondaryColor3uiEXT(uint red, uint green, uint blue);
    void glSecondaryColor3uiv(uint* v);
    void glSecondaryColor3uivEXT(uint* v);
    void glSecondaryColor3us(ushort red, ushort green, ushort blue);
    void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue);
    void glSecondaryColor3usv(ushort* v);
    void glSecondaryColor3usvEXT(ushort* v);
    void glSecondaryColorFormatNV(int size, uint type, int stride);
    void glSecondaryColorP3ui(uint type, uint color);
    void glSecondaryColorP3uiv(uint type, uint* color);
    void glSecondaryColorPointer(int size, uint type, int stride, void* pointer);
    void glSecondaryColorPointerEXT(int size, uint type, int stride, void* pointer);
    void glSecondaryColorPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride);
    void glSelectBuffer(int size, uint* buffer);
    void glSelectPerfMonitorCountersAMD(uint monitor, byte enable, uint group, int numCounters, uint* counterList);
    void glSemaphoreParameterivNV(uint semaphore, uint pname, int* parameters);
    void glSemaphoreParameterui64vEXT(uint semaphore, uint pname, ulong* parameters);
    void glSeparableFilter2D(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column);
    void glSeparableFilter2DEXT(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column);
    void glSetFenceAPPLE(uint fence);
    void glSetFenceNV(uint fence, uint condition);
    void glSetFragmentShaderConstantATI(uint dst, float* value);
    void glSetInvariantEXT(uint id, uint type, void* addr);
    void glSetLocalConstantEXT(uint id, uint type, void* addr);
    void glSetMultisamplefvAMD(uint pname, uint index, float* val);
    void glShadeModel(uint mode);
    void glShaderBinary(int count, uint* shaders, uint binaryFormat, void* binary, int length);
    void glShaderOp1EXT(uint op, uint res, uint arg1);
    void glShaderOp2EXT(uint op, uint res, uint arg1, uint arg2);
    void glShaderOp3EXT(uint op, uint res, uint arg1, uint arg2, uint arg3);
    void glShaderSource(uint shader, int count, byte** str, int* length);
    void glShaderSourceARB(nint shaderObj, int count, byte** str, int* length);
    void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);
    void glShadingRateImageBarrierNV(byte synchronize);
    void glShadingRateQCOM(uint rate);
    void glShadingRateImagePaletteNV(uint viewport, uint first, int count, uint* rates);
    void glShadingRateSampleOrderNV(uint order);
    void glShadingRateSampleOrderCustomNV(uint rate, uint samples, int* locations);
    void glSharpenTexFuncSGIS(uint target, int n, float* points);
    void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* dstLayouts);
    void glSignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);
    void glSpecializeShader(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);
    void glSpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);
    void glSpriteParameterfSGIX(uint pname, float param);
    void glSpriteParameterfvSGIX(uint pname, float* parameters);
    void glSpriteParameteriSGIX(uint pname, int param);
    void glSpriteParameterivSGIX(uint pname, int* parameters);
    void glStartInstrumentsSGIX();
    void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask);
    void glStateCaptureNV(uint state, uint mode);
    void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag);
    void glStencilFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint transformType, float* transformValues);
    void glStencilFillPathNV(uint path, uint fillMode, uint mask);
    void glStencilFunc(uint func, int reference, uint mask);
    void glStencilFuncSeparate(uint face, uint func, int reference, uint mask);
    void glStencilFuncSeparateATI(uint frontfunc, uint backfunc, int reference, uint mask);
    void glStencilMask(uint mask);
    void glStencilMaskSeparate(uint face, uint mask);
    void glStencilOp(uint fail, uint zfail, uint zpass);
    void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass);
    void glStencilOpSeparateATI(uint face, uint sfail, uint dpfail, uint dppass);
    void glStencilOpValueAMD(uint face, uint value);
    void glStencilStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint transformType, float* transformValues);
    void glStencilStrokePathNV(uint path, int reference, uint mask);
    void glStencilThenCoverFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint coverMode, uint transformType, float* transformValues);
    void glStencilThenCoverFillPathNV(uint path, uint fillMode, uint mask, uint coverMode);
    void glStencilThenCoverStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint coverMode, uint transformType, float* transformValues);
    void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, uint coverMode);
    void glStopInstrumentsSGIX(int marker);
    void glStringMarkerGREMEDY(int len, void* str);
    void glSubpixelPrecisionBiasNV(uint xbits, uint ybits);
    void glSwizzleEXT(uint res, uint input, uint outX, uint outY, uint outZ, uint outW);
    void glSyncTextureINTEL(uint texture);
    void glTagSampleBufferSGIX();
    void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz);
    void glTangent3bvEXT(sbyte* v);
    void glTangent3dEXT(double tx, double ty, double tz);
    void glTangent3dvEXT(double* v);
    void glTangent3fEXT(float tx, float ty, float tz);
    void glTangent3fvEXT(float* v);
    void glTangent3iEXT(int tx, int ty, int tz);
    void glTangent3ivEXT(int* v);
    void glTangent3sEXT(short tx, short ty, short tz);
    void glTangent3svEXT(short* v);
    void glTangentPointerEXT(uint type, int stride, void* pointer);
    void glTbufferMask3DFX(uint mask);
    void glTessellationFactorAMD(float factor);
    void glTessellationModeAMD(uint mode);
    byte glTestFenceAPPLE(uint fence);
    byte glTestFenceNV(uint fence);
    byte glTestObjectAPPLE(uint obj, uint name);
    void glTexAttachMemoryNV(uint target, uint memory, ulong offset);
    void glTexBuffer(uint target, uint internalformat, uint buffer);
    void glTexBufferARB(uint target, uint internalformat, uint buffer);
    void glTexBufferEXT(uint target, uint internalformat, uint buffer);
    void glTexBufferOES(uint target, uint internalformat, uint buffer);
    void glTexBufferRange(uint target, uint internalformat, uint buffer, nint offset, nint size);
    void glTexBufferRangeEXT(uint target, uint internalformat, uint buffer, nint offset, nint size);
    void glTexBufferRangeOES(uint target, uint internalformat, uint buffer, nint offset, nint size);
    void glTexBumpParameterfvATI(uint pname, float* param);
    void glTexBumpParameterivATI(uint pname, int* param);
    void glTexCoord1bOES(sbyte s);
    void glTexCoord1bvOES(sbyte* coords);
    void glTexCoord1d(double s);
    void glTexCoord1dv(double* v);
    void glTexCoord1f(float s);
    void glTexCoord1fv(float* v);
    void glTexCoord1hNV(Half s);
    void glTexCoord1hvNV(Half* v);
    void glTexCoord1i(int s);
    void glTexCoord1iv(int* v);
    void glTexCoord1s(short s);
    void glTexCoord1sv(short* v);
    void glTexCoord1xOES(int s);
    void glTexCoord1xvOES(int* coords);
    void glTexCoord2bOES(sbyte s, sbyte t);
    void glTexCoord2bvOES(sbyte* coords);
    void glTexCoord2d(double s, double t);
    void glTexCoord2dv(double* v);
    void glTexCoord2f(float s, float t);
    void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z);
    void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v);
    void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v);
    void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);
    void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v);
    void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z);
    void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v);
    void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);
    void glTexCoord2fVertex3fvSUN(float* tc, float* v);
    void glTexCoord2fv(float* v);
    void glTexCoord2hNV(Half s, Half t);
    void glTexCoord2hvNV(Half* v);
    void glTexCoord2i(int s, int t);
    void glTexCoord2iv(int* v);
    void glTexCoord2s(short s, short t);
    void glTexCoord2sv(short* v);
    void glTexCoord2xOES(int s, int t);
    void glTexCoord2xvOES(int* coords);
    void glTexCoord3bOES(sbyte s, sbyte t, sbyte r);
    void glTexCoord3bvOES(sbyte* coords);
    void glTexCoord3d(double s, double t, double r);
    void glTexCoord3dv(double* v);
    void glTexCoord3f(float s, float t, float r);
    void glTexCoord3fv(float* v);
    void glTexCoord3hNV(Half s, Half t, Half r);
    void glTexCoord3hvNV(Half* v);
    void glTexCoord3i(int s, int t, int r);
    void glTexCoord3iv(int* v);
    void glTexCoord3s(short s, short t, short r);
    void glTexCoord3sv(short* v);
    void glTexCoord3xOES(int s, int t, int r);
    void glTexCoord3xvOES(int* coords);
    void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q);
    void glTexCoord4bvOES(sbyte* coords);
    void glTexCoord4d(double s, double t, double r, double q);
    void glTexCoord4dv(double* v);
    void glTexCoord4f(float s, float t, float r, float q);
    void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);
    void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v);
    void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);
    void glTexCoord4fVertex4fvSUN(float* tc, float* v);
    void glTexCoord4fv(float* v);
    void glTexCoord4hNV(Half s, Half t, Half r, Half q);
    void glTexCoord4hvNV(Half* v);
    void glTexCoord4i(int s, int t, int r, int q);
    void glTexCoord4iv(int* v);
    void glTexCoord4s(short s, short t, short r, short q);
    void glTexCoord4sv(short* v);
    void glTexCoord4xOES(int s, int t, int r, int q);
    void glTexCoord4xvOES(int* coords);
    void glTexCoordFormatNV(int size, uint type, int stride);
    void glTexCoordP1ui(uint type, uint coords);
    void glTexCoordP1uiv(uint type, uint* coords);
    void glTexCoordP2ui(uint type, uint coords);
    void glTexCoordP2uiv(uint type, uint* coords);
    void glTexCoordP3ui(uint type, uint coords);
    void glTexCoordP3uiv(uint type, uint* coords);
    void glTexCoordP4ui(uint type, uint coords);
    void glTexCoordP4uiv(uint type, uint* coords);
    void glTexCoordPointer(int size, uint type, int stride, void* pointer);
    void glTexCoordPointerEXT(int size, uint type, int stride, int count, void* pointer);
    void glTexCoordPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride);
    void glTexCoordPointervINTEL(int size, uint type, void** pointer);
    void glTexEnvf(uint target, uint pname, float param);
    void glTexEnvfv(uint target, uint pname, float* parameters);
    void glTexEnvi(uint target, uint pname, int param);
    void glTexEnviv(uint target, uint pname, int* parameters);
    void glTexEnvx(uint target, uint pname, int param);
    void glTexEnvxOES(uint target, uint pname, int param);
    void glTexEnvxv(uint target, uint pname, int* parameters);
    void glTexEnvxvOES(uint target, uint pname, int* parameters);
    void glTexEstimateMotionQCOM(uint reference, uint target, uint output);
    void glTexEstimateMotionRegionsQCOM(uint reference, uint target, uint output, uint mask);
    void glExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor);
    void glTexFilterFuncSGIS(uint target, uint filter, int n, float* weights);
    void glTexGend(uint coord, uint pname, double param);
    void glTexGendv(uint coord, uint pname, double* parameters);
    void glTexGenf(uint coord, uint pname, float param);
    void glTexGenfOES(uint coord, uint pname, float param);
    void glTexGenfv(uint coord, uint pname, float* parameters);
    void glTexGenfvOES(uint coord, uint pname, float* parameters);
    void glTexGeni(uint coord, uint pname, int param);
    void glTexGeniOES(uint coord, uint pname, int param);
    void glTexGeniv(uint coord, uint pname, int* parameters);
    void glTexGenivOES(uint coord, uint pname, int* parameters);
    void glTexGenxOES(uint coord, uint pname, int param);
    void glTexGenxvOES(uint coord, uint pname, int* parameters);
    void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels);
    void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels);
    void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations);
    void glTexImage2DMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations);
    void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);
    void glTexImage3DEXT(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);
    void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations);
    void glTexImage3DMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations);
    void glTexImage3DOES(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);
    void glTexImage4DSGIS(uint target, int level, uint internalformat, int width, int height, int depth, int size4d, int border, uint format, uint type, void* pixels);
    void glTexPageCommitmentARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit);
    void glTexPageCommitmentEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit);
    void glTexPageCommitmentMemNV(uint target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit);
    void glTexParameterIiv(uint target, uint pname, int* parameters);
    void glTexParameterIivEXT(uint target, uint pname, int* parameters);
    void glTexParameterIivOES(uint target, uint pname, int* parameters);
    void glTexParameterIuiv(uint target, uint pname, uint* parameters);
    void glTexParameterIuivEXT(uint target, uint pname, uint* parameters);
    void glTexParameterIuivOES(uint target, uint pname, uint* parameters);
    void glTexParameterf(uint target, uint pname, float param);
    void glTexParameterfv(uint target, uint pname, float* parameters);
    void glTexParameteri(uint target, uint pname, int param);
    void glTexParameteriv(uint target, uint pname, int* parameters);
    void glTexParameterx(uint target, uint pname, int param);
    void glTexParameterxOES(uint target, uint pname, int param);
    void glTexParameterxv(uint target, uint pname, int* parameters);
    void glTexParameterxvOES(uint target, uint pname, int* parameters);
    void glTexRenderbufferNV(uint target, uint renderbuffer);
    void glTexStorage1D(uint target, int levels, uint internalformat, int width);
    void glTexStorage1DEXT(uint target, int levels, uint internalformat, int width);
    void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height);
    void glTexStorage2DEXT(uint target, int levels, uint internalformat, int width, int height);
    void glTexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations);
    void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth);
    void glTexStorage3DEXT(uint target, int levels, uint internalformat, int width, int height, int depth);
    void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations);
    void glTexStorage3DMultisampleOES(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations);
    void glTexStorageMem1DEXT(uint target, int levels, uint internalFormat, int width, uint memory, ulong offset);
    void glTexStorageMem2DEXT(uint target, int levels, uint internalFormat, int width, int height, uint memory, ulong offset);
    void glTexStorageMem2DMultisampleEXT(uint target, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset);
    void glTexStorageMem3DEXT(uint target, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset);
    void glTexStorageMem3DMultisampleEXT(uint target, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset);
    void glTexStorageSparseAMD(uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags);
    void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);
    void glTexSubImage1DEXT(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);
    void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);
    void glTexSubImage2DEXT(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);
    void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);
    void glTexSubImage3DEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);
    void glTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);
    void glTexSubImage4DSGIS(uint target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, uint format, uint type, void* pixels);
    void glTextureAttachMemoryNV(uint texture, uint memory, ulong offset);
    void glTextureBarrier();
    void glTextureBarrierNV();
    void glTextureBuffer(uint texture, uint internalformat, uint buffer);
    void glTextureBufferEXT(uint texture, uint target, uint internalformat, uint buffer);
    void glTextureBufferRange(uint texture, uint internalformat, uint buffer, nint offset, nint size);
    void glTextureBufferRangeEXT(uint texture, uint target, uint internalformat, uint buffer, nint offset, nint size);
    void glTextureColorMaskSGIS(byte red, byte green, byte blue, byte alpha);
    void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
    void glTextureImage1DEXT(uint texture, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels);
    void glTextureImage2DEXT(uint texture, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels);
    void glTextureImage2DMultisampleCoverageNV(uint texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations);
    void glTextureImage2DMultisampleNV(uint texture, uint target, int samples, int internalFormat, int width, int height, byte fixedSampleLocations);
    void glTextureImage3DEXT(uint texture, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);
    void glTextureImage3DMultisampleCoverageNV(uint texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations);
    void glTextureImage3DMultisampleNV(uint texture, uint target, int samples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations);
    void glTextureLightEXT(uint pname);
    void glTextureMaterialEXT(uint face, uint mode);
    void glTextureNormalEXT(uint mode);
    void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit);
    void glTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit);
    void glTextureParameterIiv(uint texture, uint pname, int* parameters);
    void glTextureParameterIivEXT(uint texture, uint target, uint pname, int* parameters);
    void glTextureParameterIuiv(uint texture, uint pname, uint* parameters);
    void glTextureParameterIuivEXT(uint texture, uint target, uint pname, uint* parameters);
    void glTextureParameterf(uint texture, uint pname, float param);
    void glTextureParameterfEXT(uint texture, uint target, uint pname, float param);
    void glTextureParameterfv(uint texture, uint pname, float* param);
    void glTextureParameterfvEXT(uint texture, uint target, uint pname, float* parameters);
    void glTextureParameteri(uint texture, uint pname, int param);
    void glTextureParameteriEXT(uint texture, uint target, uint pname, int param);
    void glTextureParameteriv(uint texture, uint pname, int* param);
    void glTextureParameterivEXT(uint texture, uint target, uint pname, int* parameters);
    void glTextureRangeAPPLE(uint target, int length, void* pointer);
    void glTextureRenderbufferEXT(uint texture, uint target, uint renderbuffer);
    void glTextureStorage1D(uint texture, int levels, uint internalformat, int width);
    void glTextureStorage1DEXT(uint texture, uint target, int levels, uint internalformat, int width);
    void glTextureStorage2D(uint texture, int levels, uint internalformat, int width, int height);
    void glTextureStorage2DEXT(uint texture, uint target, int levels, uint internalformat, int width, int height);
    void glTextureStorage2DMultisample(uint texture, int samples, uint internalformat, int width, int height, byte fixedsamplelocations);
    void glTextureStorage2DMultisampleEXT(uint texture, uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations);
    void glTextureStorage3D(uint texture, int levels, uint internalformat, int width, int height, int depth);
    void glTextureStorage3DEXT(uint texture, uint target, int levels, uint internalformat, int width, int height, int depth);
    void glTextureStorage3DMultisample(uint texture, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations);
    void glTextureStorage3DMultisampleEXT(uint texture, uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations);
    void glTextureStorageMem1DEXT(uint texture, int levels, uint internalFormat, int width, uint memory, ulong offset);
    void glTextureStorageMem2DEXT(uint texture, int levels, uint internalFormat, int width, int height, uint memory, ulong offset);
    void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset);
    void glTextureStorageMem3DEXT(uint texture, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset);
    void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset);
    void glTextureStorageSparseAMD(uint texture, uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags);
    void glTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, uint type, void* pixels);
    void glTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);
    void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);
    void glTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);
    void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);
    void glTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);
    void glTextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
    void glTextureViewEXT(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
    void glTextureViewOES(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
    void glTrackMatrixNV(uint target, uint address, uint matrix, uint transform);
    void glTransformFeedbackAttribsNV(int count, int* attribs, uint bufferMode);
    void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer);
    void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size);
    void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, uint bufferMode);
    void glTransformFeedbackVaryings(uint program, int count, byte** varyings, uint bufferMode);
    void glTransformFeedbackVaryingsEXT(uint program, int count, byte** varyings, uint bufferMode);
    void glTransformFeedbackVaryingsNV(uint program, int count, int* locations, uint bufferMode);
    void glTransformPathNV(uint resultPath, uint srcPath, uint transformType, float* transformValues);
    void glTranslated(double x, double y, double z);
    void glTranslatef(float x, float y, float z);
    void glTranslatex(int x, int y, int z);
    void glTranslatexOES(int x, int y, int z);
    void glUniform1d(int location, double x);
    void glUniform1dv(int location, int count, double* value);
    void glUniform1f(int location, float v0);
    void glUniform1fARB(int location, float v0);
    void glUniform1fv(int location, int count, float* value);
    void glUniform1fvARB(int location, int count, float* value);
    void glUniform1i(int location, int v0);
    void glUniform1i64ARB(int location, long x);
    void glUniform1i64NV(int location, long x);
    void glUniform1i64vARB(int location, int count, long* value);
    void glUniform1i64vNV(int location, int count, long* value);
    void glUniform1iARB(int location, int v0);
    void glUniform1iv(int location, int count, int* value);
    void glUniform1ivARB(int location, int count, int* value);
    void glUniform1ui(int location, uint v0);
    void glUniform1ui64ARB(int location, ulong x);
    void glUniform1ui64NV(int location, ulong x);
    void glUniform1ui64vARB(int location, int count, ulong* value);
    void glUniform1ui64vNV(int location, int count, ulong* value);
    void glUniform1uiEXT(int location, uint v0);
    void glUniform1uiv(int location, int count, uint* value);
    void glUniform1uivEXT(int location, int count, uint* value);
    void glUniform2d(int location, double x, double y);
    void glUniform2dv(int location, int count, double* value);
    void glUniform2f(int location, float v0, float v1);
    void glUniform2fARB(int location, float v0, float v1);
    void glUniform2fv(int location, int count, float* value);
    void glUniform2fvARB(int location, int count, float* value);
    void glUniform2i(int location, int v0, int v1);
    void glUniform2i64ARB(int location, long x, long y);
    void glUniform2i64NV(int location, long x, long y);
    void glUniform2i64vARB(int location, int count, long* value);
    void glUniform2i64vNV(int location, int count, long* value);
    void glUniform2iARB(int location, int v0, int v1);
    void glUniform2iv(int location, int count, int* value);
    void glUniform2ivARB(int location, int count, int* value);
    void glUniform2ui(int location, uint v0, uint v1);
    void glUniform2ui64ARB(int location, ulong x, ulong y);
    void glUniform2ui64NV(int location, ulong x, ulong y);
    void glUniform2ui64vARB(int location, int count, ulong* value);
    void glUniform2ui64vNV(int location, int count, ulong* value);
    void glUniform2uiEXT(int location, uint v0, uint v1);
    void glUniform2uiv(int location, int count, uint* value);
    void glUniform2uivEXT(int location, int count, uint* value);
    void glUniform3d(int location, double x, double y, double z);
    void glUniform3dv(int location, int count, double* value);
    void glUniform3f(int location, float v0, float v1, float v2);
    void glUniform3fARB(int location, float v0, float v1, float v2);
    void glUniform3fv(int location, int count, float* value);
    void glUniform3fvARB(int location, int count, float* value);
    void glUniform3i(int location, int v0, int v1, int v2);
    void glUniform3i64ARB(int location, long x, long y, long z);
    void glUniform3i64NV(int location, long x, long y, long z);
    void glUniform3i64vARB(int location, int count, long* value);
    void glUniform3i64vNV(int location, int count, long* value);
    void glUniform3iARB(int location, int v0, int v1, int v2);
    void glUniform3iv(int location, int count, int* value);
    void glUniform3ivARB(int location, int count, int* value);
    void glUniform3ui(int location, uint v0, uint v1, uint v2);
    void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z);
    void glUniform3ui64NV(int location, ulong x, ulong y, ulong z);
    void glUniform3ui64vARB(int location, int count, ulong* value);
    void glUniform3ui64vNV(int location, int count, ulong* value);
    void glUniform3uiEXT(int location, uint v0, uint v1, uint v2);
    void glUniform3uiv(int location, int count, uint* value);
    void glUniform3uivEXT(int location, int count, uint* value);
    void glUniform4d(int location, double x, double y, double z, double w);
    void glUniform4dv(int location, int count, double* value);
    void glUniform4f(int location, float v0, float v1, float v2, float v3);
    void glUniform4fARB(int location, float v0, float v1, float v2, float v3);
    void glUniform4fv(int location, int count, float* value);
    void glUniform4fvARB(int location, int count, float* value);
    void glUniform4i(int location, int v0, int v1, int v2, int v3);
    void glUniform4i64ARB(int location, long x, long y, long z, long w);
    void glUniform4i64NV(int location, long x, long y, long z, long w);
    void glUniform4i64vARB(int location, int count, long* value);
    void glUniform4i64vNV(int location, int count, long* value);
    void glUniform4iARB(int location, int v0, int v1, int v2, int v3);
    void glUniform4iv(int location, int count, int* value);
    void glUniform4ivARB(int location, int count, int* value);
    void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
    void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w);
    void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);
    void glUniform4ui64vARB(int location, int count, ulong* value);
    void glUniform4ui64vNV(int location, int count, ulong* value);
    void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3);
    void glUniform4uiv(int location, int count, uint* value);
    void glUniform4uivEXT(int location, int count, uint* value);
    void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
    void glUniformBufferEXT(uint program, int location, uint buffer);
    void glUniformHandleui64ARB(int location, ulong value);
    void glUniformHandleui64IMG(int location, ulong value);
    void glUniformHandleui64NV(int location, ulong value);
    void glUniformHandleui64vARB(int location, int count, ulong* value);
    void glUniformHandleui64vIMG(int location, int count, ulong* value);
    void glUniformHandleui64vNV(int location, int count, ulong* value);
    void glUniformMatrix2dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix2fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix2fvARB(int location, int count, byte transpose, float* value);
    void glUniformMatrix2x3dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix2x3fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix2x3fvNV(int location, int count, byte transpose, float* value);
    void glUniformMatrix2x4dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix2x4fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix2x4fvNV(int location, int count, byte transpose, float* value);
    void glUniformMatrix3dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix3fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix3fvARB(int location, int count, byte transpose, float* value);
    void glUniformMatrix3x2dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix3x2fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix3x2fvNV(int location, int count, byte transpose, float* value);
    void glUniformMatrix3x4dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix3x4fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix3x4fvNV(int location, int count, byte transpose, float* value);
    void glUniformMatrix4dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix4fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix4fvARB(int location, int count, byte transpose, float* value);
    void glUniformMatrix4x2dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix4x2fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix4x2fvNV(int location, int count, byte transpose, float* value);
    void glUniformMatrix4x3dv(int location, int count, byte transpose, double* value);
    void glUniformMatrix4x3fv(int location, int count, byte transpose, float* value);
    void glUniformMatrix4x3fvNV(int location, int count, byte transpose, float* value);
    void glUniformSubroutinesuiv(uint shadertype, int count, uint* indices);
    void glUniformui64NV(int location, ulong value);
    void glUniformui64vNV(int location, int count, ulong* value);
    void glUnlockArraysEXT();
    byte glUnmapBuffer(uint target);
    byte glUnmapBufferARB(uint target);
    byte glUnmapBufferOES(uint target);
    byte glUnmapNamedBuffer(uint buffer);
    byte glUnmapNamedBufferEXT(uint buffer);
    void glUnmapObjectBufferATI(uint buffer);
    void glUnmapTexture2DINTEL(uint texture, int level);
    void glUpdateObjectBufferATI(uint buffer, uint offset, int size, void* pointer, uint preserve);
    void glUploadGpuMaskNVX(uint mask);
    void glUseProgram(uint program);
    void glUseProgramObjectARB(nint programObj);
    void glUseProgramStages(uint pipeline, uint stages, uint program);
    void glUseProgramStagesEXT(uint pipeline, uint stages, uint program);
    void glUseShaderProgramEXT(uint type, uint program);
    void glVDPAUFiniNV();
    void glVDPAUGetSurfaceivNV(nint surface, uint pname, int count, int* length, int* values);
    void glVDPAUInitNV(void* vdpDevice, void* getProcAddress);
    byte glVDPAUIsSurfaceNV(nint surface);
    void glVDPAUMapSurfacesNV(int numSurfaces, nint* surfaces);
    nint glVDPAURegisterOutputSurfaceNV(void* vdpSurface, uint target, int numTextureNames, uint* textureNames);
    nint glVDPAURegisterVideoSurfaceNV(void* vdpSurface, uint target, int numTextureNames, uint* textureNames);
    nint glVDPAURegisterVideoSurfaceWithPictureStructureNV(void* vdpSurface, uint target, int numTextureNames, uint* textureNames, byte isFrameStructure);
    void glVDPAUSurfaceAccessNV(nint surface, uint access);
    void glVDPAUUnmapSurfacesNV(int numSurface, nint* surfaces);
    void glVDPAUUnregisterSurfaceNV(nint surface);
    void glValidateProgram(uint program);
    void glValidateProgramARB(nint programObj);
    void glValidateProgramPipeline(uint pipeline);
    void glValidateProgramPipelineEXT(uint pipeline);
    void glVariantArrayObjectATI(uint id, uint type, int stride, uint buffer, uint offset);
    void glVariantPointerEXT(uint id, uint type, uint stride, void* addr);
    void glVariantbvEXT(uint id, sbyte* addr);
    void glVariantdvEXT(uint id, double* addr);
    void glVariantfvEXT(uint id, float* addr);
    void glVariantivEXT(uint id, int* addr);
    void glVariantsvEXT(uint id, short* addr);
    void glVariantubvEXT(uint id, byte* addr);
    void glVariantuivEXT(uint id, uint* addr);
    void glVariantusvEXT(uint id, ushort* addr);
    void glVertex2bOES(sbyte x, sbyte y);
    void glVertex2bvOES(sbyte* coords);
    void glVertex2d(double x, double y);
    void glVertex2dv(double* v);
    void glVertex2f(float x, float y);
    void glVertex2fv(float* v);
    void glVertex2hNV(Half x, Half y);
    void glVertex2hvNV(Half* v);
    void glVertex2i(int x, int y);
    void glVertex2iv(int* v);
    void glVertex2s(short x, short y);
    void glVertex2sv(short* v);
    void glVertex2xOES(int x);
    void glVertex2xvOES(int* coords);
    void glVertex3bOES(sbyte x, sbyte y, sbyte z);
    void glVertex3bvOES(sbyte* coords);
    void glVertex3d(double x, double y, double z);
    void glVertex3dv(double* v);
    void glVertex3f(float x, float y, float z);
    void glVertex3fv(float* v);
    void glVertex3hNV(Half x, Half y, Half z);
    void glVertex3hvNV(Half* v);
    void glVertex3i(int x, int y, int z);
    void glVertex3iv(int* v);
    void glVertex3s(short x, short y, short z);
    void glVertex3sv(short* v);
    void glVertex3xOES(int x, int y);
    void glVertex3xvOES(int* coords);
    void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w);
    void glVertex4bvOES(sbyte* coords);
    void glVertex4d(double x, double y, double z, double w);
    void glVertex4dv(double* v);
    void glVertex4f(float x, float y, float z, float w);
    void glVertex4fv(float* v);
    void glVertex4hNV(Half x, Half y, Half z, Half w);
    void glVertex4hvNV(Half* v);
    void glVertex4i(int x, int y, int z, int w);
    void glVertex4iv(int* v);
    void glVertex4s(short x, short y, short z, short w);
    void glVertex4sv(short* v);
    void glVertex4xOES(int x, int y, int z);
    void glVertex4xvOES(int* coords);
    void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);
    void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset);
    void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);
    void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);
    void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);
    void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);
    void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);
    void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset);
    void glVertexArrayElementBuffer(uint vaobj, uint buffer);
    void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset);
    void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset);
    void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, uint texunit, int size, uint type, int stride, nint offset);
    void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset);
    void glVertexArrayParameteriAPPLE(uint pname, int param);
    void glVertexArrayRangeAPPLE(int length, void* pointer);
    void glVertexArrayRangeNV(int length, void* pointer);
    void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);
    void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);
    void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);
    void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);
    void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset);
    void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);
    void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int stride, nint offset);
    void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);
    void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int stride, nint offset);
    void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, byte normalized, int stride, nint offset);
    void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);
    void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);
    void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides);
    void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);
    void glVertexAttrib1d(uint index, double x);
    void glVertexAttrib1dARB(uint index, double x);
    void glVertexAttrib1dNV(uint index, double x);
    void glVertexAttrib1dv(uint index, double* v);
    void glVertexAttrib1dvARB(uint index, double* v);
    void glVertexAttrib1dvNV(uint index, double* v);
    void glVertexAttrib1f(uint index, float x);
    void glVertexAttrib1fARB(uint index, float x);
    void glVertexAttrib1fNV(uint index, float x);
    void glVertexAttrib1fv(uint index, float* v);
    void glVertexAttrib1fvARB(uint index, float* v);
    void glVertexAttrib1fvNV(uint index, float* v);
    void glVertexAttrib1hNV(uint index, Half x);
    void glVertexAttrib1hvNV(uint index, Half* v);
    void glVertexAttrib1s(uint index, short x);
    void glVertexAttrib1sARB(uint index, short x);
    void glVertexAttrib1sNV(uint index, short x);
    void glVertexAttrib1sv(uint index, short* v);
    void glVertexAttrib1svARB(uint index, short* v);
    void glVertexAttrib1svNV(uint index, short* v);
    void glVertexAttrib2d(uint index, double x, double y);
    void glVertexAttrib2dARB(uint index, double x, double y);
    void glVertexAttrib2dNV(uint index, double x, double y);
    void glVertexAttrib2dv(uint index, double* v);
    void glVertexAttrib2dvARB(uint index, double* v);
    void glVertexAttrib2dvNV(uint index, double* v);
    void glVertexAttrib2f(uint index, float x, float y);
    void glVertexAttrib2fARB(uint index, float x, float y);
    void glVertexAttrib2fNV(uint index, float x, float y);
    void glVertexAttrib2fv(uint index, float* v);
    void glVertexAttrib2fvARB(uint index, float* v);
    void glVertexAttrib2fvNV(uint index, float* v);
    void glVertexAttrib2hNV(uint index, Half x, Half y);
    void glVertexAttrib2hvNV(uint index, Half* v);
    void glVertexAttrib2s(uint index, short x, short y);
    void glVertexAttrib2sARB(uint index, short x, short y);
    void glVertexAttrib2sNV(uint index, short x, short y);
    void glVertexAttrib2sv(uint index, short* v);
    void glVertexAttrib2svARB(uint index, short* v);
    void glVertexAttrib2svNV(uint index, short* v);
    void glVertexAttrib3d(uint index, double x, double y, double z);
    void glVertexAttrib3dARB(uint index, double x, double y, double z);
    void glVertexAttrib3dNV(uint index, double x, double y, double z);
    void glVertexAttrib3dv(uint index, double* v);
    void glVertexAttrib3dvARB(uint index, double* v);
    void glVertexAttrib3dvNV(uint index, double* v);
    void glVertexAttrib3f(uint index, float x, float y, float z);
    void glVertexAttrib3fARB(uint index, float x, float y, float z);
    void glVertexAttrib3fNV(uint index, float x, float y, float z);
    void glVertexAttrib3fv(uint index, float* v);
    void glVertexAttrib3fvARB(uint index, float* v);
    void glVertexAttrib3fvNV(uint index, float* v);
    void glVertexAttrib3hNV(uint index, Half x, Half y, Half z);
    void glVertexAttrib3hvNV(uint index, Half* v);
    void glVertexAttrib3s(uint index, short x, short y, short z);
    void glVertexAttrib3sARB(uint index, short x, short y, short z);
    void glVertexAttrib3sNV(uint index, short x, short y, short z);
    void glVertexAttrib3sv(uint index, short* v);
    void glVertexAttrib3svARB(uint index, short* v);
    void glVertexAttrib3svNV(uint index, short* v);
    void glVertexAttrib4Nbv(uint index, sbyte* v);
    void glVertexAttrib4NbvARB(uint index, sbyte* v);
    void glVertexAttrib4Niv(uint index, int* v);
    void glVertexAttrib4NivARB(uint index, int* v);
    void glVertexAttrib4Nsv(uint index, short* v);
    void glVertexAttrib4NsvARB(uint index, short* v);
    void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
    void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w);
    void glVertexAttrib4Nubv(uint index, byte* v);
    void glVertexAttrib4NubvARB(uint index, byte* v);
    void glVertexAttrib4Nuiv(uint index, uint* v);
    void glVertexAttrib4NuivARB(uint index, uint* v);
    void glVertexAttrib4Nusv(uint index, ushort* v);
    void glVertexAttrib4NusvARB(uint index, ushort* v);
    void glVertexAttrib4bv(uint index, sbyte* v);
    void glVertexAttrib4bvARB(uint index, sbyte* v);
    void glVertexAttrib4d(uint index, double x, double y, double z, double w);
    void glVertexAttrib4dARB(uint index, double x, double y, double z, double w);
    void glVertexAttrib4dNV(uint index, double x, double y, double z, double w);
    void glVertexAttrib4dv(uint index, double* v);
    void glVertexAttrib4dvARB(uint index, double* v);
    void glVertexAttrib4dvNV(uint index, double* v);
    void glVertexAttrib4f(uint index, float x, float y, float z, float w);
    void glVertexAttrib4fARB(uint index, float x, float y, float z, float w);
    void glVertexAttrib4fNV(uint index, float x, float y, float z, float w);
    void glVertexAttrib4fv(uint index, float* v);
    void glVertexAttrib4fvARB(uint index, float* v);
    void glVertexAttrib4fvNV(uint index, float* v);
    void glVertexAttrib4hNV(uint index, Half x, Half y, Half z, Half w);
    void glVertexAttrib4hvNV(uint index, Half* v);
    void glVertexAttrib4iv(uint index, int* v);
    void glVertexAttrib4ivARB(uint index, int* v);
    void glVertexAttrib4s(uint index, short x, short y, short z, short w);
    void glVertexAttrib4sARB(uint index, short x, short y, short z, short w);
    void glVertexAttrib4sNV(uint index, short x, short y, short z, short w);
    void glVertexAttrib4sv(uint index, short* v);
    void glVertexAttrib4svARB(uint index, short* v);
    void glVertexAttrib4svNV(uint index, short* v);
    void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w);
    void glVertexAttrib4ubv(uint index, byte* v);
    void glVertexAttrib4ubvARB(uint index, byte* v);
    void glVertexAttrib4ubvNV(uint index, byte* v);
    void glVertexAttrib4uiv(uint index, uint* v);
    void glVertexAttrib4uivARB(uint index, uint* v);
    void glVertexAttrib4usv(uint index, ushort* v);
    void glVertexAttrib4usvARB(uint index, ushort* v);
    void glVertexAttribArrayObjectATI(uint index, int size, uint type, byte normalized, int stride, uint buffer, uint offset);
    void glVertexAttribBinding(uint attribindex, uint bindingindex);
    void glVertexAttribDivisor(uint index, uint divisor);
    void glVertexAttribDivisorANGLE(uint index, uint divisor);
    void glVertexAttribDivisorARB(uint index, uint divisor);
    void glVertexAttribDivisorEXT(uint index, uint divisor);
    void glVertexAttribDivisorNV(uint index, uint divisor);
    void glVertexAttribFormat(uint attribindex, int size, uint type, byte normalized, uint relativeoffset);
    void glVertexAttribFormatNV(uint index, int size, uint type, byte normalized, int stride);
    void glVertexAttribI1i(uint index, int x);
    void glVertexAttribI1iEXT(uint index, int x);
    void glVertexAttribI1iv(uint index, int* v);
    void glVertexAttribI1ivEXT(uint index, int* v);
    void glVertexAttribI1ui(uint index, uint x);
    void glVertexAttribI1uiEXT(uint index, uint x);
    void glVertexAttribI1uiv(uint index, uint* v);
    void glVertexAttribI1uivEXT(uint index, uint* v);
    void glVertexAttribI2i(uint index, int x, int y);
    void glVertexAttribI2iEXT(uint index, int x, int y);
    void glVertexAttribI2iv(uint index, int* v);
    void glVertexAttribI2ivEXT(uint index, int* v);
    void glVertexAttribI2ui(uint index, uint x, uint y);
    void glVertexAttribI2uiEXT(uint index, uint x, uint y);
    void glVertexAttribI2uiv(uint index, uint* v);
    void glVertexAttribI2uivEXT(uint index, uint* v);
    void glVertexAttribI3i(uint index, int x, int y, int z);
    void glVertexAttribI3iEXT(uint index, int x, int y, int z);
    void glVertexAttribI3iv(uint index, int* v);
    void glVertexAttribI3ivEXT(uint index, int* v);
    void glVertexAttribI3ui(uint index, uint x, uint y, uint z);
    void glVertexAttribI3uiEXT(uint index, uint x, uint y, uint z);
    void glVertexAttribI3uiv(uint index, uint* v);
    void glVertexAttribI3uivEXT(uint index, uint* v);
    void glVertexAttribI4bv(uint index, sbyte* v);
    void glVertexAttribI4bvEXT(uint index, sbyte* v);
    void glVertexAttribI4i(uint index, int x, int y, int z, int w);
    void glVertexAttribI4iEXT(uint index, int x, int y, int z, int w);
    void glVertexAttribI4iv(uint index, int* v);
    void glVertexAttribI4ivEXT(uint index, int* v);
    void glVertexAttribI4sv(uint index, short* v);
    void glVertexAttribI4svEXT(uint index, short* v);
    void glVertexAttribI4ubv(uint index, byte* v);
    void glVertexAttribI4ubvEXT(uint index, byte* v);
    void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
    void glVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w);
    void glVertexAttribI4uiv(uint index, uint* v);
    void glVertexAttribI4uivEXT(uint index, uint* v);
    void glVertexAttribI4usv(uint index, ushort* v);
    void glVertexAttribI4usvEXT(uint index, ushort* v);
    void glVertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset);
    void glVertexAttribIFormatNV(uint index, int size, uint type, int stride);
    void glVertexAttribIPointer(uint index, int size, uint type, int stride, void* pointer);
    void glVertexAttribIPointerEXT(uint index, int size, uint type, int stride, void* pointer);
    void glVertexAttribL1d(uint index, double x);
    void glVertexAttribL1dEXT(uint index, double x);
    void glVertexAttribL1dv(uint index, double* v);
    void glVertexAttribL1dvEXT(uint index, double* v);
    void glVertexAttribL1i64NV(uint index, long x);
    void glVertexAttribL1i64vNV(uint index, long* v);
    void glVertexAttribL1ui64ARB(uint index, ulong x);
    void glVertexAttribL1ui64NV(uint index, ulong x);
    void glVertexAttribL1ui64vARB(uint index, ulong* v);
    void glVertexAttribL1ui64vNV(uint index, ulong* v);
    void glVertexAttribL2d(uint index, double x, double y);
    void glVertexAttribL2dEXT(uint index, double x, double y);
    void glVertexAttribL2dv(uint index, double* v);
    void glVertexAttribL2dvEXT(uint index, double* v);
    void glVertexAttribL2i64NV(uint index, long x, long y);
    void glVertexAttribL2i64vNV(uint index, long* v);
    void glVertexAttribL2ui64NV(uint index, ulong x, ulong y);
    void glVertexAttribL2ui64vNV(uint index, ulong* v);
    void glVertexAttribL3d(uint index, double x, double y, double z);
    void glVertexAttribL3dEXT(uint index, double x, double y, double z);
    void glVertexAttribL3dv(uint index, double* v);
    void glVertexAttribL3dvEXT(uint index, double* v);
    void glVertexAttribL3i64NV(uint index, long x, long y, long z);
    void glVertexAttribL3i64vNV(uint index, long* v);
    void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);
    void glVertexAttribL3ui64vNV(uint index, ulong* v);
    void glVertexAttribL4d(uint index, double x, double y, double z, double w);
    void glVertexAttribL4dEXT(uint index, double x, double y, double z, double w);
    void glVertexAttribL4dv(uint index, double* v);
    void glVertexAttribL4dvEXT(uint index, double* v);
    void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w);
    void glVertexAttribL4i64vNV(uint index, long* v);
    void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);
    void glVertexAttribL4ui64vNV(uint index, ulong* v);
    void glVertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset);
    void glVertexAttribLFormatNV(uint index, int size, uint type, int stride);
    void glVertexAttribLPointer(uint index, int size, uint type, int stride, void* pointer);
    void glVertexAttribLPointerEXT(uint index, int size, uint type, int stride, void* pointer);
    void glVertexAttribP1ui(uint index, uint type, byte normalized, uint value);
    void glVertexAttribP1uiv(uint index, uint type, byte normalized, uint* value);
    void glVertexAttribP2ui(uint index, uint type, byte normalized, uint value);
    void glVertexAttribP2uiv(uint index, uint type, byte normalized, uint* value);
    void glVertexAttribP3ui(uint index, uint type, byte normalized, uint value);
    void glVertexAttribP3uiv(uint index, uint type, byte normalized, uint* value);
    void glVertexAttribP4ui(uint index, uint type, byte normalized, uint value);
    void glVertexAttribP4uiv(uint index, uint type, byte normalized, uint* value);
    void glVertexAttribParameteriAMD(uint index, uint pname, int param);
    void glVertexAttribPointer(uint index, int size, uint type, byte normalized, int stride, void* pointer);
    void glVertexAttribPointerARB(uint index, int size, uint type, byte normalized, int stride, void* pointer);
    void glVertexAttribPointerNV(uint index, int fsize, uint type, int stride, void* pointer);
    void glVertexAttribs1dvNV(uint index, int count, double* v);
    void glVertexAttribs1fvNV(uint index, int count, float* v);
    void glVertexAttribs1hvNV(uint index, int n, Half* v);
    void glVertexAttribs1svNV(uint index, int count, short* v);
    void glVertexAttribs2dvNV(uint index, int count, double* v);
    void glVertexAttribs2fvNV(uint index, int count, float* v);
    void glVertexAttribs2hvNV(uint index, int n, Half* v);
    void glVertexAttribs2svNV(uint index, int count, short* v);
    void glVertexAttribs3dvNV(uint index, int count, double* v);
    void glVertexAttribs3fvNV(uint index, int count, float* v);
    void glVertexAttribs3hvNV(uint index, int n, Half* v);
    void glVertexAttribs3svNV(uint index, int count, short* v);
    void glVertexAttribs4dvNV(uint index, int count, double* v);
    void glVertexAttribs4fvNV(uint index, int count, float* v);
    void glVertexAttribs4hvNV(uint index, int n, Half* v);
    void glVertexAttribs4svNV(uint index, int count, short* v);
    void glVertexAttribs4ubvNV(uint index, int count, byte* v);
    void glVertexBindingDivisor(uint bindingindex, uint divisor);
    void glVertexBlendARB(int count);
    void glVertexBlendEnvfATI(uint pname, float param);
    void glVertexBlendEnviATI(uint pname, int param);
    void glVertexFormatNV(int size, uint type, int stride);
    void glVertexP2ui(uint type, uint value);
    void glVertexP2uiv(uint type, uint* value);
    void glVertexP3ui(uint type, uint value);
    void glVertexP3uiv(uint type, uint* value);
    void glVertexP4ui(uint type, uint value);
    void glVertexP4uiv(uint type, uint* value);
    void glVertexPointer(int size, uint type, int stride, void* pointer);
    void glVertexPointerEXT(int size, uint type, int stride, int count, void* pointer);
    void glVertexPointerListIBM(int size, uint type, int stride, void** pointer, int ptrstride);
    void glVertexPointervINTEL(int size, uint type, void** pointer);
    void glVertexStream1dATI(uint stream, double x);
    void glVertexStream1dvATI(uint stream, double* coords);
    void glVertexStream1fATI(uint stream, float x);
    void glVertexStream1fvATI(uint stream, float* coords);
    void glVertexStream1iATI(uint stream, int x);
    void glVertexStream1ivATI(uint stream, int* coords);
    void glVertexStream1sATI(uint stream, short x);
    void glVertexStream1svATI(uint stream, short* coords);
    void glVertexStream2dATI(uint stream, double x, double y);
    void glVertexStream2dvATI(uint stream, double* coords);
    void glVertexStream2fATI(uint stream, float x, float y);
    void glVertexStream2fvATI(uint stream, float* coords);
    void glVertexStream2iATI(uint stream, int x, int y);
    void glVertexStream2ivATI(uint stream, int* coords);
    void glVertexStream2sATI(uint stream, short x, short y);
    void glVertexStream2svATI(uint stream, short* coords);
    void glVertexStream3dATI(uint stream, double x, double y, double z);
    void glVertexStream3dvATI(uint stream, double* coords);
    void glVertexStream3fATI(uint stream, float x, float y, float z);
    void glVertexStream3fvATI(uint stream, float* coords);
    void glVertexStream3iATI(uint stream, int x, int y, int z);
    void glVertexStream3ivATI(uint stream, int* coords);
    void glVertexStream3sATI(uint stream, short x, short y, short z);
    void glVertexStream3svATI(uint stream, short* coords);
    void glVertexStream4dATI(uint stream, double x, double y, double z, double w);
    void glVertexStream4dvATI(uint stream, double* coords);
    void glVertexStream4fATI(uint stream, float x, float y, float z, float w);
    void glVertexStream4fvATI(uint stream, float* coords);
    void glVertexStream4iATI(uint stream, int x, int y, int z, int w);
    void glVertexStream4ivATI(uint stream, int* coords);
    void glVertexStream4sATI(uint stream, short x, short y, short z, short w);
    void glVertexStream4svATI(uint stream, short* coords);
    void glVertexWeightPointerEXT(int size, uint type, int stride, void* pointer);
    void glVertexWeightfEXT(float weight);
    void glVertexWeightfvEXT(float* weight);
    void glVertexWeighthNV(Half weight);
    void glVertexWeighthvNV(Half* weight);
    uint glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong* capture_time);
    void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, uint pname, double* parameters);
    void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, uint pname, float* parameters);
    void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, uint pname, int* parameters);
    void glViewport(int x, int y, int width, int height);
    void glViewportArrayv(uint first, int count, float* v);
    void glViewportArrayvNV(uint first, int count, float* v);
    void glViewportArrayvOES(uint first, int count, float* v);
    void glViewportIndexedf(uint index, float x, float y, float w, float h);
    void glViewportIndexedfOES(uint index, float x, float y, float w, float h);
    void glViewportIndexedfNV(uint index, float x, float y, float w, float h);
    void glViewportIndexedfv(uint index, float* v);
    void glViewportIndexedfvOES(uint index, float* v);
    void glViewportIndexedfvNV(uint index, float* v);
    void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff);
    void glViewportSwizzleNV(uint index, uint swizzlex, uint swizzley, uint swizzlez, uint swizzlew);
    void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, uint* srcLayouts);
    void glWaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);
    void glWaitSync(nint sync, uint flags, ulong timeout);
    void glWaitSyncAPPLE(nint sync, uint flags, ulong timeout);
    void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights);
    void glWeightPointerARB(int size, uint type, int stride, void* pointer);
    void glWeightPointerOES(int size, uint type, int stride, void* pointer);
    void glWeightbvARB(int size, sbyte* weights);
    void glWeightdvARB(int size, double* weights);
    void glWeightfvARB(int size, float* weights);
    void glWeightivARB(int size, int* weights);
    void glWeightsvARB(int size, short* weights);
    void glWeightubvARB(int size, byte* weights);
    void glWeightuivARB(int size, uint* weights);
    void glWeightusvARB(int size, ushort* weights);
    void glWindowPos2d(double x, double y);
    void glWindowPos2dARB(double x, double y);
    void glWindowPos2dMESA(double x, double y);
    void glWindowPos2dv(double* v);
    void glWindowPos2dvARB(double* v);
    void glWindowPos2dvMESA(double* v);
    void glWindowPos2f(float x, float y);
    void glWindowPos2fARB(float x, float y);
    void glWindowPos2fMESA(float x, float y);
    void glWindowPos2fv(float* v);
    void glWindowPos2fvARB(float* v);
    void glWindowPos2fvMESA(float* v);
    void glWindowPos2i(int x, int y);
    void glWindowPos2iARB(int x, int y);
    void glWindowPos2iMESA(int x, int y);
    void glWindowPos2iv(int* v);
    void glWindowPos2ivARB(int* v);
    void glWindowPos2ivMESA(int* v);
    void glWindowPos2s(short x, short y);
    void glWindowPos2sARB(short x, short y);
    void glWindowPos2sMESA(short x, short y);
    void glWindowPos2sv(short* v);
    void glWindowPos2svARB(short* v);
    void glWindowPos2svMESA(short* v);
    void glWindowPos3d(double x, double y, double z);
    void glWindowPos3dARB(double x, double y, double z);
    void glWindowPos3dMESA(double x, double y, double z);
    void glWindowPos3dv(double* v);
    void glWindowPos3dvARB(double* v);
    void glWindowPos3dvMESA(double* v);
    void glWindowPos3f(float x, float y, float z);
    void glWindowPos3fARB(float x, float y, float z);
    void glWindowPos3fMESA(float x, float y, float z);
    void glWindowPos3fv(float* v);
    void glWindowPos3fvARB(float* v);
    void glWindowPos3fvMESA(float* v);
    void glWindowPos3i(int x, int y, int z);
    void glWindowPos3iARB(int x, int y, int z);
    void glWindowPos3iMESA(int x, int y, int z);
    void glWindowPos3iv(int* v);
    void glWindowPos3ivARB(int* v);
    void glWindowPos3ivMESA(int* v);
    void glWindowPos3s(short x, short y, short z);
    void glWindowPos3sARB(short x, short y, short z);
    void glWindowPos3sMESA(short x, short y, short z);
    void glWindowPos3sv(short* v);
    void glWindowPos3svARB(short* v);
    void glWindowPos3svMESA(short* v);
    void glWindowPos4dMESA(double x, double y, double z, double w);
    void glWindowPos4dvMESA(double* v);
    void glWindowPos4fMESA(float x, float y, float z, float w);
    void glWindowPos4fvMESA(float* v);
    void glWindowPos4iMESA(int x, int y, int z, int w);
    void glWindowPos4ivMESA(int* v);
    void glWindowPos4sMESA(short x, short y, short z, short w);
    void glWindowPos4svMESA(short* v);
    void glWindowRectanglesEXT(uint mode, int count, int* box);
    void glWriteMaskEXT(uint res, uint input, uint outX, uint outY, uint outZ, uint outW);
    void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
    nint glGetVkProcAddrNV(byte* name);
    void glWaitVkSemaphoreNV(ulong vkSemaphore);
    void glSignalVkSemaphoreNV(ulong vkSemaphore);
    void glSignalVkFenceNV(ulong vkFence);
    void glFramebufferParameteriMESA(uint target, uint pname, int param);
    void glGetFramebufferParameterivMESA(uint target, uint pname, int* parameters);
}
#pragma warning restore IDE1006 // Naming Styles
